
J2.elf:     file format elf32-littlenios2
J2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000000

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x0000b5dc memsz 0x0000b81c flags rwx
    LOAD off    0x0000c800 vaddr 0x04004800 paddr 0x04004800 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04004800  04004800  0000c800  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00009650  02000000  02000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  02009650  02009650  0000a650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00001860  02009d7c  02009d7c  0000ad7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000240  0200b5dc  0200b5dc  0000c5dc  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  0000c800  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000960  00000000  00000000  0000c828  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000f84  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001330b  00000000  00000000  0000e10c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005362  00000000  00000000  00021417  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000d358  00000000  00000000  00026779  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001300  00000000  00000000  00033ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000015e0  00000000  00000000  00034dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000042c9  00000000  00000000  000363b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0003a680  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000460  00000000  00000000  0003a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003d2b8  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0003d2bb  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0003d2be  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003d2bf  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003d2c0  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003d2c4  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003d2c8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0003d2cc  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0003d2d5  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0003d2de  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  0003d2e7  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000039  00000000  00000000  0003d2ee  2**0
                  CONTENTS, READONLY
 28 .jdi          00004972  00000000  00000000  0003d327  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04004800 l    d  .entry	00000000 .entry
02000000 l    d  .text	00000000 .text
02009650 l    d  .rodata	00000000 .rodata
02009d7c l    d  .rwdata	00000000 .rwdata
0200b5dc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0200008c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 data.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 print_functions.c
00000000 l    df *ABS*	00000000 print_screens.c
00000000 l    df *ABS*	00000000 process_entry.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
02009bb0 l     O .rodata	00000010 bp
02009bc0 l     O .rodata	00000010 dp_l
02009bd0 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
02009be0 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
02003efc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02005028 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
02009d7c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200a17c l     O .rwdata	0000009c vic_0
0200a218 l     O .rwdata	000000c4 epcs_flash_controller
0200a2dc l     O .rwdata	00001060 jtag_uart
0200b33c l     O .rwdata	000000c4 uart
020058e4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
020059a8 l     F .text	000001ec alt_epcs_flash_query
02005970 l     F .text	00000038 alt_flash_device_register
02005b94 l     F .text	00000108 alt_epcs_flash_memcmp
02006020 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02006458 l     F .text	00000228 altera_avalon_jtag_uart_irq
02006680 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02006d54 l     F .text	0000009c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
02007040 l     F .text	0000009c altera_avalon_uart_irq
020070dc l     F .text	000000e0 altera_avalon_uart_rxirq
020071bc l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
02007600 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
02007880 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
02009d50 l     O .rodata	00000020 VEC_SIZE_ARRAY.1587
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 epcs_commands.c
02007d24 l     F .text	00000038 epcs_await_wip_released
02007d5c l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
02008324 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02008384 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02008464 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0200865c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02008798 l     F .text	000000dc alt_file_locked
020089fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02009438 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
020095ec l     F .text	00000040 alt_sim_halt
0200b5dc g     O .bss	00000008 sSUI
02005f1c g     F .text	00000090 alt_epcs_flash_get_info
020057b0 g     F .text	0000006c alt_main
02003a6c g     F .text	00000018 fabs
02004a1c g     F .text	00000088 __eqdf2
02001f40 g     F .text	0000004c vSetThrottle
020006f8 g     F .text	00000104 vCursor
02001fe0 g     F .text	0000003c vEraseCommand
02004b2c g     F .text	00000088 __gtdf2
020057a0 g     F .text	00000010 __errno
02007ca8 g     F .text	0000007c epcs_sector_erase
04004800 g     F .entry	00000000 __reset
0200b5fc g     O .bss	00000004 errno
020007fc g     F .text	0000007c vPrintTxt
0200b600 g     O .bss	00000034 sDATA
0200b5e8 g     O .bss	00000004 alt_argv
020135a8 g       *ABS*	00000000 _gp
0200b428 g     O .rwdata	00000180 alt_fd_list
02007e98 g     F .text	00000064 epcs_write_status_register
020078e0 g       .text	00000000 VIC_0_VECTOR_TABLE
02008ec4 g     F .text	00000094 alt_find_dev
020091f0 g     F .text	000000a0 memcpy
02004cc4 g     F .text	000000f8 __floatsidf
02008720 g     F .text	00000078 alt_io_redirect
02004bb4 g     F .text	00000088 __ltdf2
02009650 g       *ABS*	00000000 __DTOR_END__
02000668 g     F .text	00000058 vPutChar
020060b4 g     F .text	00000110 alt_epcs_flash_write_block
02006898 g     F .text	00000250 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02005164 g     F .text	00000008 __udivsi3
02001160 g     F .text	00000524 vPrintDynamicScreen1
0200b5c4 g     O .rwdata	00000004 alt_max_fd
020055a0 g     F .text	00000138 __unpack_d
020019ec g     F .text	0000010c vInitializePWMs
0200438c g     F .text	00000074 __adddf3
02005fac g     F .text	00000074 alt_epcs_flash_erase_block
0200b5a8 g     O .rwdata	00000004 __fdlib_version
0200b5b0 g     O .rwdata	00000004 _global_impure_ptr
0200b81c g       *ABS*	00000000 __bss_end
02008b80 g     F .text	0000010c alt_tick
02004e94 g     F .text	00000194 __floatunsidf
02006f78 g     F .text	000000c8 altera_avalon_uart_init
02008abc g     F .text	000000c4 alt_alarm_stop
0200b400 g     O .rwdata	00000028 alt_dev_null
02003ae8 g     F .text	00000210 rint
02004dbc g     F .text	000000d8 __fixdfsi
02007960 g       .text	00000000 alt_shadow_non_preemptive_interrupt
0200b5bc g     O .rwdata	00000008 alt_dev_list
02001e6c g     F .text	000000d4 vSetServoPWM
02004c3c g     F .text	00000088 __ledf2
0200516c g     F .text	00000008 __umodsi3
02007fd4 g     F .text	0000006c epcs_read_electronic_signature
0200b81c g       *ABS*	00000000 end
02007660 g     F .text	00000220 altera_avalon_uart_write
02006398 g     F .text	000000c0 altera_avalon_jtag_uart_init
0200b634 g     O .bss	00000020 sADC
0200964c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02006df0 g     F .text	00000090 alt_avalon_timer_sc_init
02006ed8 g     F .text	00000058 altera_avalon_uart_write_fd
0200520c g     F .text	00000080 __clzsi2
02006f30 g     F .text	00000048 altera_avalon_uart_close_fd
02006ae8 g     F .text	0000026c altera_avalon_jtag_uart_write
0200943c g     F .text	000001b0 __call_exitprocs
020006c0 g     F .text	00000038 vPrintNum
02000000 g     F .text	00000090 _start
0200b5f4 g     O .bss	00000004 _alt_tick_rate
02008c8c g     F .text	00000238 alt_avalon_spi_command
0200b5f8 g     O .bss	00000004 _alt_nticks
0200585c g     F .text	00000088 alt_sys_init
02009304 g     F .text	00000134 __register_exitproc
0200175c g     F .text	00000114 vMonitorDiagnostic
02001e14 g     F .text	00000058 filter
020024a4 g     F .text	00001300 __ieee754_pow
02006730 g     F .text	00000074 altera_avalon_jtag_uart_close
0200201c g     F .text	00000488 pow
02007c48 g     F .text	00000060 epcs_read_status_register
02001684 g     F .text	000000d8 vProcessNewKey
02006250 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02009078 g     F .text	000000b8 alt_get_fd
02001f8c g     F .text	00000054 vEchoChar
020056d8 g     F .text	000000c8 __fpcmp_parts_d
02008040 g     F .text	00000068 epcs_read_device_id
0200917c g     F .text	00000074 memcmp
02006300 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0200b81c g       *ABS*	00000000 __alt_stack_base
02006348 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
020047c4 g     F .text	00000258 __divdf3
02001af8 g     F .text	0000031c processing
02004400 g     F .text	000003c4 __muldf3
04004800 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
02000878 g     F .text	000001a4 vPrintNlz
02008f58 g     F .text	00000120 alt_find_file
020083b0 g     F .text	000000b4 alt_dev_llist_insert
0200b5cc g     O .rwdata	00000008 alt_flash_dev_list
0200b5dc g       *ABS*	00000000 __bss_start
02000090 g     F .text	000005d8 main
0200b5ec g     O .bss	00000004 alt_envp
020062a8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02003ad0 g     F .text	00000008 matherr
0200b68c g     O .bss	00000190 _atexit0
0200b5c8 g     O .rwdata	00000004 alt_errno
020050a4 g     F .text	00000060 __divsi3
02009bf0 g     O .rodata	00000014 __thenan_df
02009650 g       *ABS*	00000000 __CTOR_END__
02003a84 g     F .text	0000001c finite
0200b5f0 g     O .bss	00000004 alt_vic_dev_list
02005c9c g     F .text	00000280 alt_epcs_flash_write
02009650 g       *ABS*	00000000 __DTOR_LIST__
02003ed8 g     F .text	00000024 copysign
02004aa4 g     F .text	00000088 __nedf2
0200581c g     F .text	00000040 alt_irq_init
02008a5c g     F .text	00000060 alt_release_fd
02009c04 g     O .rodata	00000100 __clz_tab
02009130 g     F .text	00000014 atexit
0200b5ac g     O .rwdata	00000004 _impure_ptr
0200b5e4 g     O .bss	00000004 alt_argc
02003cf8 g     F .text	000001e0 scalbn
0200b654 g     O .bss	00000020 sADC_F
02008528 g     F .text	00000064 _do_dtors
02000000 g       *ABS*	00000000 __alt_mem_sdram_0
02007978 g     F .text	0000015c alt_vic_irq_init
0200b5b4 g     O .rwdata	00000008 alt_fs_list
02001870 g     F .text	0000017c vProcessInputValue
02000ea4 g     F .text	000002bc vPrintStaticScreen1
02003ad8 g     F .text	00000010 nan
0200b674 g     O .bss	00000018 sRCVR
02000a1c g     F .text	00000488 vPrintFix
02007d94 g     F .text	000000b4 epcs_read_buffer
020037a4 g     F .text	000002c8 __ieee754_sqrt
04001000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0200591c g     F .text	00000054 alt_epcs_flash_init
02007ad4 g     F .text	00000174 alt_ic_isr_register
0200b5dc g       *ABS*	00000000 _edata
02006e80 g     F .text	00000058 altera_avalon_uart_read_fd
0200b81c g       *ABS*	00000000 _end
0200858c g     F .text	0000007c alt_flash_open_dev
020067a4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02009144 g     F .text	00000038 exit
02008608 g     F .text	00000054 alt_flash_close_dev
02005104 g     F .text	00000060 __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02007318 g     F .text	00000060 altera_avalon_uart_close
0200962c g     F .text	00000020 _exit
02003aa0 g     F .text	00000030 __isnand
020080a8 g     F .text	00000180 alt_alarm_start
02005174 g     F .text	00000098 __muldi3
02009290 g     F .text	00000074 strlen
02007e48 g     F .text	00000050 epcs_write_enable
02008874 g     F .text	00000188 open
02007378 g     F .text	00000288 altera_avalon_uart_read
0200430c g     F .text	00000080 __subdf3
020061c4 g     F .text	0000008c alt_epcs_flash_read
0200b5d4 g     O .rwdata	00000008 alt_alarm_list
020084c4 g     F .text	00000064 _do_ctors
02008228 g     F .text	000000fc close
0200528c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
02007efc g     F .text	000000d8 epcs_write_buffer



Disassembly of section .text:

02000000 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
 2000004:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <_start+0x4>
     * set, switch register set to 0 by writing zero to SSTATUS register and 
     * execute an ERET instruction that just jumps to the next PC address 
     * (use the NEXTPC instruction to get this).
     */
    
    rdctl r2, status
 2000010:	0005303a 	rdctl	r2,status
    
    /* Get the current register set number (STATUS.CRS). */
    andi r3, r2, NIOS2_STATUS_CRS_MSK
 2000014:	10ff000c 	andi	r3,r2,64512
    
    /* Skip switch register set if STATUS.CRS is 0.  */
    beq r3, zero, .Lskip_switch_reg_set
 2000018:	18000426 	beq	r3,zero,200002c <_start+0x2c>
    
    .set nobreak
    
    /* Current register set is non-zero, set SSTATUS to 0. */
    mov sstatus, zero
 200001c:	003d883a 	mov	r30,zero
    
    /* Get next pc and store in ea. */
    nextpc ea
 2000020:	003ae03a 	nextpc	ea
    
    /* Point to instruction after eret. */
    addi ea, ea, 8
 2000024:	ef400204 	addi	ea,ea,8
    
    /* 
     * Execute ERET instruction that just jumps to the next PC address 
     */
    eret
 2000028:	ef80083a 	eret
    
.Lskip_switch_reg_set:    
    mov r2, zero
 200002c:	0005883a 	mov	r2,zero
    
    /* Reset STATUS register */
    wrctl status, r2
 2000030:	1001703a 	wrctl	status,r2

    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS
 2000034:	00c001d4 	movui	r3,7
    
    /* Set up the stack pointer in register set 0. */
    movhi sp, %hi(__alt_stack_pointer)
 2000038:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 200003c:	dec00014 	ori	sp,sp,0
    
    /* Set up the global pointer in register set 0. */
    movhi gp, %hi(_gp)
 2000040:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)     
 2000044:	d68d6a14 	ori	gp,gp,13736
     * Setup GP and SP for shadow register set 
     * from NIOS2_NUM_OF_SHADOW_REG_SETS to 0
     */

    /* Skip if number of register sets is 0. */
    beq r3, zero, .Lno_shadow_register_set
 2000048:	18000726 	beq	r3,zero,2000068 <_start+0x68>


    /* Add previous register set STATUS.PRS by 1 */
    movhi r4, 1
 200004c:	01000074 	movhi	r4,1
    add r2, r2, r4
 2000050:	1105883a 	add	r2,r2,r4

    /* Write STATUS */
    wrctl status, r2
 2000054:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
 2000058:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
 200005c:	d034a03a 	wrprs	gp,gp
    wrprs sp, et

#endif /* ALT_INTERRUPT_STACK */

    /* Decrease number of register set counter by 1 */
    addi r3, r3, -1
 2000060:	18ffffc4 	addi	r3,r3,-1

    br .Lsetup_sp_and_gp_loop
 2000064:	003ff806 	br	2000048 <_start+0x48>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000068:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 200006c:	10ad7714 	ori	r2,r2,46556

    movhi r3, %hi(__bss_end)
 2000070:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 2000074:	18ee0714 	ori	r3,r3,47132

    beq r2, r3, 1f
 2000078:	10c00326 	beq	r2,r3,2000088 <_start+0x88>

0:
    stw zero, (r2)
 200007c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000080:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000084:	10fffd36 	bltu	r2,r3,200007c <_start+0x7c>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000088:	20057b00 	call	20057b0 <alt_main>

0200008c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 200008c:	003fff06 	br	200008c <alt_after_alt_main>

02000090 <main>:
extern struct ADC_STRUCT 		sADC;
extern struct ADC_STRUCT 		sADC_F;
extern struct DATA_STRUCT		sDATA;

int main()
{
 2000090:	defffa04 	addi	sp,sp,-24
 2000094:	dfc00515 	stw	ra,20(sp)
 2000098:	df000415 	stw	fp,16(sp)
 200009c:	df000404 	addi	fp,sp,16
	//enum Bool { FALSE =0, TRUE };
	//enum Bool up = TRUE;

	//int PWM_Steering = 205;
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0);
 20000a0:	00810034 	movhi	r2,1024
 20000a4:	10950b04 	addi	r2,r2,21548
 20000a8:	10000035 	stwio	zero,0(r2)
	sSUI.ubEntryMode = ENTRY_MODE_D;
 20000ac:	00c08074 	movhi	r3,513
 20000b0:	18ed7704 	addi	r3,r3,-18980
 20000b4:	00800044 	movi	r2,1
 20000b8:	18800045 	stb	r2,1(r3)
//	pUART->sControl.word = 192;
//	pUART->sStatus.word =0;
//	pUART->txdata = 0;
//	pUART->rxdata = 0;
	//pUART->txdata = 96;
	vInitializePWMs();
 20000bc:	20019ec0 	call	20019ec <vInitializePWMs>
	//vPrintStaticScreen1();
	sSUI.ubEnableDisplay = 1;			// Start with update enabled =1, disabled=0
 20000c0:	00c08074 	movhi	r3,513
 20000c4:	18ed7704 	addi	r3,r3,-18980
 20000c8:	00800044 	movi	r2,1
 20000cc:	18800005 	stb	r2,0(r3)

	sDATA.ulDistance_Old = sDATA.ulDistance_Real;
 20000d0:	00808074 	movhi	r2,513
 20000d4:	10ad8004 	addi	r2,r2,-18944
 20000d8:	10c00517 	ldw	r3,20(r2)
 20000dc:	00808074 	movhi	r2,513
 20000e0:	10ad8004 	addi	r2,r2,-18944
 20000e4:	10c00615 	stw	r3,24(r2)

	int count = 0;
 20000e8:	e03fff15 	stw	zero,-4(fp)
 20000ec:	00000006 	br	20000f0 <main+0x60>
	//printf("\033[2J\033[1;1H");
	while(1)
	{

		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, count&0xFF);
 20000f0:	e0bfff17 	ldw	r2,-4(fp)
 20000f4:	10c03fcc 	andi	r3,r2,255
 20000f8:	00810034 	movhi	r2,1024
 20000fc:	10950004 	addi	r2,r2,21504
 2000100:	10c00035 	stwio	r3,0(r2)
		count++;
 2000104:	e0bfff17 	ldw	r2,-4(fp)
 2000108:	10800044 	addi	r2,r2,1
 200010c:	e0bfff15 	stw	r2,-4(fp)

		//hall effect sensor counter
		sDATA.ulDistance_Real= IORD_32DIRECT(SLAVE_TEMPLATE_1_BASE, DATA_IN_0 * 4);
 2000110:	00810034 	movhi	r2,1024
 2000114:	108e0004 	addi	r2,r2,14336
 2000118:	10800037 	ldwio	r2,0(r2)
 200011c:	1007883a 	mov	r3,r2
 2000120:	00808074 	movhi	r2,513
 2000124:	10ad8004 	addi	r2,r2,-18944
 2000128:	10c00515 	stw	r3,20(r2)
		// Else print the dynamic values
		sRCVR.ulChannel1= IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_0 * 4); // channel 1
 200012c:	00810034 	movhi	r2,1024
 2000130:	108c0004 	addi	r2,r2,12288
 2000134:	10800037 	ldwio	r2,0(r2)
 2000138:	1007883a 	mov	r3,r2
 200013c:	00808074 	movhi	r2,513
 2000140:	10ad9d04 	addi	r2,r2,-18828
 2000144:	10c00015 	stw	r3,0(r2)
		sRCVR.ulChannel2= IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_1 * 4); // channel 2
 2000148:	00810034 	movhi	r2,1024
 200014c:	108c1004 	addi	r2,r2,12352
 2000150:	10800037 	ldwio	r2,0(r2)
 2000154:	1007883a 	mov	r3,r2
 2000158:	00808074 	movhi	r2,513
 200015c:	10ad9d04 	addi	r2,r2,-18828
 2000160:	10c00115 	stw	r3,4(r2)
		sRCVR.ulChannel3= IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_2 * 4); // channel 3
 2000164:	00810034 	movhi	r2,1024
 2000168:	108c2004 	addi	r2,r2,12416
 200016c:	10800037 	ldwio	r2,0(r2)
 2000170:	1007883a 	mov	r3,r2
 2000174:	00808074 	movhi	r2,513
 2000178:	10ad9d04 	addi	r2,r2,-18828
 200017c:	10c00215 	stw	r3,8(r2)
		sRCVR.ulChannel4= IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_3 * 4); // channel 4
 2000180:	00810034 	movhi	r2,1024
 2000184:	108c3004 	addi	r2,r2,12480
 2000188:	10800037 	ldwio	r2,0(r2)
 200018c:	1007883a 	mov	r3,r2
 2000190:	00808074 	movhi	r2,513
 2000194:	10ad9d04 	addi	r2,r2,-18828
 2000198:	10c00315 	stw	r3,12(r2)
		sRCVR.ulChannel5= IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_4 * 4); // channel 5
 200019c:	00810034 	movhi	r2,1024
 20001a0:	108c4004 	addi	r2,r2,12544
 20001a4:	10800037 	ldwio	r2,0(r2)
 20001a8:	1007883a 	mov	r3,r2
 20001ac:	00808074 	movhi	r2,513
 20001b0:	10ad9d04 	addi	r2,r2,-18828
 20001b4:	10c00415 	stw	r3,16(r2)
		sRCVR.ulChannel6= IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_5 * 4); // channel 6
 20001b8:	00810034 	movhi	r2,1024
 20001bc:	108c5004 	addi	r2,r2,12608
 20001c0:	10800037 	ldwio	r2,0(r2)
 20001c4:	1007883a 	mov	r3,r2
 20001c8:	00808074 	movhi	r2,513
 20001cc:	10ad9d04 	addi	r2,r2,-18828
 20001d0:	10c00515 	stw	r3,20(r2)

		sADC.ulADC1 = IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_6 * 4);//ADC channel 1
 20001d4:	00810034 	movhi	r2,1024
 20001d8:	108c6004 	addi	r2,r2,12672
 20001dc:	10800037 	ldwio	r2,0(r2)
 20001e0:	1007883a 	mov	r3,r2
 20001e4:	00808074 	movhi	r2,513
 20001e8:	10ad8d04 	addi	r2,r2,-18892
 20001ec:	10c00015 	stw	r3,0(r2)
		sADC.ulADC2 = IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_7 * 4);//ADC channel 2
 20001f0:	00810034 	movhi	r2,1024
 20001f4:	108c7004 	addi	r2,r2,12736
 20001f8:	10800037 	ldwio	r2,0(r2)
 20001fc:	1007883a 	mov	r3,r2
 2000200:	00808074 	movhi	r2,513
 2000204:	10ad8d04 	addi	r2,r2,-18892
 2000208:	10c00115 	stw	r3,4(r2)
		sADC.ulADC3 = IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_8 * 4);//ADC channel  3
 200020c:	00810034 	movhi	r2,1024
 2000210:	108c8004 	addi	r2,r2,12800
 2000214:	10800037 	ldwio	r2,0(r2)
 2000218:	1007883a 	mov	r3,r2
 200021c:	00808074 	movhi	r2,513
 2000220:	10ad8d04 	addi	r2,r2,-18892
 2000224:	10c00215 	stw	r3,8(r2)
		sADC.ulADC4 = IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_9 * 4);//ADC channel  4
 2000228:	00810034 	movhi	r2,1024
 200022c:	108c9004 	addi	r2,r2,12864
 2000230:	10800037 	ldwio	r2,0(r2)
 2000234:	1007883a 	mov	r3,r2
 2000238:	00808074 	movhi	r2,513
 200023c:	10ad8d04 	addi	r2,r2,-18892
 2000240:	10c00315 	stw	r3,12(r2)
		sADC.ulADC5 = IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_10 * 4);//ADC channel  5
 2000244:	00810034 	movhi	r2,1024
 2000248:	108ca004 	addi	r2,r2,12928
 200024c:	10800037 	ldwio	r2,0(r2)
 2000250:	1007883a 	mov	r3,r2
 2000254:	00808074 	movhi	r2,513
 2000258:	10ad8d04 	addi	r2,r2,-18892
 200025c:	10c00415 	stw	r3,16(r2)
		sADC.ulADC6 = IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_11 * 4);//ADC channel  6
 2000260:	00810034 	movhi	r2,1024
 2000264:	108cb004 	addi	r2,r2,12992
 2000268:	10800037 	ldwio	r2,0(r2)
 200026c:	1007883a 	mov	r3,r2
 2000270:	00808074 	movhi	r2,513
 2000274:	10ad8d04 	addi	r2,r2,-18892
 2000278:	10c00515 	stw	r3,20(r2)
		sADC.ulADC7 = IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_12 * 4);//ADC channel  7
 200027c:	00810034 	movhi	r2,1024
 2000280:	108cc004 	addi	r2,r2,13056
 2000284:	10800037 	ldwio	r2,0(r2)
 2000288:	1007883a 	mov	r3,r2
 200028c:	00808074 	movhi	r2,513
 2000290:	10ad8d04 	addi	r2,r2,-18892
 2000294:	10c00615 	stw	r3,24(r2)
		//sADC.ulADC8 = IORD_32DIRECT(SLAVE_TEMPLATE_0_BASE, DATA_IN_13 * 4);//ADC channel  8

		//automatic control if transmitter channel 5 toggled low
		sDATA.sBits.automatic = sRCVR.ulChannel5 < 75000 ? 1 : 0;
 2000298:	00808074 	movhi	r2,513
 200029c:	10ad9d04 	addi	r2,r2,-18828
 20002a0:	10c00417 	ldw	r3,16(r2)
 20002a4:	00800074 	movhi	r2,1
 20002a8:	10893dc4 	addi	r2,r2,9463
 20002ac:	10c5403a 	cmpgeu	r2,r2,r3
 20002b0:	01408074 	movhi	r5,513
 20002b4:	296d8004 	addi	r5,r5,-18944
 20002b8:	10803fcc 	andi	r2,r2,255
 20002bc:	1080004c 	andi	r2,r2,1
 20002c0:	1085883a 	add	r2,r2,r2
 20002c4:	1089883a 	add	r4,r2,r2
 20002c8:	28c00c17 	ldw	r3,48(r5)
 20002cc:	00bffec4 	movi	r2,-5
 20002d0:	1884703a 	and	r2,r3,r2
 20002d4:	1104b03a 	or	r2,r2,r4
 20002d8:	28800c15 	stw	r2,48(r5)

		//reset distance if channel 6 toggled high
		if (sRCVR.ulChannel6 < 75000)
 20002dc:	00808074 	movhi	r2,513
 20002e0:	10ad9d04 	addi	r2,r2,-18828
 20002e4:	10c00517 	ldw	r3,20(r2)
 20002e8:	00800074 	movhi	r2,1
 20002ec:	10893dc4 	addi	r2,r2,9463
 20002f0:	10c00636 	bltu	r2,r3,200030c <main+0x27c>
		{
			sDATA.sBits.distance_reset = 1;
 20002f4:	00808074 	movhi	r2,513
 20002f8:	10ad8004 	addi	r2,r2,-18944
 20002fc:	10c00c17 	ldw	r3,48(r2)
 2000300:	18c00094 	ori	r3,r3,2
 2000304:	10c00c15 	stw	r3,48(r2)
 2000308:	00000c06 	br	200033c <main+0x2ac>
		}
		else
		{
			sDATA.sBits.distance_reset = 0;
 200030c:	01008074 	movhi	r4,513
 2000310:	212d8004 	addi	r4,r4,-18944
 2000314:	20c00c17 	ldw	r3,48(r4)
 2000318:	00bfff44 	movi	r2,-3
 200031c:	1884703a 	and	r2,r3,r2
 2000320:	20800c15 	stw	r2,48(r4)
			sDATA.ulDistance_Old = sDATA.ulDistance_Real; //reset distance delta
 2000324:	00808074 	movhi	r2,513
 2000328:	10ad8004 	addi	r2,r2,-18944
 200032c:	10c00517 	ldw	r3,20(r2)
 2000330:	00808074 	movhi	r2,513
 2000334:	10ad8004 	addi	r2,r2,-18944
 2000338:	10c00615 	stw	r3,24(r2)
		}

		//if normal mode engaged run baljeets firmware control
		if (sDATA.sBits.testOrNormal == NORMAL)
 200033c:	00808074 	movhi	r2,513
 2000340:	10ad8004 	addi	r2,r2,-18944
 2000344:	10800c17 	ldw	r2,48(r2)
 2000348:	1080004c 	andi	r2,r2,1
 200034c:	1005003a 	cmpeq	r2,r2,zero
 2000350:	10009c1e 	bne	r2,zero,20005c4 <main+0x534>
		{

			if (sRCVR.ulChannel5 < 75000)
 2000354:	00808074 	movhi	r2,513
 2000358:	10ad9d04 	addi	r2,r2,-18828
 200035c:	10c00417 	ldw	r3,16(r2)
 2000360:	00800074 	movhi	r2,1
 2000364:	10893dc4 	addi	r2,r2,9463
 2000368:	10c08336 	bltu	r2,r3,2000578 <main+0x4e8>
			{

				sADC_F.ulADC1 = filter(sADC.ulADC1,sADC_F.ulADC1);
 200036c:	00808074 	movhi	r2,513
 2000370:	10ad8d04 	addi	r2,r2,-18892
 2000374:	11000017 	ldw	r4,0(r2)
 2000378:	00808074 	movhi	r2,513
 200037c:	10ad9504 	addi	r2,r2,-18860
 2000380:	11400017 	ldw	r5,0(r2)
 2000384:	2001e140 	call	2001e14 <filter>
 2000388:	1007883a 	mov	r3,r2
 200038c:	00808074 	movhi	r2,513
 2000390:	10ad9504 	addi	r2,r2,-18860
 2000394:	10c00015 	stw	r3,0(r2)
				sADC_F.ulADC2 = filter(sADC.ulADC2,sADC_F.ulADC2);
 2000398:	00808074 	movhi	r2,513
 200039c:	10ad8d04 	addi	r2,r2,-18892
 20003a0:	11000117 	ldw	r4,4(r2)
 20003a4:	00808074 	movhi	r2,513
 20003a8:	10ad9504 	addi	r2,r2,-18860
 20003ac:	11400117 	ldw	r5,4(r2)
 20003b0:	2001e140 	call	2001e14 <filter>
 20003b4:	1007883a 	mov	r3,r2
 20003b8:	00808074 	movhi	r2,513
 20003bc:	10ad9504 	addi	r2,r2,-18860
 20003c0:	10c00115 	stw	r3,4(r2)
				sADC_F.ulADC3 = filter(sADC.ulADC3,sADC_F.ulADC3);
 20003c4:	00808074 	movhi	r2,513
 20003c8:	10ad8d04 	addi	r2,r2,-18892
 20003cc:	11000217 	ldw	r4,8(r2)
 20003d0:	00808074 	movhi	r2,513
 20003d4:	10ad9504 	addi	r2,r2,-18860
 20003d8:	11400217 	ldw	r5,8(r2)
 20003dc:	2001e140 	call	2001e14 <filter>
 20003e0:	1007883a 	mov	r3,r2
 20003e4:	00808074 	movhi	r2,513
 20003e8:	10ad9504 	addi	r2,r2,-18860
 20003ec:	10c00215 	stw	r3,8(r2)
				sADC_F.ulADC4 = filter(sADC.ulADC4,sADC_F.ulADC4);
 20003f0:	00808074 	movhi	r2,513
 20003f4:	10ad8d04 	addi	r2,r2,-18892
 20003f8:	11000317 	ldw	r4,12(r2)
 20003fc:	00808074 	movhi	r2,513
 2000400:	10ad9504 	addi	r2,r2,-18860
 2000404:	11400317 	ldw	r5,12(r2)
 2000408:	2001e140 	call	2001e14 <filter>
 200040c:	1007883a 	mov	r3,r2
 2000410:	00808074 	movhi	r2,513
 2000414:	10ad9504 	addi	r2,r2,-18860
 2000418:	10c00315 	stw	r3,12(r2)
				sADC_F.ulADC5 = filter(sADC.ulADC5,sADC_F.ulADC5);
 200041c:	00808074 	movhi	r2,513
 2000420:	10ad8d04 	addi	r2,r2,-18892
 2000424:	11000417 	ldw	r4,16(r2)
 2000428:	00808074 	movhi	r2,513
 200042c:	10ad9504 	addi	r2,r2,-18860
 2000430:	11400417 	ldw	r5,16(r2)
 2000434:	2001e140 	call	2001e14 <filter>
 2000438:	1007883a 	mov	r3,r2
 200043c:	00808074 	movhi	r2,513
 2000440:	10ad9504 	addi	r2,r2,-18860
 2000444:	10c00415 	stw	r3,16(r2)
				sADC_F.ulADC6 = filter(sADC.ulADC6,sADC_F.ulADC6);
 2000448:	00808074 	movhi	r2,513
 200044c:	10ad8d04 	addi	r2,r2,-18892
 2000450:	11000517 	ldw	r4,20(r2)
 2000454:	00808074 	movhi	r2,513
 2000458:	10ad9504 	addi	r2,r2,-18860
 200045c:	11400517 	ldw	r5,20(r2)
 2000460:	2001e140 	call	2001e14 <filter>
 2000464:	1007883a 	mov	r3,r2
 2000468:	00808074 	movhi	r2,513
 200046c:	10ad9504 	addi	r2,r2,-18860
 2000470:	10c00515 	stw	r3,20(r2)
				sADC_F.ulADC7 = filter(sADC.ulADC7,sADC_F.ulADC7);
 2000474:	00808074 	movhi	r2,513
 2000478:	10ad8d04 	addi	r2,r2,-18892
 200047c:	11000617 	ldw	r4,24(r2)
 2000480:	00808074 	movhi	r2,513
 2000484:	10ad9504 	addi	r2,r2,-18860
 2000488:	11400617 	ldw	r5,24(r2)
 200048c:	2001e140 	call	2001e14 <filter>
 2000490:	1007883a 	mov	r3,r2
 2000494:	00808074 	movhi	r2,513
 2000498:	10ad9504 	addi	r2,r2,-18860
 200049c:	10c00615 	stw	r3,24(r2)

				processing(sADC_F.ulADC1,sADC_F.ulADC2,sADC_F.ulADC3,sADC_F.ulADC4,sADC_F.ulADC5,sADC_F.ulADC6,sADC_F.ulADC7);
 20004a0:	00808074 	movhi	r2,513
 20004a4:	10ad9504 	addi	r2,r2,-18860
 20004a8:	11400017 	ldw	r5,0(r2)
 20004ac:	00808074 	movhi	r2,513
 20004b0:	10ad9504 	addi	r2,r2,-18860
 20004b4:	11800117 	ldw	r6,4(r2)
 20004b8:	00808074 	movhi	r2,513
 20004bc:	10ad9504 	addi	r2,r2,-18860
 20004c0:	11c00217 	ldw	r7,8(r2)
 20004c4:	00808074 	movhi	r2,513
 20004c8:	10ad9504 	addi	r2,r2,-18860
 20004cc:	12000317 	ldw	r8,12(r2)
 20004d0:	00808074 	movhi	r2,513
 20004d4:	10ad9504 	addi	r2,r2,-18860
 20004d8:	10c00417 	ldw	r3,16(r2)
 20004dc:	00808074 	movhi	r2,513
 20004e0:	10ad9504 	addi	r2,r2,-18860
 20004e4:	11000517 	ldw	r4,20(r2)
 20004e8:	00808074 	movhi	r2,513
 20004ec:	10ad9504 	addi	r2,r2,-18860
 20004f0:	10800617 	ldw	r2,24(r2)
 20004f4:	d8c00015 	stw	r3,0(sp)
 20004f8:	d9000115 	stw	r4,4(sp)
 20004fc:	d8800215 	stw	r2,8(sp)
 2000500:	2809883a 	mov	r4,r5
 2000504:	300b883a 	mov	r5,r6
 2000508:	380d883a 	mov	r6,r7
 200050c:	400f883a 	mov	r7,r8
 2000510:	2001af80 	call	2001af8 <processing>
				if ((sDATA.ulDistance_Real - sDATA.ulDistance_Old) >= sDATA.ulDistanceLimit)
 2000514:	00808074 	movhi	r2,513
 2000518:	10ad8004 	addi	r2,r2,-18944
 200051c:	10c00517 	ldw	r3,20(r2)
 2000520:	00808074 	movhi	r2,513
 2000524:	10ad8004 	addi	r2,r2,-18944
 2000528:	10800617 	ldw	r2,24(r2)
 200052c:	1887c83a 	sub	r3,r3,r2
 2000530:	00808074 	movhi	r2,513
 2000534:	10ad8004 	addi	r2,r2,-18944
 2000538:	10800717 	ldw	r2,28(r2)
 200053c:	18800536 	bltu	r3,r2,2000554 <main+0x4c4>
				{
					//stop
					vSetThrottle(sDATA.ulThrottleNeutral);
 2000540:	00808074 	movhi	r2,513
 2000544:	10ad8004 	addi	r2,r2,-18944
 2000548:	11000b17 	ldw	r4,44(r2)
 200054c:	2001f400 	call	2001f40 <vSetThrottle>
 2000550:	00003106 	br	2000618 <main+0x588>
				}
				else //until distance limit set throttle and servo
				{
					vSetServoPWM(sDATA.ulServoPWM_C);
 2000554:	00808074 	movhi	r2,513
 2000558:	10ad8004 	addi	r2,r2,-18944
 200055c:	11000017 	ldw	r4,0(r2)
 2000560:	2001e6c0 	call	2001e6c <vSetServoPWM>
					vSetThrottle(sDATA.ulThrottlePWM_C);
 2000564:	00808074 	movhi	r2,513
 2000568:	10ad8004 	addi	r2,r2,-18944
 200056c:	11000817 	ldw	r4,32(r2)
 2000570:	2001f400 	call	2001f40 <vSetThrottle>
 2000574:	00002806 	br	2000618 <main+0x588>
				}
			}
			else //Manual control by remote
			{
				vSetServoPWM(((sRCVR.ulChannel4*2457)/75000));
 2000578:	00808074 	movhi	r2,513
 200057c:	10ad9d04 	addi	r2,r2,-18828
 2000580:	10800317 	ldw	r2,12(r2)
 2000584:	11026664 	muli	r4,r2,2457
 2000588:	01400074 	movhi	r5,1
 200058c:	29493e04 	addi	r5,r5,9464
 2000590:	20051640 	call	2005164 <__udivsi3>
 2000594:	1009883a 	mov	r4,r2
 2000598:	2001e6c0 	call	2001e6c <vSetServoPWM>
				vSetThrottle(((sRCVR.ulChannel4*2457)/75000));
 200059c:	00808074 	movhi	r2,513
 20005a0:	10ad9d04 	addi	r2,r2,-18828
 20005a4:	10800317 	ldw	r2,12(r2)
 20005a8:	11026664 	muli	r4,r2,2457
 20005ac:	01400074 	movhi	r5,1
 20005b0:	29493e04 	addi	r5,r5,9464
 20005b4:	20051640 	call	2005164 <__udivsi3>
 20005b8:	1009883a 	mov	r4,r2
 20005bc:	2001f400 	call	2001f40 <vSetThrottle>
 20005c0:	00001506 	br	2000618 <main+0x588>
		}
		// else run Mike's Test mode control
		else //(sDATA.sBits.testOrNormal == TEST)
		{
			//set throttle neutral if distance limit reached
			if ((sDATA.ulDistance_Real - sDATA.ulDistance_Old) >= sDATA.ulDistanceLimit)
 20005c4:	00808074 	movhi	r2,513
 20005c8:	10ad8004 	addi	r2,r2,-18944
 20005cc:	10c00517 	ldw	r3,20(r2)
 20005d0:	00808074 	movhi	r2,513
 20005d4:	10ad8004 	addi	r2,r2,-18944
 20005d8:	10800617 	ldw	r2,24(r2)
 20005dc:	1887c83a 	sub	r3,r3,r2
 20005e0:	00808074 	movhi	r2,513
 20005e4:	10ad8004 	addi	r2,r2,-18944
 20005e8:	10800717 	ldw	r2,28(r2)
 20005ec:	18800a36 	bltu	r3,r2,2000618 <main+0x588>
			{
				//stop
				vSetThrottle(sDATA.ulThrottleNeutral);
 20005f0:	00808074 	movhi	r2,513
 20005f4:	10ad8004 	addi	r2,r2,-18944
 20005f8:	11000b17 	ldw	r4,44(r2)
 20005fc:	2001f400 	call	2001f40 <vSetThrottle>
				sDATA.ulDistance_Old = sDATA.ulDistance_Real; //reset distance delta
 2000600:	00808074 	movhi	r2,513
 2000604:	10ad8004 	addi	r2,r2,-18944
 2000608:	10c00517 	ldw	r3,20(r2)
 200060c:	00808074 	movhi	r2,513
 2000610:	10ad8004 	addi	r2,r2,-18944
 2000614:	10c00615 	stw	r3,24(r2)
			}
		}

//
//		// If entry from key board
		if ((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&0x80)==0x80)
 2000618:	00810034 	movhi	r2,1024
 200061c:	10950a04 	addi	r2,r2,21544
 2000620:	10800037 	ldwio	r2,0(r2)
 2000624:	1080200c 	andi	r2,r2,128
 2000628:	1005003a 	cmpeq	r2,r2,zero
 200062c:	1000061e 	bne	r2,zero,2000648 <main+0x5b8>
		{
			// Then read the character and perform the action
			vProcessNewKey(IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE));
 2000630:	00810034 	movhi	r2,1024
 2000634:	10950804 	addi	r2,r2,21536
 2000638:	10800037 	ldwio	r2,0(r2)
 200063c:	11003fcc 	andi	r4,r2,255
 2000640:	20016840 	call	2001684 <vProcessNewKey>
 2000644:	003eaa06 	br	20000f0 <main+0x60>
		}
		else if (sSUI.ubEnableDisplay)
 2000648:	00808074 	movhi	r2,513
 200064c:	10ad7704 	addi	r2,r2,-18980
 2000650:	10800003 	ldbu	r2,0(r2)
 2000654:	10803fcc 	andi	r2,r2,255
 2000658:	1005003a 	cmpeq	r2,r2,zero
 200065c:	103ea41e 	bne	r2,zero,20000f0 <main+0x60>
		{vPrintDynamicScreen1();}
 2000660:	20011600 	call	2001160 <vPrintDynamicScreen1>
		//printf("%d\n",pUART->sStatus.word);

//		int c = getchar();
//		//while(c = getchar());
//		printf("%c",c);
	}
 2000664:	003ea206 	br	20000f0 <main+0x60>

02000668 <vPutChar>:
/*!
 * @brief	Called from background to print one character
 * @param	[in] ubChar ASCII value of character to print
 */
void vPutChar(alt_u8 ubChar)
{
 2000668:	defffe04 	addi	sp,sp,-8
 200066c:	df000115 	stw	fp,4(sp)
 2000670:	df000104 	addi	fp,sp,4
 2000674:	e13fff05 	stb	r4,-4(fp)
	//pUART->sControl.word = 0;
	//printf("putchar");
  // wait for xmit ready
 // while(!pUART->sStatus.sBits.trdy);
	 // printf(pUART->sStatus.sBits.trdy);
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0x40); //tell control we want to transmit
 2000678:	00c10034 	movhi	r3,1024
 200067c:	18d50b04 	addi	r3,r3,21548
 2000680:	00801004 	movi	r2,64
 2000684:	18800035 	stwio	r2,0(r3)
while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&0x40)==0x40);//wait for transmit ready status
 2000688:	00810034 	movhi	r2,1024
 200068c:	10950a04 	addi	r2,r2,21544
 2000690:	10800037 	ldwio	r2,0(r2)
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE,ubChar);
 2000694:	e0ffff03 	ldbu	r3,-4(fp)
 2000698:	00810034 	movhi	r2,1024
 200069c:	10950904 	addi	r2,r2,21540
 20006a0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0); //turn off transmit after finish transmitting
 20006a4:	00810034 	movhi	r2,1024
 20006a8:	10950b04 	addi	r2,r2,21548
 20006ac:	10000035 	stwio	zero,0(r2)

  //pUART->txdata = 96;

}
 20006b0:	e037883a 	mov	sp,fp
 20006b4:	df000017 	ldw	fp,0(sp)
 20006b8:	dec00104 	addi	sp,sp,4
 20006bc:	f800283a 	ret

020006c0 <vPrintNum>:
/*!
 * @brief	Print one decimal character
 * @param	[in] swValue Binary value of digit to print
 */
void vPrintNum(alt_16 swValue)
{
 20006c0:	defffd04 	addi	sp,sp,-12
 20006c4:	dfc00215 	stw	ra,8(sp)
 20006c8:	df000115 	stw	fp,4(sp)
 20006cc:	df000104 	addi	fp,sp,4
 20006d0:	e13fff0d 	sth	r4,-4(fp)
  vPutChar(swValue + '0');
 20006d4:	e0bfff0b 	ldhu	r2,-4(fp)
 20006d8:	10800c04 	addi	r2,r2,48
 20006dc:	11003fcc 	andi	r4,r2,255
 20006e0:	20006680 	call	2000668 <vPutChar>
}
 20006e4:	e037883a 	mov	sp,fp
 20006e8:	dfc00117 	ldw	ra,4(sp)
 20006ec:	df000017 	ldw	fp,0(sp)
 20006f0:	dec00204 	addi	sp,sp,8
 20006f4:	f800283a 	ret

020006f8 <vCursor>:
 * @brief	Print control characters to position the cursor
 * @param	 uwRow Row
 * @param 	 uwCol Column
 */
void vCursor(alt_u16 uwRow, alt_u16 uwCol)
{
 20006f8:	defffc04 	addi	sp,sp,-16
 20006fc:	dfc00315 	stw	ra,12(sp)
 2000700:	df000215 	stw	fp,8(sp)
 2000704:	df000204 	addi	fp,sp,8
 2000708:	e13ffe0d 	sth	r4,-8(fp)
 200070c:	e17fff0d 	sth	r5,-4(fp)
  vPutChar(27);		// ESC
 2000710:	010006c4 	movi	r4,27
 2000714:	20006680 	call	2000668 <vPutChar>
  vPutChar('[');
 2000718:	010016c4 	movi	r4,91
 200071c:	20006680 	call	2000668 <vPutChar>
  if (uwRow < 10)
 2000720:	e0bffe0b 	ldhu	r2,-8(fp)
 2000724:	108002a8 	cmpgeui	r2,r2,10
 2000728:	1000051e 	bne	r2,zero,2000740 <vCursor+0x48>
  {
	vPutChar(uwRow + '0');
 200072c:	e0bffe0b 	ldhu	r2,-8(fp)
 2000730:	10800c04 	addi	r2,r2,48
 2000734:	11003fcc 	andi	r4,r2,255
 2000738:	20006680 	call	2000668 <vPutChar>
 200073c:	00000c06 	br	2000770 <vCursor+0x78>
  }
  else
  {
	vPutChar(uwRow/10 + '0');
 2000740:	e13ffe0b 	ldhu	r4,-8(fp)
 2000744:	01400284 	movi	r5,10
 2000748:	20051640 	call	2005164 <__udivsi3>
 200074c:	10800c04 	addi	r2,r2,48
 2000750:	11003fcc 	andi	r4,r2,255
 2000754:	20006680 	call	2000668 <vPutChar>
	vPutChar(uwRow%10 + '0');
 2000758:	e13ffe0b 	ldhu	r4,-8(fp)
 200075c:	01400284 	movi	r5,10
 2000760:	200516c0 	call	200516c <__umodsi3>
 2000764:	10800c04 	addi	r2,r2,48
 2000768:	11003fcc 	andi	r4,r2,255
 200076c:	20006680 	call	2000668 <vPutChar>
  }
  vPutChar(';');
 2000770:	01000ec4 	movi	r4,59
 2000774:	20006680 	call	2000668 <vPutChar>
  if (uwCol < 10)
 2000778:	e0bfff0b 	ldhu	r2,-4(fp)
 200077c:	108002a8 	cmpgeui	r2,r2,10
 2000780:	1000051e 	bne	r2,zero,2000798 <vCursor+0xa0>
  {
	vPutChar(uwCol + '0');
 2000784:	e0bfff0b 	ldhu	r2,-4(fp)
 2000788:	10800c04 	addi	r2,r2,48
 200078c:	11003fcc 	andi	r4,r2,255
 2000790:	20006680 	call	2000668 <vPutChar>
 2000794:	00000c06 	br	20007c8 <vCursor+0xd0>
  }
  else
  {
    vPutChar(uwCol/10 + '0');
 2000798:	e13fff0b 	ldhu	r4,-4(fp)
 200079c:	01400284 	movi	r5,10
 20007a0:	20051640 	call	2005164 <__udivsi3>
 20007a4:	10800c04 	addi	r2,r2,48
 20007a8:	11003fcc 	andi	r4,r2,255
 20007ac:	20006680 	call	2000668 <vPutChar>
    vPutChar(uwCol%10 + '0');
 20007b0:	e13fff0b 	ldhu	r4,-4(fp)
 20007b4:	01400284 	movi	r5,10
 20007b8:	200516c0 	call	200516c <__umodsi3>
 20007bc:	10800c04 	addi	r2,r2,48
 20007c0:	11003fcc 	andi	r4,r2,255
 20007c4:	20006680 	call	2000668 <vPutChar>
  }
  vPutChar('H');
 20007c8:	01001204 	movi	r4,72
 20007cc:	20006680 	call	2000668 <vPutChar>
  vPutChar(0);
 20007d0:	0009883a 	mov	r4,zero
 20007d4:	20006680 	call	2000668 <vPutChar>
  vPutChar(0);
 20007d8:	0009883a 	mov	r4,zero
 20007dc:	20006680 	call	2000668 <vPutChar>
  vPutChar(0);
 20007e0:	0009883a 	mov	r4,zero
 20007e4:	20006680 	call	2000668 <vPutChar>
}
 20007e8:	e037883a 	mov	sp,fp
 20007ec:	dfc00117 	ldw	ra,4(sp)
 20007f0:	df000017 	ldw	fp,0(sp)
 20007f4:	dec00204 	addi	sp,sp,8
 20007f8:	f800283a 	ret

020007fc <vPrintTxt>:
 * @param 	[in] uwCol Column
 * @param 	[in] swLength Byte length
 * @param 	[in out] pText Pointer to string
 */
void vPrintTxt(alt_u16 uwRow, alt_u16 uwCol, alt_16 swLength, char *pText)
{
 20007fc:	defff904 	addi	sp,sp,-28
 2000800:	dfc00615 	stw	ra,24(sp)
 2000804:	df000515 	stw	fp,20(sp)
 2000808:	df000504 	addi	fp,sp,20
 200080c:	e1ffff15 	stw	r7,-4(fp)
 2000810:	e13ffc0d 	sth	r4,-16(fp)
 2000814:	e17ffd0d 	sth	r5,-12(fp)
 2000818:	e1bffe0d 	sth	r6,-8(fp)
  alt_u16 i;			// for loop index

  vCursor(uwRow, uwCol);		// Position the cursor for printing
 200081c:	e13ffc0b 	ldhu	r4,-16(fp)
 2000820:	e17ffd0b 	ldhu	r5,-12(fp)
 2000824:	20006f80 	call	20006f8 <vCursor>

  for (i=0; i<swLength; i++)
 2000828:	e03ffb0d 	sth	zero,-20(fp)
 200082c:	00000a06 	br	2000858 <vPrintTxt+0x5c>
  {
    vPutChar(*pText++);
 2000830:	e0bfff17 	ldw	r2,-4(fp)
 2000834:	10800003 	ldbu	r2,0(r2)
 2000838:	11003fcc 	andi	r4,r2,255
 200083c:	e0bfff17 	ldw	r2,-4(fp)
 2000840:	10800044 	addi	r2,r2,1
 2000844:	e0bfff15 	stw	r2,-4(fp)
 2000848:	20006680 	call	2000668 <vPutChar>
{
  alt_u16 i;			// for loop index

  vCursor(uwRow, uwCol);		// Position the cursor for printing

  for (i=0; i<swLength; i++)
 200084c:	e0bffb0b 	ldhu	r2,-20(fp)
 2000850:	10800044 	addi	r2,r2,1
 2000854:	e0bffb0d 	sth	r2,-20(fp)
 2000858:	e0fffb0b 	ldhu	r3,-20(fp)
 200085c:	e0bffe0f 	ldh	r2,-8(fp)
 2000860:	18bff316 	blt	r3,r2,2000830 <vPrintTxt+0x34>
  {
    vPutChar(*pText++);
  }
}
 2000864:	e037883a 	mov	sp,fp
 2000868:	dfc00117 	ldw	ra,4(sp)
 200086c:	df000017 	ldw	fp,0(sp)
 2000870:	dec00204 	addi	sp,sp,8
 2000874:	f800283a 	ret

02000878 <vPrintNlz>:
 * @param 	[in] swSelect desired formatting
 * @param 	[in] slValue Value
 *
 */
void vPrintNlz(alt_u16 uwRow, alt_u16 uwCol, alt_16 swSel, alt_32 slVal)
{
 2000878:	defff504 	addi	sp,sp,-44
 200087c:	dfc00a15 	stw	ra,40(sp)
 2000880:	df000915 	stw	fp,36(sp)
 2000884:	df000904 	addi	fp,sp,36
 2000888:	e1fffe15 	stw	r7,-8(fp)
 200088c:	e13ffb0d 	sth	r4,-20(fp)
 2000890:	e17ffc0d 	sth	r5,-16(fp)
 2000894:	e1bffd0d 	sth	r6,-12(fp)
  alt_u16 nz;			// Flag to suppress leading zeros
  alt_32 slDig;		// Value to select digit to extract
  alt_32 slNum;		// Value of digit to print


  nz = 0;						// Init flag that suppresses leading zeros
 2000898:	e03ff90d 	sth	zero,-28(fp)

  switch(swSel)					// Select the desired formatting
 200089c:	e0bffd0f 	ldh	r2,-12(fp)
 20008a0:	e0bfff15 	stw	r2,-4(fp)
 20008a4:	e0ffff17 	ldw	r3,-4(fp)
 20008a8:	18800120 	cmpeqi	r2,r3,4
 20008ac:	1000041e 	bne	r2,zero,20008c0 <vPrintNlz+0x48>
 20008b0:	e0ffff17 	ldw	r3,-4(fp)
 20008b4:	18800160 	cmpeqi	r2,r3,5
 20008b8:	1000101e 	bne	r2,zero,20008fc <vPrintNlz+0x84>
 20008bc:	00001f06 	br	200093c <vPrintNlz+0xc4>
  {
    case 4:						// Format as XXXX
    {
      if (slVal > 9999)				// Test for value too big
 20008c0:	e0bffe17 	ldw	r2,-8(fp)
 20008c4:	1089c410 	cmplti	r2,r2,10000
 20008c8:	1000071e 	bne	r2,zero,20008e8 <vPrintNlz+0x70>
      {
        vPrintTxt(uwRow, uwCol, 4,"****");
 20008cc:	e13ffb0b 	ldhu	r4,-20(fp)
 20008d0:	e17ffc0b 	ldhu	r5,-16(fp)
 20008d4:	01800104 	movi	r6,4
 20008d8:	01c08074 	movhi	r7,513
 20008dc:	39e59404 	addi	r7,r7,-27056
 20008e0:	20007fc0 	call	20007fc <vPrintTxt>
        return;
 20008e4:	00004806 	br	2000a08 <vPrintNlz+0x190>
      }
	  left = 4;
 20008e8:	00800104 	movi	r2,4
 20008ec:	e0bff98d 	sth	r2,-26(fp)
      slDig = 1000;
 20008f0:	0080fa04 	movi	r2,1000
 20008f4:	e0bff815 	stw	r2,-32(fp)
    }
    break;
 20008f8:	00001606 	br	2000954 <vPrintNlz+0xdc>

    case 5:						// Format as XXXXX
    {
      if (slVal > 99999)		// Test for value too big
 20008fc:	e0fffe17 	ldw	r3,-8(fp)
 2000900:	008000b4 	movhi	r2,2
 2000904:	10a1a7c4 	addi	r2,r2,-31073
 2000908:	10c0070e 	bge	r2,r3,2000928 <vPrintNlz+0xb0>
      {
        vPrintTxt(uwRow, uwCol, 5,"*****");
 200090c:	e13ffb0b 	ldhu	r4,-20(fp)
 2000910:	e17ffc0b 	ldhu	r5,-16(fp)
 2000914:	01800144 	movi	r6,5
 2000918:	01c08074 	movhi	r7,513
 200091c:	39e59604 	addi	r7,r7,-27048
 2000920:	20007fc0 	call	20007fc <vPrintTxt>
        return;
 2000924:	00003806 	br	2000a08 <vPrintNlz+0x190>
      }
	  left = 5;
 2000928:	00800144 	movi	r2,5
 200092c:	e0bff98d 	sth	r2,-26(fp)
      slDig = 10000;
 2000930:	0089c404 	movi	r2,10000
 2000934:	e0bff815 	stw	r2,-32(fp)
    }
    break;
 2000938:	00000606 	br	2000954 <vPrintNlz+0xdc>

    default:					// Unsupported format
    {
      vCursor(uwRow, uwCol);	// Position the cursor for printing
 200093c:	e13ffb0b 	ldhu	r4,-20(fp)
 2000940:	e17ffc0b 	ldhu	r5,-16(fp)
 2000944:	20006f80 	call	20006f8 <vCursor>
      vPutChar('?');
 2000948:	01000fc4 	movi	r4,63
 200094c:	20006680 	call	2000668 <vPutChar>
      return;
 2000950:	00002d06 	br	2000a08 <vPrintNlz+0x190>
    }
  }

  // Common to all Nlz format
  vCursor(uwRow, uwCol);		// Position the cursor for printing
 2000954:	e13ffb0b 	ldhu	r4,-20(fp)
 2000958:	e17ffc0b 	ldhu	r5,-16(fp)
 200095c:	20006f80 	call	20006f8 <vCursor>

  for (i=0; i<left; i++)		// Start with most significant decimal digit
 2000960:	e03ffa0d 	sth	zero,-24(fp)
 2000964:	00002506 	br	20009fc <vPrintNlz+0x184>
  {
    slNum = slVal / slDig;
 2000968:	e13ffe17 	ldw	r4,-8(fp)
 200096c:	e17ff817 	ldw	r5,-32(fp)
 2000970:	20050a40 	call	20050a4 <__divsi3>
 2000974:	e0bff715 	stw	r2,-36(fp)
    slVal = slVal - slNum * slDig;
 2000978:	e0fff717 	ldw	r3,-36(fp)
 200097c:	e0bff817 	ldw	r2,-32(fp)
 2000980:	1887383a 	mul	r3,r3,r2
 2000984:	e0bffe17 	ldw	r2,-8(fp)
 2000988:	10c5c83a 	sub	r2,r2,r3
 200098c:	e0bffe15 	stw	r2,-8(fp)

    if (slNum > 0)
 2000990:	e0bff717 	ldw	r2,-36(fp)
 2000994:	10800050 	cmplti	r2,r2,1
 2000998:	1000021e 	bne	r2,zero,20009a4 <vPrintNlz+0x12c>
  	  nz = 1;					// nonzero found
 200099c:	00800044 	movi	r2,1
 20009a0:	e0bff90d 	sth	r2,-28(fp)

    if (nz || (i == (left-1) ))
 20009a4:	e0bff90b 	ldhu	r2,-28(fp)
 20009a8:	1004c03a 	cmpne	r2,r2,zero
 20009ac:	1000041e 	bne	r2,zero,20009c0 <vPrintNlz+0x148>
 20009b0:	e0bffa0b 	ldhu	r2,-24(fp)
 20009b4:	e0fff98b 	ldhu	r3,-26(fp)
 20009b8:	18ffffc4 	addi	r3,r3,-1
 20009bc:	10c0061e 	bne	r2,r3,20009d8 <vPrintNlz+0x160>
      vPrintNum(slNum); 		// print one digit
 20009c0:	e0bff717 	ldw	r2,-36(fp)
 20009c4:	113fffcc 	andi	r4,r2,65535
 20009c8:	2120001c 	xori	r4,r4,32768
 20009cc:	21200004 	addi	r4,r4,-32768
 20009d0:	20006c00 	call	20006c0 <vPrintNum>
    slVal = slVal - slNum * slDig;

    if (slNum > 0)
  	  nz = 1;					// nonzero found

    if (nz || (i == (left-1) ))
 20009d4:	00000206 	br	20009e0 <vPrintNlz+0x168>
      vPrintNum(slNum); 		// print one digit
    else
      vPutChar(' ');			// print leading space
 20009d8:	01000804 	movi	r4,32
 20009dc:	20006680 	call	2000668 <vPutChar>

    slDig = slDig / 10;			// select the next digit
 20009e0:	e13ff817 	ldw	r4,-32(fp)
 20009e4:	01400284 	movi	r5,10
 20009e8:	20050a40 	call	20050a4 <__divsi3>
 20009ec:	e0bff815 	stw	r2,-32(fp)
  }

  // Common to all Nlz format
  vCursor(uwRow, uwCol);		// Position the cursor for printing

  for (i=0; i<left; i++)		// Start with most significant decimal digit
 20009f0:	e0bffa0b 	ldhu	r2,-24(fp)
 20009f4:	10800044 	addi	r2,r2,1
 20009f8:	e0bffa0d 	sth	r2,-24(fp)
 20009fc:	e0fffa0b 	ldhu	r3,-24(fp)
 2000a00:	e0bff98b 	ldhu	r2,-26(fp)
 2000a04:	18bfd836 	bltu	r3,r2,2000968 <vPrintNlz+0xf0>
    else
      vPutChar(' ');			// print leading space

    slDig = slDig / 10;			// select the next digit
  }
}
 2000a08:	e037883a 	mov	sp,fp
 2000a0c:	dfc00117 	ldw	ra,4(sp)
 2000a10:	df000017 	ldw	fp,0(sp)
 2000a14:	dec00204 	addi	sp,sp,8
 2000a18:	f800283a 	ret

02000a1c <vPrintFix>:
 * @param 	[in] swSelect Decimal Point Position
 * @param 	[in] slValue Value
 * @note	For example: Decimal Point Position of 63 is XXXXXX.XXX
 */
void vPrintFix(alt_u16 uwRow, alt_u16 uwCol, alt_16 swSel, alt_32 slVal)
{
 2000a1c:	defff504 	addi	sp,sp,-44
 2000a20:	dfc00a15 	stw	ra,40(sp)
 2000a24:	df000915 	stw	fp,36(sp)
 2000a28:	df000904 	addi	fp,sp,36
 2000a2c:	e1fffe15 	stw	r7,-8(fp)
 2000a30:	e13ffb0d 	sth	r4,-20(fp)
 2000a34:	e17ffc0d 	sth	r5,-16(fp)
 2000a38:	e1bffd0d 	sth	r6,-12(fp)
	alt_u16 nz;			// Flag to suppress leading zeros
	alt_32 slDig;		// Value to select digit to extract
	alt_32 slNum;		// Value of digit to print


  nz = 0;						// Init flag that suppresses leading zeros
 2000a3c:	e03ff90d 	sth	zero,-28(fp)

  switch(swSel)					// Select the desired formatting
 2000a40:	e0bffd0f 	ldh	r2,-12(fp)
 2000a44:	e0bfff15 	stw	r2,-4(fp)
 2000a48:	e0ffff17 	ldw	r3,-4(fp)
 2000a4c:	188005a0 	cmpeqi	r2,r3,22
 2000a50:	10003d1e 	bne	r2,zero,2000b48 <vPrintFix+0x12c>
 2000a54:	e0ffff17 	ldw	r3,-4(fp)
 2000a58:	188005c8 	cmpgei	r2,r3,23
 2000a5c:	10000a1e 	bne	r2,zero,2000a88 <vPrintFix+0x6c>
 2000a60:	e0ffff17 	ldw	r3,-4(fp)
 2000a64:	18800360 	cmpeqi	r2,r3,13
 2000a68:	1000111e 	bne	r2,zero,2000ab0 <vPrintFix+0x94>
 2000a6c:	e0ffff17 	ldw	r3,-4(fp)
 2000a70:	18800560 	cmpeqi	r2,r3,21
 2000a74:	1000231e 	bne	r2,zero,2000b04 <vPrintFix+0xe8>
 2000a78:	e0ffff17 	ldw	r3,-4(fp)
 2000a7c:	18bff860 	cmpeqi	r2,r3,-31
 2000a80:	1000531e 	bne	r2,zero,2000bd0 <vPrintFix+0x1b4>
 2000a84:	0000ac06 	br	2000d38 <vPrintFix+0x31c>
 2000a88:	e0ffff17 	ldw	r3,-4(fp)
 2000a8c:	18800f60 	cmpeqi	r2,r3,61
 2000a90:	1000771e 	bne	r2,zero,2000c70 <vPrintFix+0x254>
 2000a94:	e0ffff17 	ldw	r3,-4(fp)
 2000a98:	18800fe0 	cmpeqi	r2,r3,63
 2000a9c:	10008d1e 	bne	r2,zero,2000cd4 <vPrintFix+0x2b8>
 2000aa0:	e0ffff17 	ldw	r3,-4(fp)
 2000aa4:	188007e0 	cmpeqi	r2,r3,31
 2000aa8:	1000381e 	bne	r2,zero,2000b8c <vPrintFix+0x170>
 2000aac:	0000a206 	br	2000d38 <vPrintFix+0x31c>
  {
  	  case 13:					// Format as X.XXX
  	  {
  		  if (slVal < 0)		// don't allow negative
 2000ab0:	e0bffe17 	ldw	r2,-8(fp)
 2000ab4:	1004403a 	cmpge	r2,r2,zero
 2000ab8:	1000011e 	bne	r2,zero,2000ac0 <vPrintFix+0xa4>
  		  {
  			  slVal = 0;
 2000abc:	e03ffe15 	stw	zero,-8(fp)
  		  }

  		  if (slVal > 9999)		// Test for value too big
 2000ac0:	e0bffe17 	ldw	r2,-8(fp)
 2000ac4:	1089c410 	cmplti	r2,r2,10000
 2000ac8:	1000071e 	bne	r2,zero,2000ae8 <vPrintFix+0xcc>
  		  {
  			  vPrintTxt(uwRow, uwCol, 5,"*.***");
 2000acc:	e13ffb0b 	ldhu	r4,-20(fp)
 2000ad0:	e17ffc0b 	ldhu	r5,-16(fp)
 2000ad4:	01800144 	movi	r6,5
 2000ad8:	01c08074 	movhi	r7,513
 2000adc:	39e59804 	addi	r7,r7,-27040
 2000ae0:	20007fc0 	call	20007fc <vPrintTxt>
  			  return;
 2000ae4:	0000ea06 	br	2000e90 <vPrintFix+0x474>
  		  }
  		  left = 1;
 2000ae8:	00800044 	movi	r2,1
 2000aec:	e0bffa0d 	sth	r2,-24(fp)
  		  right = 3;
 2000af0:	008000c4 	movi	r2,3
 2000af4:	e0bff98d 	sth	r2,-26(fp)
  		  slDig = 1000;
 2000af8:	0080fa04 	movi	r2,1000
 2000afc:	e0bff815 	stw	r2,-32(fp)
  	  }
  	  break;
 2000b00:	00009306 	br	2000d50 <vPrintFix+0x334>



    case 21:					// Format as XX.X
    {
      if (slVal > 999)			// Test for value too big
 2000b04:	e0bffe17 	ldw	r2,-8(fp)
 2000b08:	1080fa10 	cmplti	r2,r2,1000
 2000b0c:	1000071e 	bne	r2,zero,2000b2c <vPrintFix+0x110>
      {
        vPrintTxt(uwRow, uwCol, 4, "**.*");
 2000b10:	e13ffb0b 	ldhu	r4,-20(fp)
 2000b14:	e17ffc0b 	ldhu	r5,-16(fp)
 2000b18:	01800104 	movi	r6,4
 2000b1c:	01c08074 	movhi	r7,513
 2000b20:	39e59a04 	addi	r7,r7,-27032
 2000b24:	20007fc0 	call	20007fc <vPrintTxt>
        return;
 2000b28:	0000d906 	br	2000e90 <vPrintFix+0x474>
      }
	  left = 2;
 2000b2c:	00800084 	movi	r2,2
 2000b30:	e0bffa0d 	sth	r2,-24(fp)
	  right = 1;
 2000b34:	00800044 	movi	r2,1
 2000b38:	e0bff98d 	sth	r2,-26(fp)
      slDig = 100;
 2000b3c:	00801904 	movi	r2,100
 2000b40:	e0bff815 	stw	r2,-32(fp)
    }
    break;
 2000b44:	00008206 	br	2000d50 <vPrintFix+0x334>

    case 22:					// Format as XX.XX
    {
      if (slVal > 9999)		// Test for value too big
 2000b48:	e0bffe17 	ldw	r2,-8(fp)
 2000b4c:	1089c410 	cmplti	r2,r2,10000
 2000b50:	1000071e 	bne	r2,zero,2000b70 <vPrintFix+0x154>
      {
        vPrintTxt(uwRow, uwCol, 5, "**.**");
 2000b54:	e13ffb0b 	ldhu	r4,-20(fp)
 2000b58:	e17ffc0b 	ldhu	r5,-16(fp)
 2000b5c:	01800144 	movi	r6,5
 2000b60:	01c08074 	movhi	r7,513
 2000b64:	39e59c04 	addi	r7,r7,-27024
 2000b68:	20007fc0 	call	20007fc <vPrintTxt>
        return;
 2000b6c:	0000c806 	br	2000e90 <vPrintFix+0x474>
      }
	  left = 2;
 2000b70:	00800084 	movi	r2,2
 2000b74:	e0bffa0d 	sth	r2,-24(fp)
	  right = 2;
 2000b78:	00800084 	movi	r2,2
 2000b7c:	e0bff98d 	sth	r2,-26(fp)
      slDig = 1000;
 2000b80:	0080fa04 	movi	r2,1000
 2000b84:	e0bff815 	stw	r2,-32(fp)
    }
    break;
 2000b88:	00007106 	br	2000d50 <vPrintFix+0x334>

    case 31:					// Format as XXX.X
    {
      if (slVal > 9999)			// Test for value too big
 2000b8c:	e0bffe17 	ldw	r2,-8(fp)
 2000b90:	1089c410 	cmplti	r2,r2,10000
 2000b94:	1000071e 	bne	r2,zero,2000bb4 <vPrintFix+0x198>
      {
        vPrintTxt(uwRow, uwCol, 5,"***.*");
 2000b98:	e13ffb0b 	ldhu	r4,-20(fp)
 2000b9c:	e17ffc0b 	ldhu	r5,-16(fp)
 2000ba0:	01800144 	movi	r6,5
 2000ba4:	01c08074 	movhi	r7,513
 2000ba8:	39e59e04 	addi	r7,r7,-27016
 2000bac:	20007fc0 	call	20007fc <vPrintTxt>
        return;
 2000bb0:	0000b706 	br	2000e90 <vPrintFix+0x474>
      }
	  left = 3;
 2000bb4:	008000c4 	movi	r2,3
 2000bb8:	e0bffa0d 	sth	r2,-24(fp)
	  right = 1;
 2000bbc:	00800044 	movi	r2,1
 2000bc0:	e0bff98d 	sth	r2,-26(fp)
      slDig = 1000;
 2000bc4:	0080fa04 	movi	r2,1000
 2000bc8:	e0bff815 	stw	r2,-32(fp)
    }
    break;
 2000bcc:	00006006 	br	2000d50 <vPrintFix+0x334>

    case -31:					// Format as +XXX.X
    {
      vCursor(uwRow, uwCol-1);
 2000bd0:	e13ffb0b 	ldhu	r4,-20(fp)
 2000bd4:	e0bffc0b 	ldhu	r2,-16(fp)
 2000bd8:	10bfffc4 	addi	r2,r2,-1
 2000bdc:	117fffcc 	andi	r5,r2,65535
 2000be0:	20006f80 	call	20006f8 <vCursor>

      if (slVal > 9999)			// Test for value too big
 2000be4:	e0bffe17 	ldw	r2,-8(fp)
 2000be8:	1089c410 	cmplti	r2,r2,10000
 2000bec:	1000071e 	bne	r2,zero,2000c0c <vPrintFix+0x1f0>
      {
        vPrintTxt(uwRow, uwCol, 6,"+***.*");
 2000bf0:	e13ffb0b 	ldhu	r4,-20(fp)
 2000bf4:	e17ffc0b 	ldhu	r5,-16(fp)
 2000bf8:	01800184 	movi	r6,6
 2000bfc:	01c08074 	movhi	r7,513
 2000c00:	39e5a004 	addi	r7,r7,-27008
 2000c04:	20007fc0 	call	20007fc <vPrintTxt>
        return;
 2000c08:	0000a106 	br	2000e90 <vPrintFix+0x474>
      }
      if (slVal <= 2047)
 2000c0c:	e0bffe17 	ldw	r2,-8(fp)
 2000c10:	10820008 	cmpgei	r2,r2,2048
 2000c14:	1000031e 	bne	r2,zero,2000c24 <vPrintFix+0x208>
      {
    	vPutChar('+');
 2000c18:	01000ac4 	movi	r4,43
 2000c1c:	20006680 	call	2000668 <vPutChar>
 2000c20:	00000c06 	br	2000c54 <vPrintFix+0x238>
      }
      else if (slVal <= 4095)
 2000c24:	e0bffe17 	ldw	r2,-8(fp)
 2000c28:	10840008 	cmpgei	r2,r2,4096
 2000c2c:	1000071e 	bne	r2,zero,2000c4c <vPrintFix+0x230>
      {
    	vPutChar('-');
 2000c30:	01000b44 	movi	r4,45
 2000c34:	20006680 	call	2000668 <vPutChar>
    	slVal = -(slVal - 4096);
 2000c38:	00840004 	movi	r2,4096
 2000c3c:	e0fffe17 	ldw	r3,-8(fp)
 2000c40:	10c5c83a 	sub	r2,r2,r3
 2000c44:	e0bffe15 	stw	r2,-8(fp)
 2000c48:	00000206 	br	2000c54 <vPrintFix+0x238>
      }
      else
      {
      	vPutChar(' ');
 2000c4c:	01000804 	movi	r4,32
 2000c50:	20006680 	call	2000668 <vPutChar>
      }
	  left = 3;
 2000c54:	008000c4 	movi	r2,3
 2000c58:	e0bffa0d 	sth	r2,-24(fp)
	  right = 1;
 2000c5c:	00800044 	movi	r2,1
 2000c60:	e0bff98d 	sth	r2,-26(fp)
      slDig = 1000;
 2000c64:	0080fa04 	movi	r2,1000
 2000c68:	e0bff815 	stw	r2,-32(fp)
    }
    break;
 2000c6c:	00003806 	br	2000d50 <vPrintFix+0x334>


    case 61:					// Format as XXXXX.X
    {
      if (slVal < 0)
 2000c70:	e0bffe17 	ldw	r2,-8(fp)
 2000c74:	1004403a 	cmpge	r2,r2,zero
 2000c78:	1000031e 	bne	r2,zero,2000c88 <vPrintFix+0x26c>
      {
    	  slVal = -slVal;
 2000c7c:	e0bffe17 	ldw	r2,-8(fp)
 2000c80:	0085c83a 	sub	r2,zero,r2
 2000c84:	e0bffe15 	stw	r2,-8(fp)
      }
      if (slVal > 9999999)			// Test for value too big
 2000c88:	e0fffe17 	ldw	r3,-8(fp)
 2000c8c:	00802674 	movhi	r2,153
 2000c90:	10a59fc4 	addi	r2,r2,-27009
 2000c94:	10c0070e 	bge	r2,r3,2000cb4 <vPrintFix+0x298>
      {
        vPrintTxt(uwRow, uwCol, 8,"******.*");
 2000c98:	e13ffb0b 	ldhu	r4,-20(fp)
 2000c9c:	e17ffc0b 	ldhu	r5,-16(fp)
 2000ca0:	01800204 	movi	r6,8
 2000ca4:	01c08074 	movhi	r7,513
 2000ca8:	39e5a204 	addi	r7,r7,-27000
 2000cac:	20007fc0 	call	20007fc <vPrintTxt>
        return;
 2000cb0:	00007706 	br	2000e90 <vPrintFix+0x474>
      }
	  left = 6;
 2000cb4:	00800184 	movi	r2,6
 2000cb8:	e0bffa0d 	sth	r2,-24(fp)
	  right = 1;
 2000cbc:	00800044 	movi	r2,1
 2000cc0:	e0bff98d 	sth	r2,-26(fp)
      slDig = 1000000;
 2000cc4:	008003f4 	movhi	r2,15
 2000cc8:	10909004 	addi	r2,r2,16960
 2000ccc:	e0bff815 	stw	r2,-32(fp)
    }
    break;
 2000cd0:	00001f06 	br	2000d50 <vPrintFix+0x334>

    case 63:					// Format as XXXXXX.XXX
    {
      if (slVal < 0)
 2000cd4:	e0bffe17 	ldw	r2,-8(fp)
 2000cd8:	1004403a 	cmpge	r2,r2,zero
 2000cdc:	1000031e 	bne	r2,zero,2000cec <vPrintFix+0x2d0>
      {
      	slVal = -slVal;
 2000ce0:	e0bffe17 	ldw	r2,-8(fp)
 2000ce4:	0085c83a 	sub	r2,zero,r2
 2000ce8:	e0bffe15 	stw	r2,-8(fp)
      }

      if (slVal > 999999999)	// Test for value too big
 2000cec:	e0fffe17 	ldw	r3,-8(fp)
 2000cf0:	008ee6f4 	movhi	r2,15259
 2000cf4:	10b27fc4 	addi	r2,r2,-13825
 2000cf8:	10c0070e 	bge	r2,r3,2000d18 <vPrintFix+0x2fc>
      {
        vPrintTxt(uwRow, uwCol, 10, "******.***");
 2000cfc:	e13ffb0b 	ldhu	r4,-20(fp)
 2000d00:	e17ffc0b 	ldhu	r5,-16(fp)
 2000d04:	01800284 	movi	r6,10
 2000d08:	01c08074 	movhi	r7,513
 2000d0c:	39e5a504 	addi	r7,r7,-26988
 2000d10:	20007fc0 	call	20007fc <vPrintTxt>
        return;
 2000d14:	00005e06 	br	2000e90 <vPrintFix+0x474>
      }
	  left = 6;
 2000d18:	00800184 	movi	r2,6
 2000d1c:	e0bffa0d 	sth	r2,-24(fp)
	  right = 3;
 2000d20:	008000c4 	movi	r2,3
 2000d24:	e0bff98d 	sth	r2,-26(fp)
      slDig = 100000000;
 2000d28:	00817db4 	movhi	r2,1526
 2000d2c:	10b84004 	addi	r2,r2,-7936
 2000d30:	e0bff815 	stw	r2,-32(fp)
    }
    break;
 2000d34:	00000606 	br	2000d50 <vPrintFix+0x334>

    default:
	{							// Unsupported format
      vCursor(uwRow, uwCol);	// Position the cursor for printing
 2000d38:	e13ffb0b 	ldhu	r4,-20(fp)
 2000d3c:	e17ffc0b 	ldhu	r5,-16(fp)
 2000d40:	20006f80 	call	20006f8 <vCursor>
      vPutChar('?');
 2000d44:	01000fc4 	movi	r4,63
 2000d48:	20006680 	call	2000668 <vPutChar>
      return;
 2000d4c:	00005006 	br	2000e90 <vPrintFix+0x474>
    }
  }

  vCursor(uwRow, uwCol);		// Position the cursor for printing
 2000d50:	e13ffb0b 	ldhu	r4,-20(fp)
 2000d54:	e17ffc0b 	ldhu	r5,-16(fp)
 2000d58:	20006f80 	call	20006f8 <vCursor>

  for (i=0; i<left; i++)		// Start with most significant decimal digit
 2000d5c:	e03ffa8d 	sth	zero,-22(fp)
 2000d60:	00002506 	br	2000df8 <vPrintFix+0x3dc>
  {
    slNum = slVal / slDig;
 2000d64:	e13ffe17 	ldw	r4,-8(fp)
 2000d68:	e17ff817 	ldw	r5,-32(fp)
 2000d6c:	20050a40 	call	20050a4 <__divsi3>
 2000d70:	e0bff715 	stw	r2,-36(fp)
    slVal = slVal - slNum * slDig;
 2000d74:	e0fff717 	ldw	r3,-36(fp)
 2000d78:	e0bff817 	ldw	r2,-32(fp)
 2000d7c:	1887383a 	mul	r3,r3,r2
 2000d80:	e0bffe17 	ldw	r2,-8(fp)
 2000d84:	10c5c83a 	sub	r2,r2,r3
 2000d88:	e0bffe15 	stw	r2,-8(fp)

	if (slNum > 0)
 2000d8c:	e0bff717 	ldw	r2,-36(fp)
 2000d90:	10800050 	cmplti	r2,r2,1
 2000d94:	1000021e 	bne	r2,zero,2000da0 <vPrintFix+0x384>
	  nz = 1;					// nonzero found
 2000d98:	00800044 	movi	r2,1
 2000d9c:	e0bff90d 	sth	r2,-28(fp)

	if (nz || (i == (left-1) ))
 2000da0:	e0bff90b 	ldhu	r2,-28(fp)
 2000da4:	1004c03a 	cmpne	r2,r2,zero
 2000da8:	1000041e 	bne	r2,zero,2000dbc <vPrintFix+0x3a0>
 2000dac:	e0bffa8b 	ldhu	r2,-22(fp)
 2000db0:	e0fffa0b 	ldhu	r3,-24(fp)
 2000db4:	18ffffc4 	addi	r3,r3,-1
 2000db8:	10c0061e 	bne	r2,r3,2000dd4 <vPrintFix+0x3b8>
      vPrintNum(slNum); 		// print one digit
 2000dbc:	e0bff717 	ldw	r2,-36(fp)
 2000dc0:	113fffcc 	andi	r4,r2,65535
 2000dc4:	2120001c 	xori	r4,r4,32768
 2000dc8:	21200004 	addi	r4,r4,-32768
 2000dcc:	20006c00 	call	20006c0 <vPrintNum>
    slVal = slVal - slNum * slDig;

	if (slNum > 0)
	  nz = 1;					// nonzero found

	if (nz || (i == (left-1) ))
 2000dd0:	00000206 	br	2000ddc <vPrintFix+0x3c0>
      vPrintNum(slNum); 		// print one digit
    else
      vPutChar(' ');			// print leading space
 2000dd4:	01000804 	movi	r4,32
 2000dd8:	20006680 	call	2000668 <vPutChar>

    slDig = slDig / 10;			// select the next digit
 2000ddc:	e13ff817 	ldw	r4,-32(fp)
 2000de0:	01400284 	movi	r5,10
 2000de4:	20050a40 	call	20050a4 <__divsi3>
 2000de8:	e0bff815 	stw	r2,-32(fp)
    }
  }

  vCursor(uwRow, uwCol);		// Position the cursor for printing

  for (i=0; i<left; i++)		// Start with most significant decimal digit
 2000dec:	e0bffa8b 	ldhu	r2,-22(fp)
 2000df0:	10800044 	addi	r2,r2,1
 2000df4:	e0bffa8d 	sth	r2,-22(fp)
 2000df8:	e0fffa8b 	ldhu	r3,-22(fp)
 2000dfc:	e0bffa0b 	ldhu	r2,-24(fp)
 2000e00:	18bfd836 	bltu	r3,r2,2000d64 <vPrintFix+0x348>
      vPutChar(' ');			// print leading space

    slDig = slDig / 10;			// select the next digit
  }

  vPutChar('.');	    		// print the decimal point
 2000e04:	01000b84 	movi	r4,46
 2000e08:	20006680 	call	2000668 <vPutChar>

  for (i=0; i<(right-1); i++)
 2000e0c:	e03ffa8d 	sth	zero,-22(fp)
 2000e10:	00001606 	br	2000e6c <vPrintFix+0x450>
  {
    slNum = slVal / slDig;
 2000e14:	e13ffe17 	ldw	r4,-8(fp)
 2000e18:	e17ff817 	ldw	r5,-32(fp)
 2000e1c:	20050a40 	call	20050a4 <__divsi3>
 2000e20:	e0bff715 	stw	r2,-36(fp)
    slVal = slVal - slNum * slDig;
 2000e24:	e0fff717 	ldw	r3,-36(fp)
 2000e28:	e0bff817 	ldw	r2,-32(fp)
 2000e2c:	1887383a 	mul	r3,r3,r2
 2000e30:	e0bffe17 	ldw	r2,-8(fp)
 2000e34:	10c5c83a 	sub	r2,r2,r3
 2000e38:	e0bffe15 	stw	r2,-8(fp)

    vPrintNum(slNum);			// print one digit
 2000e3c:	e0bff717 	ldw	r2,-36(fp)
 2000e40:	113fffcc 	andi	r4,r2,65535
 2000e44:	2120001c 	xori	r4,r4,32768
 2000e48:	21200004 	addi	r4,r4,-32768
 2000e4c:	20006c00 	call	20006c0 <vPrintNum>
    slDig = slDig / 10;			// select the next digit
 2000e50:	e13ff817 	ldw	r4,-32(fp)
 2000e54:	01400284 	movi	r5,10
 2000e58:	20050a40 	call	20050a4 <__divsi3>
 2000e5c:	e0bff815 	stw	r2,-32(fp)
    slDig = slDig / 10;			// select the next digit
  }

  vPutChar('.');	    		// print the decimal point

  for (i=0; i<(right-1); i++)
 2000e60:	e0bffa8b 	ldhu	r2,-22(fp)
 2000e64:	10800044 	addi	r2,r2,1
 2000e68:	e0bffa8d 	sth	r2,-22(fp)
 2000e6c:	e0bffa8b 	ldhu	r2,-22(fp)
 2000e70:	e0fff98b 	ldhu	r3,-26(fp)
 2000e74:	18ffffc4 	addi	r3,r3,-1
 2000e78:	10ffe616 	blt	r2,r3,2000e14 <vPrintFix+0x3f8>
    vPrintNum(slNum);			// print one digit
    slDig = slDig / 10;			// select the next digit

  }

  vPrintNum(slVal); 			// print one digit
 2000e7c:	e0bffe17 	ldw	r2,-8(fp)
 2000e80:	113fffcc 	andi	r4,r2,65535
 2000e84:	2120001c 	xori	r4,r4,32768
 2000e88:	21200004 	addi	r4,r4,-32768
 2000e8c:	20006c00 	call	20006c0 <vPrintNum>
}
 2000e90:	e037883a 	mov	sp,fp
 2000e94:	dfc00117 	ldw	ra,4(sp)
 2000e98:	df000017 	ldw	fp,0(sp)
 2000e9c:	dec00204 	addi	sp,sp,8
 2000ea0:	f800283a 	ret

02000ea4 <vPrintStaticScreen1>:
extern struct RCVR_STRUCT sRCVR;	// DX6 Spektrum receiver PWM width
extern struct ADC_STRUCT 		sADC;
extern struct DATA_STRUCT	sDATA;	// General data

void vPrintStaticScreen1(void)
{
 2000ea4:	defffe04 	addi	sp,sp,-8
 2000ea8:	dfc00115 	stw	ra,4(sp)
 2000eac:	df000015 	stw	fp,0(sp)
 2000eb0:	d839883a 	mov	fp,sp
	vPutChar(27);     // Start with a clear screen
 2000eb4:	010006c4 	movi	r4,27
 2000eb8:	20006680 	call	2000668 <vPutChar>
	vPutChar('[');
 2000ebc:	010016c4 	movi	r4,91
 2000ec0:	20006680 	call	2000668 <vPutChar>
	vPutChar('2');
 2000ec4:	01000c84 	movi	r4,50
 2000ec8:	20006680 	call	2000668 <vPutChar>
	vPutChar('J');
 2000ecc:	01001284 	movi	r4,74
 2000ed0:	20006680 	call	2000668 <vPutChar>
	vPutChar(0);
 2000ed4:	0009883a 	mov	r4,zero
 2000ed8:	20006680 	call	2000668 <vPutChar>


	vPutChar(27);     // set display attributes
 2000edc:	010006c4 	movi	r4,27
 2000ee0:	20006680 	call	2000668 <vPutChar>
	vPutChar('[');
 2000ee4:	010016c4 	movi	r4,91
 2000ee8:	20006680 	call	2000668 <vPutChar>
	vPutChar('1');	// Bright
 2000eec:	01000c44 	movi	r4,49
 2000ef0:	20006680 	call	2000668 <vPutChar>
	vPutChar(';');
 2000ef4:	01000ec4 	movi	r4,59
 2000ef8:	20006680 	call	2000668 <vPutChar>
	vPutChar('3');	// red foreground
 2000efc:	01000cc4 	movi	r4,51
 2000f00:	20006680 	call	2000668 <vPutChar>
	vPutChar('1');
 2000f04:	01000c44 	movi	r4,49
 2000f08:	20006680 	call	2000668 <vPutChar>
	vPutChar('m');
 2000f0c:	01001b44 	movi	r4,109
 2000f10:	20006680 	call	2000668 <vPutChar>
	vPutChar(0);
 2000f14:	0009883a 	mov	r4,zero
 2000f18:	20006680 	call	2000668 <vPutChar>
	vPutChar(0);
 2000f1c:	0009883a 	mov	r4,zero
 2000f20:	20006680 	call	2000668 <vPutChar>

                       //          1         2         3         4         5         6         7         8
                       // 12345678901234567890123456789012345678901234567890123456789012345678901234567890
	vPrintTxt( 1, 1, 80, "Engineers Week 2014 DE0-NANO Rover Firmware V0.6  Press [t] to enter test mode  "); // 1
 2000f24:	01000044 	movi	r4,1
 2000f28:	01400044 	movi	r5,1
 2000f2c:	01801404 	movi	r6,80
 2000f30:	01c08074 	movhi	r7,513
 2000f34:	39e5a804 	addi	r7,r7,-26976
 2000f38:	20007fc0 	call	20007fc <vPrintTxt>
    //THIS LINE IS RESERVED FOR CURSOR                                                                                                      // 2
	vPrintTxt( 3, 1, 79, "Firmware_PWM_Outputs___| Calibration: Adjust Min/Max PWM, and Neutral Position,");
 2000f3c:	010000c4 	movi	r4,3
 2000f40:	01400044 	movi	r5,1
 2000f44:	018013c4 	movi	r6,79
 2000f48:	01c08074 	movhi	r7,513
 2000f4c:	39e5bd04 	addi	r7,r7,-26892
 2000f50:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt( 4, 1, 79, "Throttle = ##### ms    |              enter letter followed by values ex: A1234");
 2000f54:	01000104 	movi	r4,4
 2000f58:	01400044 	movi	r5,1
 2000f5c:	018013c4 	movi	r6,79
 2000f60:	01c08074 	movhi	r7,513
 2000f64:	39e5d104 	addi	r7,r7,-26812
 2000f68:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt( 5, 1, 79, "Steering = ##### ms    |              |Min__||Max__||Nuet_||Value|             ");
 2000f6c:	01000144 	movi	r4,5
 2000f70:	01400044 	movi	r5,1
 2000f74:	018013c4 	movi	r6,79
 2000f78:	01c08074 	movhi	r7,513
 2000f7c:	39e5e504 	addi	r7,r7,-26732
 2000f80:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt( 6, 1, 79, "                       |   Throttle = |A####||B####||C####|  ####              ");//6      Min/Max PWM, Offset from neutral, va
 2000f84:	01000184 	movi	r4,6
 2000f88:	01400044 	movi	r5,1
 2000f8c:	018013c4 	movi	r6,79
 2000f90:	01c08074 	movhi	r7,513
 2000f94:	39e5f904 	addi	r7,r7,-26652
 2000f98:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt( 7, 1, 79, "Receiver_Ch(n)_PWM_In__|   Steering = |a####||b####||c####|  ####              ");
 2000f9c:	010001c4 	movi	r4,7
 2000fa0:	01400044 	movi	r5,1
 2000fa4:	018013c4 	movi	r6,79
 2000fa8:	01c08074 	movhi	r7,513
 2000fac:	39e60d04 	addi	r7,r7,-26572
 2000fb0:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt( 8, 1, 79, "Throttle(3) = ##### ms |-------------------------------------------------------");
 2000fb4:	01000204 	movi	r4,8
 2000fb8:	01400044 	movi	r5,1
 2000fbc:	018013c4 	movi	r6,79
 2000fc0:	01c08074 	movhi	r7,513
 2000fc4:	39e62104 	addi	r7,r7,-26492
 2000fc8:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt( 9, 1, 79, "Steering(4) = ##### ms | Distance Limit = ####                                 ");
 2000fcc:	01000244 	movi	r4,9
 2000fd0:	01400044 	movi	r5,1
 2000fd4:	018013c4 	movi	r6,79
 2000fd8:	01c08074 	movhi	r7,513
 2000fdc:	39e63504 	addi	r7,r7,-26412
 2000fe0:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt(10, 1, 79, "Channel(5)  = ##### ms | Distance Delta = #####                                ");
 2000fe4:	01000284 	movi	r4,10
 2000fe8:	01400044 	movi	r5,1
 2000fec:	018013c4 	movi	r6,79
 2000ff0:	01c08074 	movhi	r7,513
 2000ff4:	39e64904 	addi	r7,r7,-26332
 2000ff8:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt(11, 1, 79, "Channel(6)  = ##### ms | Distance Overal= #####                                ");
 2000ffc:	010002c4 	movi	r4,11
 2001000:	01400044 	movi	r5,1
 2001004:	018013c4 	movi	r6,79
 2001008:	01c08074 	movhi	r7,513
 200100c:	39e65d04 	addi	r7,r7,-26252
 2001010:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt(12, 1, 24, "                       |");
 2001014:	01000304 	movi	r4,12
 2001018:	01400044 	movi	r5,1
 200101c:	01800604 	movi	r6,24
 2001020:	01c08074 	movhi	r7,513
 2001024:	39e67104 	addi	r7,r7,-26172
 2001028:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt(13, 1, 24, "Receiver_Toggle_Switch_|");
 200102c:	01000344 	movi	r4,13
 2001030:	01400044 	movi	r5,1
 2001034:	01800604 	movi	r6,24
 2001038:	01c08074 	movhi	r7,513
 200103c:	39e67804 	addi	r7,r7,-26144
 2001040:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt(14, 1, 24, "Channel 6 D_Rst  = #   |");
 2001044:	01000384 	movi	r4,14
 2001048:	01400044 	movi	r5,1
 200104c:	01800604 	movi	r6,24
 2001050:	01c08074 	movhi	r7,513
 2001054:	39e67f04 	addi	r7,r7,-26116
 2001058:	20007fc0 	call	20007fc <vPrintTxt>
	vPrintTxt(15, 1, 24, "Auto(1)/Manual(0)= #   |");
 200105c:	010003c4 	movi	r4,15
 2001060:	01400044 	movi	r5,1
 2001064:	01800604 	movi	r6,24
 2001068:	01c08074 	movhi	r7,513
 200106c:	39e68604 	addi	r7,r7,-26088
 2001070:	20007fc0 	call	20007fc <vPrintTxt>
	vPrintTxt(16, 1, 24, "                       |");
 2001074:	01000404 	movi	r4,16
 2001078:	01400044 	movi	r5,1
 200107c:	01800604 	movi	r6,24
 2001080:	01c08074 	movhi	r7,513
 2001084:	39e67104 	addi	r7,r7,-26172
 2001088:	20007fc0 	call	20007fc <vPrintTxt>
	vPrintTxt(17, 1, 24, "Line_Sensor_ADC_Counts_|");
 200108c:	01000444 	movi	r4,17
 2001090:	01400044 	movi	r5,1
 2001094:	01800604 	movi	r6,24
 2001098:	01c08074 	movhi	r7,513
 200109c:	39e68d04 	addi	r7,r7,-26060
 20010a0:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt(18, 1, 24, "Sensor 1 = ####        |");
 20010a4:	01000484 	movi	r4,18
 20010a8:	01400044 	movi	r5,1
 20010ac:	01800604 	movi	r6,24
 20010b0:	01c08074 	movhi	r7,513
 20010b4:	39e69404 	addi	r7,r7,-26032
 20010b8:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt(19, 1, 24, "Sensor 2 = ####        |");
 20010bc:	010004c4 	movi	r4,19
 20010c0:	01400044 	movi	r5,1
 20010c4:	01800604 	movi	r6,24
 20010c8:	01c08074 	movhi	r7,513
 20010cc:	39e69b04 	addi	r7,r7,-26004
 20010d0:	20007fc0 	call	20007fc <vPrintTxt>
	vPrintTxt(20, 1, 24, "Sensor 3 = ####        |");
 20010d4:	01000504 	movi	r4,20
 20010d8:	01400044 	movi	r5,1
 20010dc:	01800604 	movi	r6,24
 20010e0:	01c08074 	movhi	r7,513
 20010e4:	39e6a204 	addi	r7,r7,-25976
 20010e8:	20007fc0 	call	20007fc <vPrintTxt>
	vPrintTxt(21, 1, 24, "Sensor 4 = ####        |");
 20010ec:	01000544 	movi	r4,21
 20010f0:	01400044 	movi	r5,1
 20010f4:	01800604 	movi	r6,24
 20010f8:	01c08074 	movhi	r7,513
 20010fc:	39e6a904 	addi	r7,r7,-25948
 2001100:	20007fc0 	call	20007fc <vPrintTxt>
	vPrintTxt(22, 1, 24, "Sensor 5 = ####        |");
 2001104:	01000584 	movi	r4,22
 2001108:	01400044 	movi	r5,1
 200110c:	01800604 	movi	r6,24
 2001110:	01c08074 	movhi	r7,513
 2001114:	39e6b004 	addi	r7,r7,-25920
 2001118:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt(23, 1, 24, "Sensor 6 = ####        |");
 200111c:	010005c4 	movi	r4,23
 2001120:	01400044 	movi	r5,1
 2001124:	01800604 	movi	r6,24
 2001128:	01c08074 	movhi	r7,513
 200112c:	39e6b704 	addi	r7,r7,-25892
 2001130:	20007fc0 	call	20007fc <vPrintTxt>
    vPrintTxt(24, 1, 24, "Sensor 7 = ####        |");//8
 2001134:	01000604 	movi	r4,24
 2001138:	01400044 	movi	r5,1
 200113c:	01800604 	movi	r6,24
 2001140:	01c08074 	movhi	r7,513
 2001144:	39e6be04 	addi	r7,r7,-25864
 2001148:	20007fc0 	call	20007fc <vPrintTxt>





}
 200114c:	e037883a 	mov	sp,fp
 2001150:	dfc00117 	ldw	ra,4(sp)
 2001154:	df000017 	ldw	fp,0(sp)
 2001158:	dec00204 	addi	sp,sp,8
 200115c:	f800283a 	ret

02001160 <vPrintDynamicScreen1>:
void vPrintDynamicScreen1(void)
{
 2001160:	defffc04 	addi	sp,sp,-16
 2001164:	dfc00315 	stw	ra,12(sp)
 2001168:	df000215 	stw	fp,8(sp)
 200116c:	dc400115 	stw	r17,4(sp)
 2001170:	dc000015 	stw	r16,0(sp)
 2001174:	d839883a 	mov	fp,sp
	/*!
	 * Print values left section of screen
	 */
	//convert counts back to ms duty_counts*period/full counts
	//where for 15bit resoltuion full counts =32767
	vPrintFix( 4, 12,13, (alt_u32)(sDATA.ulThrottlePWM_C*20000/32767));//FW throttle PWM out
 2001178:	00808074 	movhi	r2,513
 200117c:	10ad8004 	addi	r2,r2,-18944
 2001180:	10800817 	ldw	r2,32(r2)
 2001184:	11138824 	muli	r4,r2,20000
 2001188:	015fffc4 	movi	r5,32767
 200118c:	20051640 	call	2005164 <__udivsi3>
 2001190:	100f883a 	mov	r7,r2
 2001194:	01000104 	movi	r4,4
 2001198:	01400304 	movi	r5,12
 200119c:	01800344 	movi	r6,13
 20011a0:	2000a1c0 	call	2000a1c <vPrintFix>
	vPrintFix( 5, 12,13, (alt_u32)(sDATA.ulServoPWM_C *20000/32767)); //FW servo PWM out
 20011a4:	00808074 	movhi	r2,513
 20011a8:	10ad8004 	addi	r2,r2,-18944
 20011ac:	10800017 	ldw	r2,0(r2)
 20011b0:	11138824 	muli	r4,r2,20000
 20011b4:	015fffc4 	movi	r5,32767
 20011b8:	20051640 	call	2005164 <__udivsi3>
 20011bc:	100f883a 	mov	r7,r2
 20011c0:	01000144 	movi	r4,5
 20011c4:	01400304 	movi	r5,12
 20011c8:	01800344 	movi	r6,13
 20011cc:	2000a1c0 	call	2000a1c <vPrintFix>


	//print receiver values
	vPrintFix( 8,15,13,(alt_32)(sRCVR.ulChannel3*20*pow(10,-3)));// channel 3 throttle PWM
 20011d0:	00808074 	movhi	r2,513
 20011d4:	10ad9d04 	addi	r2,r2,-18828
 20011d8:	10800217 	ldw	r2,8(r2)
 20011dc:	11000524 	muli	r4,r2,20
 20011e0:	2004e940 	call	2004e94 <__floatunsidf>
 20011e4:	1021883a 	mov	r16,r2
 20011e8:	1823883a 	mov	r17,r3
 20011ec:	0009883a 	mov	r4,zero
 20011f0:	01500934 	movhi	r5,16420
 20011f4:	000d883a 	mov	r6,zero
 20011f8:	01f00234 	movhi	r7,49160
 20011fc:	200201c0 	call	200201c <pow>
 2001200:	1009883a 	mov	r4,r2
 2001204:	180b883a 	mov	r5,r3
 2001208:	2005883a 	mov	r2,r4
 200120c:	2807883a 	mov	r3,r5
 2001210:	8009883a 	mov	r4,r16
 2001214:	880b883a 	mov	r5,r17
 2001218:	100d883a 	mov	r6,r2
 200121c:	180f883a 	mov	r7,r3
 2001220:	20044000 	call	2004400 <__muldf3>
 2001224:	1009883a 	mov	r4,r2
 2001228:	180b883a 	mov	r5,r3
 200122c:	2005883a 	mov	r2,r4
 2001230:	2807883a 	mov	r3,r5
 2001234:	1009883a 	mov	r4,r2
 2001238:	180b883a 	mov	r5,r3
 200123c:	2004dbc0 	call	2004dbc <__fixdfsi>
 2001240:	100f883a 	mov	r7,r2
 2001244:	01000204 	movi	r4,8
 2001248:	014003c4 	movi	r5,15
 200124c:	01800344 	movi	r6,13
 2001250:	2000a1c0 	call	2000a1c <vPrintFix>
	vPrintFix( 9,15,13,(alt_32)(sRCVR.ulChannel4*20*pow(10,-3)));// channel 4 steering PWM
 2001254:	00808074 	movhi	r2,513
 2001258:	10ad9d04 	addi	r2,r2,-18828
 200125c:	10800317 	ldw	r2,12(r2)
 2001260:	11000524 	muli	r4,r2,20
 2001264:	2004e940 	call	2004e94 <__floatunsidf>
 2001268:	1021883a 	mov	r16,r2
 200126c:	1823883a 	mov	r17,r3
 2001270:	0009883a 	mov	r4,zero
 2001274:	01500934 	movhi	r5,16420
 2001278:	000d883a 	mov	r6,zero
 200127c:	01f00234 	movhi	r7,49160
 2001280:	200201c0 	call	200201c <pow>
 2001284:	100f883a 	mov	r7,r2
 2001288:	1811883a 	mov	r8,r3
 200128c:	8009883a 	mov	r4,r16
 2001290:	880b883a 	mov	r5,r17
 2001294:	380d883a 	mov	r6,r7
 2001298:	400f883a 	mov	r7,r8
 200129c:	20044000 	call	2004400 <__muldf3>
 20012a0:	1009883a 	mov	r4,r2
 20012a4:	180b883a 	mov	r5,r3
 20012a8:	2005883a 	mov	r2,r4
 20012ac:	2807883a 	mov	r3,r5
 20012b0:	1009883a 	mov	r4,r2
 20012b4:	180b883a 	mov	r5,r3
 20012b8:	2004dbc0 	call	2004dbc <__fixdfsi>
 20012bc:	100f883a 	mov	r7,r2
 20012c0:	01000244 	movi	r4,9
 20012c4:	014003c4 	movi	r5,15
 20012c8:	01800344 	movi	r6,13
 20012cc:	2000a1c0 	call	2000a1c <vPrintFix>
	vPrintFix( 10,15,13,(alt_32)(sRCVR.ulChannel5*20*pow(10,-3)));// channel 5
 20012d0:	00808074 	movhi	r2,513
 20012d4:	10ad9d04 	addi	r2,r2,-18828
 20012d8:	10800417 	ldw	r2,16(r2)
 20012dc:	11000524 	muli	r4,r2,20
 20012e0:	2004e940 	call	2004e94 <__floatunsidf>
 20012e4:	1021883a 	mov	r16,r2
 20012e8:	1823883a 	mov	r17,r3
 20012ec:	0009883a 	mov	r4,zero
 20012f0:	01500934 	movhi	r5,16420
 20012f4:	000d883a 	mov	r6,zero
 20012f8:	01f00234 	movhi	r7,49160
 20012fc:	200201c0 	call	200201c <pow>
 2001300:	100f883a 	mov	r7,r2
 2001304:	1811883a 	mov	r8,r3
 2001308:	8009883a 	mov	r4,r16
 200130c:	880b883a 	mov	r5,r17
 2001310:	380d883a 	mov	r6,r7
 2001314:	400f883a 	mov	r7,r8
 2001318:	20044000 	call	2004400 <__muldf3>
 200131c:	1009883a 	mov	r4,r2
 2001320:	180b883a 	mov	r5,r3
 2001324:	2005883a 	mov	r2,r4
 2001328:	2807883a 	mov	r3,r5
 200132c:	1009883a 	mov	r4,r2
 2001330:	180b883a 	mov	r5,r3
 2001334:	2004dbc0 	call	2004dbc <__fixdfsi>
 2001338:	100f883a 	mov	r7,r2
 200133c:	01000284 	movi	r4,10
 2001340:	014003c4 	movi	r5,15
 2001344:	01800344 	movi	r6,13
 2001348:	2000a1c0 	call	2000a1c <vPrintFix>
	vPrintFix( 11,15,13,(alt_32)(sRCVR.ulChannel6*20*pow(10,-3)));// channel 6
 200134c:	00808074 	movhi	r2,513
 2001350:	10ad9d04 	addi	r2,r2,-18828
 2001354:	10800517 	ldw	r2,20(r2)
 2001358:	11000524 	muli	r4,r2,20
 200135c:	2004e940 	call	2004e94 <__floatunsidf>
 2001360:	1021883a 	mov	r16,r2
 2001364:	1823883a 	mov	r17,r3
 2001368:	0009883a 	mov	r4,zero
 200136c:	01500934 	movhi	r5,16420
 2001370:	000d883a 	mov	r6,zero
 2001374:	01f00234 	movhi	r7,49160
 2001378:	200201c0 	call	200201c <pow>
 200137c:	100f883a 	mov	r7,r2
 2001380:	1811883a 	mov	r8,r3
 2001384:	8009883a 	mov	r4,r16
 2001388:	880b883a 	mov	r5,r17
 200138c:	380d883a 	mov	r6,r7
 2001390:	400f883a 	mov	r7,r8
 2001394:	20044000 	call	2004400 <__muldf3>
 2001398:	1009883a 	mov	r4,r2
 200139c:	180b883a 	mov	r5,r3
 20013a0:	2005883a 	mov	r2,r4
 20013a4:	2807883a 	mov	r3,r5
 20013a8:	1009883a 	mov	r4,r2
 20013ac:	180b883a 	mov	r5,r3
 20013b0:	2004dbc0 	call	2004dbc <__fixdfsi>
 20013b4:	100f883a 	mov	r7,r2
 20013b8:	010002c4 	movi	r4,11
 20013bc:	014003c4 	movi	r5,15
 20013c0:	01800344 	movi	r6,13
 20013c4:	2000a1c0 	call	2000a1c <vPrintFix>

	vPrintNlz(14, 20, 4, (alt_32) sDATA.sBits.distance_reset);
 20013c8:	00808074 	movhi	r2,513
 20013cc:	10ad8004 	addi	r2,r2,-18944
 20013d0:	10800c17 	ldw	r2,48(r2)
 20013d4:	1004d07a 	srli	r2,r2,1
 20013d8:	1080004c 	andi	r2,r2,1
 20013dc:	11c03fcc 	andi	r7,r2,255
 20013e0:	01000384 	movi	r4,14
 20013e4:	01400504 	movi	r5,20
 20013e8:	01800104 	movi	r6,4
 20013ec:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(15, 20, 4, (alt_32) sDATA.sBits.automatic);
 20013f0:	00808074 	movhi	r2,513
 20013f4:	10ad8004 	addi	r2,r2,-18944
 20013f8:	10800c17 	ldw	r2,48(r2)
 20013fc:	1004d0ba 	srli	r2,r2,2
 2001400:	1080004c 	andi	r2,r2,1
 2001404:	11c03fcc 	andi	r7,r2,255
 2001408:	010003c4 	movi	r4,15
 200140c:	01400504 	movi	r5,20
 2001410:	01800104 	movi	r6,4
 2001414:	20008780 	call	2000878 <vPrintNlz>

	vPrintNlz(18, 12, 4, (alt_32) sADC.ulADC1 );
 2001418:	00808074 	movhi	r2,513
 200141c:	10ad8d04 	addi	r2,r2,-18892
 2001420:	10800017 	ldw	r2,0(r2)
 2001424:	100f883a 	mov	r7,r2
 2001428:	01000484 	movi	r4,18
 200142c:	01400304 	movi	r5,12
 2001430:	01800104 	movi	r6,4
 2001434:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(19, 12, 4, (alt_32) sADC.ulADC2 );
 2001438:	00808074 	movhi	r2,513
 200143c:	10ad8d04 	addi	r2,r2,-18892
 2001440:	10800117 	ldw	r2,4(r2)
 2001444:	100f883a 	mov	r7,r2
 2001448:	010004c4 	movi	r4,19
 200144c:	01400304 	movi	r5,12
 2001450:	01800104 	movi	r6,4
 2001454:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(20, 12, 4, (alt_32) sADC.ulADC3 );
 2001458:	00808074 	movhi	r2,513
 200145c:	10ad8d04 	addi	r2,r2,-18892
 2001460:	10800217 	ldw	r2,8(r2)
 2001464:	100f883a 	mov	r7,r2
 2001468:	01000504 	movi	r4,20
 200146c:	01400304 	movi	r5,12
 2001470:	01800104 	movi	r6,4
 2001474:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(21, 12, 4, (alt_32) sADC.ulADC4 );
 2001478:	00808074 	movhi	r2,513
 200147c:	10ad8d04 	addi	r2,r2,-18892
 2001480:	10800317 	ldw	r2,12(r2)
 2001484:	100f883a 	mov	r7,r2
 2001488:	01000544 	movi	r4,21
 200148c:	01400304 	movi	r5,12
 2001490:	01800104 	movi	r6,4
 2001494:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(22, 12, 4, (alt_32) sADC.ulADC5 );
 2001498:	00808074 	movhi	r2,513
 200149c:	10ad8d04 	addi	r2,r2,-18892
 20014a0:	10800417 	ldw	r2,16(r2)
 20014a4:	100f883a 	mov	r7,r2
 20014a8:	01000584 	movi	r4,22
 20014ac:	01400304 	movi	r5,12
 20014b0:	01800104 	movi	r6,4
 20014b4:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(23, 12, 4, (alt_32) sADC.ulADC6 );
 20014b8:	00808074 	movhi	r2,513
 20014bc:	10ad8d04 	addi	r2,r2,-18892
 20014c0:	10800517 	ldw	r2,20(r2)
 20014c4:	100f883a 	mov	r7,r2
 20014c8:	010005c4 	movi	r4,23
 20014cc:	01400304 	movi	r5,12
 20014d0:	01800104 	movi	r6,4
 20014d4:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(24, 12, 4, (alt_32) sADC.ulADC7 );
 20014d8:	00808074 	movhi	r2,513
 20014dc:	10ad8d04 	addi	r2,r2,-18892
 20014e0:	10800617 	ldw	r2,24(r2)
 20014e4:	100f883a 	mov	r7,r2
 20014e8:	01000604 	movi	r4,24
 20014ec:	01400304 	movi	r5,12
 20014f0:	01800104 	movi	r6,4
 20014f4:	20008780 	call	2000878 <vPrintNlz>

	/*!
	 * print values Configuration section of screen
	 */
	vPrintNlz(6, 41, 4, (alt_32) sDATA.ulThrottleMin    );
 20014f8:	00808074 	movhi	r2,513
 20014fc:	10ad8004 	addi	r2,r2,-18944
 2001500:	10800917 	ldw	r2,36(r2)
 2001504:	100f883a 	mov	r7,r2
 2001508:	01000184 	movi	r4,6
 200150c:	01400a44 	movi	r5,41
 2001510:	01800104 	movi	r6,4
 2001514:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(6, 48, 4, (alt_32) sDATA.ulThrottleMax    );
 2001518:	00808074 	movhi	r2,513
 200151c:	10ad8004 	addi	r2,r2,-18944
 2001520:	10800a17 	ldw	r2,40(r2)
 2001524:	100f883a 	mov	r7,r2
 2001528:	01000184 	movi	r4,6
 200152c:	01400c04 	movi	r5,48
 2001530:	01800104 	movi	r6,4
 2001534:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(6, 55, 4, (alt_32) sDATA.ulThrottleNeutral);
 2001538:	00808074 	movhi	r2,513
 200153c:	10ad8004 	addi	r2,r2,-18944
 2001540:	10800b17 	ldw	r2,44(r2)
 2001544:	100f883a 	mov	r7,r2
 2001548:	01000184 	movi	r4,6
 200154c:	01400dc4 	movi	r5,55
 2001550:	01800104 	movi	r6,4
 2001554:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(6, 62, 4, (alt_32) sDATA.ulThrottlePWM_C  );
 2001558:	00808074 	movhi	r2,513
 200155c:	10ad8004 	addi	r2,r2,-18944
 2001560:	10800817 	ldw	r2,32(r2)
 2001564:	100f883a 	mov	r7,r2
 2001568:	01000184 	movi	r4,6
 200156c:	01400f84 	movi	r5,62
 2001570:	01800104 	movi	r6,4
 2001574:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(7, 41, 4, (alt_32) sDATA.ulServoMin );
 2001578:	00808074 	movhi	r2,513
 200157c:	10ad8004 	addi	r2,r2,-18944
 2001580:	10800217 	ldw	r2,8(r2)
 2001584:	100f883a 	mov	r7,r2
 2001588:	010001c4 	movi	r4,7
 200158c:	01400a44 	movi	r5,41
 2001590:	01800104 	movi	r6,4
 2001594:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(7, 48, 4, (alt_32) sDATA.ulServoMax );
 2001598:	00808074 	movhi	r2,513
 200159c:	10ad8004 	addi	r2,r2,-18944
 20015a0:	10800317 	ldw	r2,12(r2)
 20015a4:	100f883a 	mov	r7,r2
 20015a8:	010001c4 	movi	r4,7
 20015ac:	01400c04 	movi	r5,48
 20015b0:	01800104 	movi	r6,4
 20015b4:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(7, 55, 4, (alt_32) sDATA.ulServoNeutral);
 20015b8:	00808074 	movhi	r2,513
 20015bc:	10ad8004 	addi	r2,r2,-18944
 20015c0:	10800417 	ldw	r2,16(r2)
 20015c4:	100f883a 	mov	r7,r2
 20015c8:	010001c4 	movi	r4,7
 20015cc:	01400dc4 	movi	r5,55
 20015d0:	01800104 	movi	r6,4
 20015d4:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(7, 62, 4, (alt_32) sDATA.ulServoPWM_C );
 20015d8:	00808074 	movhi	r2,513
 20015dc:	10ad8004 	addi	r2,r2,-18944
 20015e0:	10800017 	ldw	r2,0(r2)
 20015e4:	100f883a 	mov	r7,r2
 20015e8:	010001c4 	movi	r4,7
 20015ec:	01400f84 	movi	r5,62
 20015f0:	01800104 	movi	r6,4
 20015f4:	20008780 	call	2000878 <vPrintNlz>

	//print distance data
	vPrintNlz(9, 43, 5, (alt_32) sDATA.ulDistanceLimit);
 20015f8:	00808074 	movhi	r2,513
 20015fc:	10ad8004 	addi	r2,r2,-18944
 2001600:	10800717 	ldw	r2,28(r2)
 2001604:	100f883a 	mov	r7,r2
 2001608:	01000244 	movi	r4,9
 200160c:	01400ac4 	movi	r5,43
 2001610:	01800144 	movi	r6,5
 2001614:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(10, 43, 5, (alt_32) sDATA.ulDistance_Real - sDATA.ulDistance_Old); // distance delta
 2001618:	00808074 	movhi	r2,513
 200161c:	10ad8004 	addi	r2,r2,-18944
 2001620:	10c00517 	ldw	r3,20(r2)
 2001624:	00808074 	movhi	r2,513
 2001628:	10ad8004 	addi	r2,r2,-18944
 200162c:	10800617 	ldw	r2,24(r2)
 2001630:	1885c83a 	sub	r2,r3,r2
 2001634:	100f883a 	mov	r7,r2
 2001638:	01000284 	movi	r4,10
 200163c:	01400ac4 	movi	r5,43
 2001640:	01800144 	movi	r6,5
 2001644:	20008780 	call	2000878 <vPrintNlz>
	vPrintNlz(11, 43, 5, (alt_32) sDATA.ulDistance_Real); //OVERALL distance
 2001648:	00808074 	movhi	r2,513
 200164c:	10ad8004 	addi	r2,r2,-18944
 2001650:	10800517 	ldw	r2,20(r2)
 2001654:	100f883a 	mov	r7,r2
 2001658:	010002c4 	movi	r4,11
 200165c:	01400ac4 	movi	r5,43
 2001660:	01800144 	movi	r6,5
 2001664:	20008780 	call	2000878 <vPrintNlz>

}
 2001668:	e037883a 	mov	sp,fp
 200166c:	dfc00317 	ldw	ra,12(sp)
 2001670:	df000217 	ldw	fp,8(sp)
 2001674:	dc400117 	ldw	r17,4(sp)
 2001678:	dc000017 	ldw	r16,0(sp)
 200167c:	dec00404 	addi	sp,sp,16
 2001680:	f800283a 	ret

02001684 <vProcessNewKey>:
 * @brief 	Key has been entered, decide what to do with it.
 * @note 	Serial User Interface updated
 * @param  	[in] ubChar The key entered.
 */
void vProcessNewKey(alt_u8 ubChar)
{
 2001684:	defffc04 	addi	sp,sp,-16
 2001688:	dfc00315 	stw	ra,12(sp)
 200168c:	df000215 	stw	fp,8(sp)
 2001690:	df000204 	addi	fp,sp,8
 2001694:	e13ffe05 	stb	r4,-8(fp)
	// Test for Control C to toggle display update
	if (ubChar == 3)
 2001698:	e0bffe03 	ldbu	r2,-8(fp)
 200169c:	108000d8 	cmpnei	r2,r2,3
 20016a0:	1000111e 	bne	r2,zero,20016e8 <vProcessNewKey+0x64>
	{
		sSUI.ubEnableDisplay  = sSUI.ubEnableDisplay ? 0 : 1;
 20016a4:	00808074 	movhi	r2,513
 20016a8:	10ad7704 	addi	r2,r2,-18980
 20016ac:	10800003 	ldbu	r2,0(r2)
 20016b0:	10803fcc 	andi	r2,r2,255
 20016b4:	1005003a 	cmpeq	r2,r2,zero
 20016b8:	1007883a 	mov	r3,r2
 20016bc:	00808074 	movhi	r2,513
 20016c0:	10ad7704 	addi	r2,r2,-18980
 20016c4:	10c00005 	stb	r3,0(r2)
		//when display is toggle, if toggled to on, refresh the display
		if (sSUI.ubEnableDisplay)
 20016c8:	00808074 	movhi	r2,513
 20016cc:	10ad7704 	addi	r2,r2,-18980
 20016d0:	10800003 	ldbu	r2,0(r2)
 20016d4:	10803fcc 	andi	r2,r2,255
 20016d8:	1005003a 	cmpeq	r2,r2,zero
 20016dc:	10001a1e 	bne	r2,zero,2001748 <vProcessNewKey+0xc4>
		{
			vPrintStaticScreen1();
 20016e0:	2000ea40 	call	2000ea4 <vPrintStaticScreen1>
		}
		return;
 20016e4:	00001806 	br	2001748 <vProcessNewKey+0xc4>
	}
	switch(sSUI.ubEntryMode)
 20016e8:	00808074 	movhi	r2,513
 20016ec:	10ad7704 	addi	r2,r2,-18980
 20016f0:	10800043 	ldbu	r2,1(r2)
 20016f4:	10803fcc 	andi	r2,r2,255
 20016f8:	e0bfff15 	stw	r2,-4(fp)
 20016fc:	e0ffff17 	ldw	r3,-4(fp)
 2001700:	18800060 	cmpeqi	r2,r3,1
 2001704:	10000b1e 	bne	r2,zero,2001734 <vProcessNewKey+0xb0>
 2001708:	e0ffff17 	ldw	r3,-4(fp)
 200170c:	18800088 	cmpgei	r2,r3,2
 2001710:	1000041e 	bne	r2,zero,2001724 <vProcessNewKey+0xa0>
 2001714:	e0ffff17 	ldw	r3,-4(fp)
 2001718:	1805003a 	cmpeq	r2,r3,zero
 200171c:	1000081e 	bne	r2,zero,2001740 <vProcessNewKey+0xbc>
 2001720:	00000906 	br	2001748 <vProcessNewKey+0xc4>
 2001724:	e0ffff17 	ldw	r3,-4(fp)
 2001728:	18800108 	cmpgei	r2,r3,4
 200172c:	1000061e 	bne	r2,zero,2001748 <vProcessNewKey+0xc4>
 2001730:	00000306 	br	2001740 <vProcessNewKey+0xbc>
	{
	case ENTRY_MODE_D: 			// Development screen is being displayed
		vMonitorDiagnostic(ubChar); 	// set Dev screen input entry mode
 2001734:	e13ffe03 	ldbu	r4,-8(fp)
 2001738:	200175c0 	call	200175c <vMonitorDiagnostic>
		break;
 200173c:	00000206 	br	2001748 <vProcessNewKey+0xc4>
		//-----------------------------------------------------------------
	case ENTRY_MODE_S:
	case ENTRY_MODE_T:
	case ENTRY_MODE_X:

		vProcessInputValue(ubChar);
 2001740:	e13ffe03 	ldbu	r4,-8(fp)
 2001744:	20018700 	call	2001870 <vProcessInputValue>
		break;
	}
}
 2001748:	e037883a 	mov	sp,fp
 200174c:	dfc00117 	ldw	ra,4(sp)
 2001750:	df000017 	ldw	fp,0(sp)
 2001754:	dec00204 	addi	sp,sp,8
 2001758:	f800283a 	ret

0200175c <vMonitorDiagnostic>:
void vMonitorDiagnostic(alt_u8 ubChar)
{
 200175c:	defffd04 	addi	sp,sp,-12
 2001760:	dfc00215 	stw	ra,8(sp)
 2001764:	df000115 	stw	fp,4(sp)
 2001768:	df000104 	addi	fp,sp,4
 200176c:	e13fff05 	stb	r4,-4(fp)
	// Test for s for servo control
	if (ubChar == 'v')
 2001770:	e0bfff03 	ldbu	r2,-4(fp)
 2001774:	10801d98 	cmpnei	r2,r2,118
 2001778:	1000041e 	bne	r2,zero,200178c <vMonitorDiagnostic+0x30>
	{
		sSUI.ubEntryMode = ENTRY_MODE_S;
 200177c:	00808074 	movhi	r2,513
 2001780:	10ad7704 	addi	r2,r2,-18980
 2001784:	10000045 	stb	zero,1(r2)
 2001788:	00003206 	br	2001854 <vMonitorDiagnostic+0xf8>
	}
	else if (ubChar == 'V')
 200178c:	e0bfff03 	ldbu	r2,-4(fp)
 2001790:	10801598 	cmpnei	r2,r2,86
 2001794:	1000051e 	bne	r2,zero,20017ac <vMonitorDiagnostic+0x50>
	{
		sSUI.ubEntryMode = ENTRY_MODE_T;
 2001798:	00c08074 	movhi	r3,513
 200179c:	18ed7704 	addi	r3,r3,-18980
 20017a0:	008000c4 	movi	r2,3
 20017a4:	18800045 	stb	r2,1(r3)
 20017a8:	00002a06 	br	2001854 <vMonitorDiagnostic+0xf8>
	}
	else if (ubChar == 'x')
 20017ac:	e0bfff03 	ldbu	r2,-4(fp)
 20017b0:	10801e18 	cmpnei	r2,r2,120
 20017b4:	1000051e 	bne	r2,zero,20017cc <vMonitorDiagnostic+0x70>
	{

		sSUI.ubEntryMode = ENTRY_MODE_X;
 20017b8:	00c08074 	movhi	r3,513
 20017bc:	18ed7704 	addi	r3,r3,-18980
 20017c0:	00800084 	movi	r2,2
 20017c4:	18800045 	stb	r2,1(r3)
 20017c8:	00002206 	br	2001854 <vMonitorDiagnostic+0xf8>
	}
	else if(ubChar == 't')
 20017cc:	e0bfff03 	ldbu	r2,-4(fp)
 20017d0:	10801d18 	cmpnei	r2,r2,116
 20017d4:	10000d1e 	bne	r2,zero,200180c <vMonitorDiagnostic+0xb0>
	{
					//now in test mode
		            //edit header
					//          1         2         3         4         5         6         7         8
					// 12345678901234567890123456789012345678901234567890123456789012345678901234567890
                                                  vPrintTxt( 1, 51, 80, "Press [n] to enter normal mode"); // 1
 20017d8:	01000044 	movi	r4,1
 20017dc:	01400cc4 	movi	r5,51
 20017e0:	01801404 	movi	r6,80
 20017e4:	01c08074 	movhi	r7,513
 20017e8:	39e6c504 	addi	r7,r7,-25836
 20017ec:	20007fc0 	call	20007fc <vPrintTxt>
 sDATA.sBits.testOrNormal = TEST;
 20017f0:	01008074 	movhi	r4,513
 20017f4:	212d8004 	addi	r4,r4,-18944
 20017f8:	20c00c17 	ldw	r3,48(r4)
 20017fc:	00bfff84 	movi	r2,-2
 2001800:	1884703a 	and	r2,r3,r2
 2001804:	20800c15 	stw	r2,48(r4)
 2001808:	00001206 	br	2001854 <vMonitorDiagnostic+0xf8>
	}
	else if(ubChar == 'n')
 200180c:	e0bfff03 	ldbu	r2,-4(fp)
 2001810:	10801b98 	cmpnei	r2,r2,110
 2001814:	10000c1e 	bne	r2,zero,2001848 <vMonitorDiagnostic+0xec>

		           //now in normal mode
				   //edit header
		           //          1         2         3         4         5         6         7         8
		           // 12345678901234567890123456789012345678901234567890123456789012345678901234567890
                                                 vPrintTxt( 1, 51, 80, "Press [t] to enter test mode  "); // 1
 2001818:	01000044 	movi	r4,1
 200181c:	01400cc4 	movi	r5,51
 2001820:	01801404 	movi	r6,80
 2001824:	01c08074 	movhi	r7,513
 2001828:	39e6cd04 	addi	r7,r7,-25804
 200182c:	20007fc0 	call	20007fc <vPrintTxt>
sDATA.sBits.testOrNormal = NORMAL;
 2001830:	00808074 	movhi	r2,513
 2001834:	10ad8004 	addi	r2,r2,-18944
 2001838:	10c00c17 	ldw	r3,48(r2)
 200183c:	18c00054 	ori	r3,r3,1
 2001840:	10c00c15 	stw	r3,48(r2)
 2001844:	00000306 	br	2001854 <vMonitorDiagnostic+0xf8>
	}
	else
	{	//not a valid input for diagnostic screen
		vEchoChar(7);	 				// sound bell (echo Control G)
 2001848:	010001c4 	movi	r4,7
 200184c:	2001f8c0 	call	2001f8c <vEchoChar>
		return;
 2001850:	00000206 	br	200185c <vMonitorDiagnostic+0x100>
	}
	vEchoChar(ubChar); //echo the valid character just entered
 2001854:	e13fff03 	ldbu	r4,-4(fp)
 2001858:	2001f8c0 	call	2001f8c <vEchoChar>
}
 200185c:	e037883a 	mov	sp,fp
 2001860:	dfc00117 	ldw	ra,4(sp)
 2001864:	df000017 	ldw	fp,0(sp)
 2001868:	dec00204 	addi	sp,sp,8
 200186c:	f800283a 	ret

02001870 <vProcessInputValue>:
/*!
 * @brief	Process input character, when enter key is pressed perform an action
 * @param 	ubChar input character from HyperTerminal
 */
void vProcessInputValue(alt_u8 ubChar)
{
 2001870:	defffc04 	addi	sp,sp,-16
 2001874:	dfc00315 	stw	ra,12(sp)
 2001878:	df000215 	stw	fp,8(sp)
 200187c:	df000204 	addi	fp,sp,8
 2001880:	e13ffe05 	stb	r4,-8(fp)

	// Test for 0..9 to build the decimal value
	if ((ubChar >= '0') && (ubChar <= '9'))
 2001884:	e0bffe03 	ldbu	r2,-8(fp)
 2001888:	10800c30 	cmpltui	r2,r2,48
 200188c:	10001f1e 	bne	r2,zero,200190c <vProcessInputValue+0x9c>
 2001890:	e0bffe03 	ldbu	r2,-8(fp)
 2001894:	10800ea8 	cmpgeui	r2,r2,58
 2001898:	10001c1e 	bne	r2,zero,200190c <vProcessInputValue+0x9c>
	{
		vCursor(2,2+sSUI.ubCount);
 200189c:	00808074 	movhi	r2,513
 20018a0:	10ad7704 	addi	r2,r2,-18980
 20018a4:	1080008b 	ldhu	r2,2(r2)
 20018a8:	10800084 	addi	r2,r2,2
 20018ac:	117fffcc 	andi	r5,r2,65535
 20018b0:	01000084 	movi	r4,2
 20018b4:	20006f80 	call	20006f8 <vCursor>
		vPutChar(ubChar);					// Echo the numeric value
 20018b8:	e13ffe03 	ldbu	r4,-8(fp)
 20018bc:	20006680 	call	2000668 <vPutChar>

		sSUI.ulAccumulate = sSUI.ulAccumulate * 10 + ubChar - '0';
 20018c0:	00808074 	movhi	r2,513
 20018c4:	10ad7704 	addi	r2,r2,-18980
 20018c8:	10800117 	ldw	r2,4(r2)
 20018cc:	10c002a4 	muli	r3,r2,10
 20018d0:	e0bffe03 	ldbu	r2,-8(fp)
 20018d4:	1885883a 	add	r2,r3,r2
 20018d8:	10fff404 	addi	r3,r2,-48
 20018dc:	00808074 	movhi	r2,513
 20018e0:	10ad7704 	addi	r2,r2,-18980
 20018e4:	10c00115 	stw	r3,4(r2)
		sSUI.ubCount++;
 20018e8:	00808074 	movhi	r2,513
 20018ec:	10ad7704 	addi	r2,r2,-18980
 20018f0:	1080008b 	ldhu	r2,2(r2)
 20018f4:	10800044 	addi	r2,r2,1
 20018f8:	1007883a 	mov	r3,r2
 20018fc:	00808074 	movhi	r2,513
 2001900:	10ad7704 	addi	r2,r2,-18980
 2001904:	10c0008d 	sth	r3,2(r2)
 */
void vProcessInputValue(alt_u8 ubChar)
{

	// Test for 0..9 to build the decimal value
	if ((ubChar >= '0') && (ubChar <= '9'))
 2001908:	00003306 	br	20019d8 <vProcessInputValue+0x168>
		sSUI.ulAccumulate = sSUI.ulAccumulate * 10 + ubChar - '0';
		sSUI.ubCount++;
		//printf("accumulated value %d\n", sSUI.swAccum);
	}

	else if (ubChar == 13)//13 is enter key
 200190c:	e0bffe03 	ldbu	r2,-8(fp)
 2001910:	10800358 	cmpnei	r2,r2,13
 2001914:	1000281e 	bne	r2,zero,20019b8 <vProcessInputValue+0x148>
	{
		vEraseCommand();				// Erase the command line
 2001918:	2001fe00 	call	2001fe0 <vEraseCommand>
		switch(sSUI.ubEntryMode)
 200191c:	00808074 	movhi	r2,513
 2001920:	10ad7704 	addi	r2,r2,-18980
 2001924:	10800043 	ldbu	r2,1(r2)
 2001928:	10803fcc 	andi	r2,r2,255
 200192c:	e0bfff15 	stw	r2,-4(fp)
 2001930:	e0ffff17 	ldw	r3,-4(fp)
 2001934:	188000a0 	cmpeqi	r2,r3,2
 2001938:	1000111e 	bne	r2,zero,2001980 <vProcessInputValue+0x110>
 200193c:	e0ffff17 	ldw	r3,-4(fp)
 2001940:	188000e0 	cmpeqi	r2,r3,3
 2001944:	1000091e 	bne	r2,zero,200196c <vProcessInputValue+0xfc>
 2001948:	e0ffff17 	ldw	r3,-4(fp)
 200194c:	1805003a 	cmpeq	r2,r3,zero
 2001950:	1000011e 	bne	r2,zero,2001958 <vProcessInputValue+0xe8>
 2001954:	00001006 	br	2001998 <vProcessInputValue+0x128>
		{
		case ENTRY_MODE_S:
			vSetServoPWM(sSUI.ulAccumulate);
 2001958:	00808074 	movhi	r2,513
 200195c:	10ad7704 	addi	r2,r2,-18980
 2001960:	11000117 	ldw	r4,4(r2)
 2001964:	2001e6c0 	call	2001e6c <vSetServoPWM>
			break;
 2001968:	00000b06 	br	2001998 <vProcessInputValue+0x128>
		case ENTRY_MODE_T:
			vSetThrottle(sSUI.ulAccumulate);
 200196c:	00808074 	movhi	r2,513
 2001970:	10ad7704 	addi	r2,r2,-18980
 2001974:	11000117 	ldw	r4,4(r2)
 2001978:	2001f400 	call	2001f40 <vSetThrottle>
			break;
 200197c:	00000606 	br	2001998 <vProcessInputValue+0x128>
		case ENTRY_MODE_X:
			sDATA.ulDistanceLimit = sSUI.ulAccumulate;
 2001980:	00808074 	movhi	r2,513
 2001984:	10ad7704 	addi	r2,r2,-18980
 2001988:	10c00117 	ldw	r3,4(r2)
 200198c:	00808074 	movhi	r2,513
 2001990:	10ad8004 	addi	r2,r2,-18944
 2001994:	10c00715 	stw	r3,28(r2)
			break;
		}

		sSUI.ulAccumulate = 0;
 2001998:	00808074 	movhi	r2,513
 200199c:	10ad7704 	addi	r2,r2,-18980
 20019a0:	10000115 	stw	zero,4(r2)
		sSUI.ubEntryMode = ENTRY_MODE_D;
 20019a4:	00c08074 	movhi	r3,513
 20019a8:	18ed7704 	addi	r3,r3,-18980
 20019ac:	00800044 	movi	r2,1
 20019b0:	18800045 	stb	r2,1(r3)
 20019b4:	00000806 	br	20019d8 <vProcessInputValue+0x168>
	} // end of <Enter Key>

	// Invalid entry, abort entry of decimal value
	else
	{
		vEraseCommand();				// Erase the command line
 20019b8:	2001fe00 	call	2001fe0 <vEraseCommand>
		sSUI.ulAccumulate = 0;
 20019bc:	00808074 	movhi	r2,513
 20019c0:	10ad7704 	addi	r2,r2,-18980
 20019c4:	10000115 	stw	zero,4(r2)
		sSUI.ubEntryMode = ENTRY_MODE_D;
 20019c8:	00c08074 	movhi	r3,513
 20019cc:	18ed7704 	addi	r3,r3,-18980
 20019d0:	00800044 	movi	r2,1
 20019d4:	18800045 	stb	r2,1(r3)
	}
}
 20019d8:	e037883a 	mov	sp,fp
 20019dc:	dfc00117 	ldw	ra,4(sp)
 20019e0:	df000017 	ldw	fp,0(sp)
 20019e4:	dec00204 	addi	sp,sp,8
 20019e8:	f800283a 	ret

020019ec <vInitializePWMs>:

void vInitializePWMs()
{
 20019ec:	deffff04 	addi	sp,sp,-4
 20019f0:	df000015 	stw	fp,0(sp)
 20019f4:	d839883a 	mov	fp,sp
	sDATA.ulServoNeutral = 2458;//1.5ms
 20019f8:	00c08074 	movhi	r3,513
 20019fc:	18ed8004 	addi	r3,r3,-18944
 2001a00:	00826684 	movi	r2,2458
 2001a04:	18800415 	stw	r2,16(r3)
	sDATA.ulServoPWM_C = sDATA.ulServoNeutral;
 2001a08:	00808074 	movhi	r2,513
 2001a0c:	10ad8004 	addi	r2,r2,-18944
 2001a10:	10c00417 	ldw	r3,16(r2)
 2001a14:	00808074 	movhi	r2,513
 2001a18:	10ad8004 	addi	r2,r2,-18944
 2001a1c:	10c00015 	stw	r3,0(r2)
	sDATA.ulServoMax = 2703; //1.65ms
 2001a20:	00c08074 	movhi	r3,513
 2001a24:	18ed8004 	addi	r3,r3,-18944
 2001a28:	0082a3c4 	movi	r2,2703
 2001a2c:	18800315 	stw	r2,12(r3)
	sDATA.ulServoMin = 1966; //1.2ms
 2001a30:	00c08074 	movhi	r3,513
 2001a34:	18ed8004 	addi	r3,r3,-18944
 2001a38:	0081eb84 	movi	r2,1966
 2001a3c:	18800215 	stw	r2,8(r3)

	sDATA.ulDistanceLimit = 10;
 2001a40:	00c08074 	movhi	r3,513
 2001a44:	18ed8004 	addi	r3,r3,-18944
 2001a48:	00800284 	movi	r2,10
 2001a4c:	18800715 	stw	r2,28(r3)
	sDATA.ulThrottleNeutral = 2457; //1.5ms
 2001a50:	00c08074 	movhi	r3,513
 2001a54:	18ed8004 	addi	r3,r3,-18944
 2001a58:	00826644 	movi	r2,2457
 2001a5c:	18800b15 	stw	r2,44(r3)
	sDATA.ulThrottlePWM_C = sDATA.ulThrottleNeutral;
 2001a60:	00808074 	movhi	r2,513
 2001a64:	10ad8004 	addi	r2,r2,-18944
 2001a68:	10c00b17 	ldw	r3,44(r2)
 2001a6c:	00808074 	movhi	r2,513
 2001a70:	10ad8004 	addi	r2,r2,-18944
 2001a74:	10c00815 	stw	r3,32(r2)
	sDATA.ulThrottleMax = 3276;
 2001a78:	00c08074 	movhi	r3,513
 2001a7c:	18ed8004 	addi	r3,r3,-18944
 2001a80:	00833304 	movi	r2,3276
 2001a84:	18800a15 	stw	r2,40(r3)
	sDATA.ulThrottleMin = 1638;
 2001a88:	00c08074 	movhi	r3,513
 2001a8c:	18ed8004 	addi	r3,r3,-18944
 2001a90:	00819984 	movi	r2,1638
 2001a94:	18800915 	stw	r2,36(r3)

	sDATA.sBits.testOrNormal = TEST;
 2001a98:	01008074 	movhi	r4,513
 2001a9c:	212d8004 	addi	r4,r4,-18944
 2001aa0:	20c00c17 	ldw	r3,48(r4)
 2001aa4:	00bfff84 	movi	r2,-2
 2001aa8:	1884703a 	and	r2,r3,r2
 2001aac:	20800c15 	stw	r2,48(r4)

	IOWR_32DIRECT(SLAVE_TEMPLATE_0_BASE, (DATA_OUT_14 * 4), (alt_u32)sDATA.ulServoPWM_C);//PWM_Steering);
 2001ab0:	00808074 	movhi	r2,513
 2001ab4:	10ad8004 	addi	r2,r2,-18944
 2001ab8:	10800017 	ldw	r2,0(r2)
 2001abc:	1007883a 	mov	r3,r2
 2001ac0:	00810034 	movhi	r2,1024
 2001ac4:	108ce104 	addi	r2,r2,13188
 2001ac8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(SLAVE_TEMPLATE_0_BASE, (DATA_OUT_15 * 4), (alt_u32)sDATA.ulThrottlePWM_C);//PWM throttle
 2001acc:	00808074 	movhi	r2,513
 2001ad0:	10ad8004 	addi	r2,r2,-18944
 2001ad4:	10800817 	ldw	r2,32(r2)
 2001ad8:	1007883a 	mov	r3,r2
 2001adc:	00810034 	movhi	r2,1024
 2001ae0:	108cf104 	addi	r2,r2,13252
 2001ae4:	10c00035 	stwio	r3,0(r2)
}
 2001ae8:	e037883a 	mov	sp,fp
 2001aec:	df000017 	ldw	fp,0(sp)
 2001af0:	dec00104 	addi	sp,sp,4
 2001af4:	f800283a 	ret

02001af8 <processing>:

/*!
 * takes in all photo-transistor sensor value, adjust servo and throttle based on those values
 */
void processing(alt_u32 a,alt_u32 b, alt_u32 c, alt_u32 d, alt_u32 e, alt_u32 f, alt_u32 g ){
 2001af8:	defffb04 	addi	sp,sp,-20
 2001afc:	df000415 	stw	fp,16(sp)
 2001b00:	df000404 	addi	fp,sp,16
 2001b04:	e13ffc15 	stw	r4,-16(fp)
 2001b08:	e17ffd15 	stw	r5,-12(fp)
 2001b0c:	e1bffe15 	stw	r6,-8(fp)
 2001b10:	e1ffff15 	stw	r7,-4(fp)
	sDATA.ulServoPWM_O = sDATA.ulServoPWM_C; //current servo value become old servo value
 2001b14:	00808074 	movhi	r2,513
 2001b18:	10ad8004 	addi	r2,r2,-18944
 2001b1c:	10c00017 	ldw	r3,0(r2)
 2001b20:	00808074 	movhi	r2,513
 2001b24:	10ad8004 	addi	r2,r2,-18944
 2001b28:	10c00115 	stw	r3,4(r2)

	//@todo this is inefficient, effectively calculating minimum value 7 times
	//will change so calculate minimum value once then use switch case statement to set values
																   //Sensor array, [n*] is the lowest value
	if (a <= b && a <= c && a <= d && a <= e && a <= f && a <= g){ //[a*]--[b]--[c]--[d]--[e]--[f]--[g]
 2001b2c:	e0fffc17 	ldw	r3,-16(fp)
 2001b30:	e0bffd17 	ldw	r2,-12(fp)
 2001b34:	10c01736 	bltu	r2,r3,2001b94 <processing+0x9c>
 2001b38:	e0fffc17 	ldw	r3,-16(fp)
 2001b3c:	e0bffe17 	ldw	r2,-8(fp)
 2001b40:	10c01436 	bltu	r2,r3,2001b94 <processing+0x9c>
 2001b44:	e0fffc17 	ldw	r3,-16(fp)
 2001b48:	e0bfff17 	ldw	r2,-4(fp)
 2001b4c:	10c01136 	bltu	r2,r3,2001b94 <processing+0x9c>
 2001b50:	e0fffc17 	ldw	r3,-16(fp)
 2001b54:	e0800117 	ldw	r2,4(fp)
 2001b58:	10c00e36 	bltu	r2,r3,2001b94 <processing+0x9c>
 2001b5c:	e0fffc17 	ldw	r3,-16(fp)
 2001b60:	e0800217 	ldw	r2,8(fp)
 2001b64:	10c00b36 	bltu	r2,r3,2001b94 <processing+0x9c>
 2001b68:	e0fffc17 	ldw	r3,-16(fp)
 2001b6c:	e0800317 	ldw	r2,12(fp)
 2001b70:	10c00836 	bltu	r2,r3,2001b94 <processing+0x9c>
		sDATA.ulServoPWM_C = 2703;
 2001b74:	00c08074 	movhi	r3,513
 2001b78:	18ed8004 	addi	r3,r3,-18944
 2001b7c:	0082a3c4 	movi	r2,2703
 2001b80:	18800015 	stw	r2,0(r3)
		sDATA.ulThrottlePWM_C = 2531;
 2001b84:	00c08074 	movhi	r3,513
 2001b88:	18ed8004 	addi	r3,r3,-18944
 2001b8c:	008278c4 	movi	r2,2531
 2001b90:	18800815 	stw	r2,32(r3)
	}
	if (b <= a && b <= c && b <= d && b <= e && b <= f && b <= g){//[a]--[b*]--[c]--[d]--[e]--[f]--[g]
 2001b94:	e0fffd17 	ldw	r3,-12(fp)
 2001b98:	e0bffc17 	ldw	r2,-16(fp)
 2001b9c:	10c01736 	bltu	r2,r3,2001bfc <processing+0x104>
 2001ba0:	e0fffd17 	ldw	r3,-12(fp)
 2001ba4:	e0bffe17 	ldw	r2,-8(fp)
 2001ba8:	10c01436 	bltu	r2,r3,2001bfc <processing+0x104>
 2001bac:	e0fffd17 	ldw	r3,-12(fp)
 2001bb0:	e0bfff17 	ldw	r2,-4(fp)
 2001bb4:	10c01136 	bltu	r2,r3,2001bfc <processing+0x104>
 2001bb8:	e0fffd17 	ldw	r3,-12(fp)
 2001bbc:	e0800117 	ldw	r2,4(fp)
 2001bc0:	10c00e36 	bltu	r2,r3,2001bfc <processing+0x104>
 2001bc4:	e0fffd17 	ldw	r3,-12(fp)
 2001bc8:	e0800217 	ldw	r2,8(fp)
 2001bcc:	10c00b36 	bltu	r2,r3,2001bfc <processing+0x104>
 2001bd0:	e0fffd17 	ldw	r3,-12(fp)
 2001bd4:	e0800317 	ldw	r2,12(fp)
 2001bd8:	10c00836 	bltu	r2,r3,2001bfc <processing+0x104>
		sDATA.ulServoPWM_C = 2533;
 2001bdc:	00c08074 	movhi	r3,513
 2001be0:	18ed8004 	addi	r3,r3,-18944
 2001be4:	00827944 	movi	r2,2533
 2001be8:	18800015 	stw	r2,0(r3)
		sDATA.ulThrottlePWM_C = 2533;
 2001bec:	00c08074 	movhi	r3,513
 2001bf0:	18ed8004 	addi	r3,r3,-18944
 2001bf4:	00827944 	movi	r2,2533
 2001bf8:	18800815 	stw	r2,32(r3)
	}
	if (c <= a && c <= b && c <= d && c <= e && c <= f && c <= g){//[a]--[b]--[c*]--[d]--[e]--[f]--[g]
 2001bfc:	e0fffe17 	ldw	r3,-8(fp)
 2001c00:	e0bffc17 	ldw	r2,-16(fp)
 2001c04:	10c01736 	bltu	r2,r3,2001c64 <processing+0x16c>
 2001c08:	e0fffe17 	ldw	r3,-8(fp)
 2001c0c:	e0bffd17 	ldw	r2,-12(fp)
 2001c10:	10c01436 	bltu	r2,r3,2001c64 <processing+0x16c>
 2001c14:	e0fffe17 	ldw	r3,-8(fp)
 2001c18:	e0bfff17 	ldw	r2,-4(fp)
 2001c1c:	10c01136 	bltu	r2,r3,2001c64 <processing+0x16c>
 2001c20:	e0fffe17 	ldw	r3,-8(fp)
 2001c24:	e0800117 	ldw	r2,4(fp)
 2001c28:	10c00e36 	bltu	r2,r3,2001c64 <processing+0x16c>
 2001c2c:	e0fffe17 	ldw	r3,-8(fp)
 2001c30:	e0800217 	ldw	r2,8(fp)
 2001c34:	10c00b36 	bltu	r2,r3,2001c64 <processing+0x16c>
 2001c38:	e0fffe17 	ldw	r3,-8(fp)
 2001c3c:	e0800317 	ldw	r2,12(fp)
 2001c40:	10c00836 	bltu	r2,r3,2001c64 <processing+0x16c>
		sDATA.ulServoPWM_C = 2539;
 2001c44:	00c08074 	movhi	r3,513
 2001c48:	18ed8004 	addi	r3,r3,-18944
 2001c4c:	00827ac4 	movi	r2,2539
 2001c50:	18800015 	stw	r2,0(r3)
		sDATA.ulThrottlePWM_C = 2535;
 2001c54:	00c08074 	movhi	r3,513
 2001c58:	18ed8004 	addi	r3,r3,-18944
 2001c5c:	008279c4 	movi	r2,2535
 2001c60:	18800815 	stw	r2,32(r3)
	}
	if (d <= a && d <= b && d <= c && d <= e && d <= f && d <= g){//[a]--[b]--[c]--[d*]--[e]--[f]--[g]
 2001c64:	e0ffff17 	ldw	r3,-4(fp)
 2001c68:	e0bffc17 	ldw	r2,-16(fp)
 2001c6c:	10c01736 	bltu	r2,r3,2001ccc <processing+0x1d4>
 2001c70:	e0ffff17 	ldw	r3,-4(fp)
 2001c74:	e0bffd17 	ldw	r2,-12(fp)
 2001c78:	10c01436 	bltu	r2,r3,2001ccc <processing+0x1d4>
 2001c7c:	e0ffff17 	ldw	r3,-4(fp)
 2001c80:	e0bffe17 	ldw	r2,-8(fp)
 2001c84:	10c01136 	bltu	r2,r3,2001ccc <processing+0x1d4>
 2001c88:	e0ffff17 	ldw	r3,-4(fp)
 2001c8c:	e0800117 	ldw	r2,4(fp)
 2001c90:	10c00e36 	bltu	r2,r3,2001ccc <processing+0x1d4>
 2001c94:	e0ffff17 	ldw	r3,-4(fp)
 2001c98:	e0800217 	ldw	r2,8(fp)
 2001c9c:	10c00b36 	bltu	r2,r3,2001ccc <processing+0x1d4>
 2001ca0:	e0ffff17 	ldw	r3,-4(fp)
 2001ca4:	e0800317 	ldw	r2,12(fp)
 2001ca8:	10c00836 	bltu	r2,r3,2001ccc <processing+0x1d4>
		sDATA.ulServoPWM_C = 2457;
 2001cac:	00c08074 	movhi	r3,513
 2001cb0:	18ed8004 	addi	r3,r3,-18944
 2001cb4:	00826644 	movi	r2,2457
 2001cb8:	18800015 	stw	r2,0(r3)
		sDATA.ulThrottlePWM_C = 2537;
 2001cbc:	00c08074 	movhi	r3,513
 2001cc0:	18ed8004 	addi	r3,r3,-18944
 2001cc4:	00827a44 	movi	r2,2537
 2001cc8:	18800815 	stw	r2,32(r3)
	}
	if (e <= a && e <= b && e <= c && e <= d && e <= f && e <= g){//[a]--[b]--[c]--[d]--[e*]--[f]--[g]
 2001ccc:	e0c00117 	ldw	r3,4(fp)
 2001cd0:	e0bffc17 	ldw	r2,-16(fp)
 2001cd4:	10c01736 	bltu	r2,r3,2001d34 <processing+0x23c>
 2001cd8:	e0c00117 	ldw	r3,4(fp)
 2001cdc:	e0bffd17 	ldw	r2,-12(fp)
 2001ce0:	10c01436 	bltu	r2,r3,2001d34 <processing+0x23c>
 2001ce4:	e0c00117 	ldw	r3,4(fp)
 2001ce8:	e0bffe17 	ldw	r2,-8(fp)
 2001cec:	10c01136 	bltu	r2,r3,2001d34 <processing+0x23c>
 2001cf0:	e0c00117 	ldw	r3,4(fp)
 2001cf4:	e0bfff17 	ldw	r2,-4(fp)
 2001cf8:	10c00e36 	bltu	r2,r3,2001d34 <processing+0x23c>
 2001cfc:	e0c00117 	ldw	r3,4(fp)
 2001d00:	e0800217 	ldw	r2,8(fp)
 2001d04:	10c00b36 	bltu	r2,r3,2001d34 <processing+0x23c>
 2001d08:	e0c00117 	ldw	r3,4(fp)
 2001d0c:	e0800317 	ldw	r2,12(fp)
 2001d10:	10c00836 	bltu	r2,r3,2001d34 <processing+0x23c>
		sDATA.ulServoPWM_C = 2293;
 2001d14:	00c08074 	movhi	r3,513
 2001d18:	18ed8004 	addi	r3,r3,-18944
 2001d1c:	00823d44 	movi	r2,2293
 2001d20:	18800015 	stw	r2,0(r3)
		sDATA.ulThrottlePWM_C = 2535;
 2001d24:	00c08074 	movhi	r3,513
 2001d28:	18ed8004 	addi	r3,r3,-18944
 2001d2c:	008279c4 	movi	r2,2535
 2001d30:	18800815 	stw	r2,32(r3)
	}
	if (f <= a && f <= b && f <= c && f <= d && f <= e && f <= g){//[a]--[b]--[c]--[d]--[e]--[f*]--[g]
 2001d34:	e0c00217 	ldw	r3,8(fp)
 2001d38:	e0bffc17 	ldw	r2,-16(fp)
 2001d3c:	10c01736 	bltu	r2,r3,2001d9c <processing+0x2a4>
 2001d40:	e0c00217 	ldw	r3,8(fp)
 2001d44:	e0bffd17 	ldw	r2,-12(fp)
 2001d48:	10c01436 	bltu	r2,r3,2001d9c <processing+0x2a4>
 2001d4c:	e0c00217 	ldw	r3,8(fp)
 2001d50:	e0bffe17 	ldw	r2,-8(fp)
 2001d54:	10c01136 	bltu	r2,r3,2001d9c <processing+0x2a4>
 2001d58:	e0c00217 	ldw	r3,8(fp)
 2001d5c:	e0bfff17 	ldw	r2,-4(fp)
 2001d60:	10c00e36 	bltu	r2,r3,2001d9c <processing+0x2a4>
 2001d64:	e0c00217 	ldw	r3,8(fp)
 2001d68:	e0800117 	ldw	r2,4(fp)
 2001d6c:	10c00b36 	bltu	r2,r3,2001d9c <processing+0x2a4>
 2001d70:	e0c00217 	ldw	r3,8(fp)
 2001d74:	e0800317 	ldw	r2,12(fp)
 2001d78:	10c00836 	bltu	r2,r3,2001d9c <processing+0x2a4>
		sDATA.ulServoPWM_C = 2129;
 2001d7c:	00c08074 	movhi	r3,513
 2001d80:	18ed8004 	addi	r3,r3,-18944
 2001d84:	00821444 	movi	r2,2129
 2001d88:	18800015 	stw	r2,0(r3)
		sDATA.ulThrottlePWM_C = 2533;
 2001d8c:	00c08074 	movhi	r3,513
 2001d90:	18ed8004 	addi	r3,r3,-18944
 2001d94:	00827944 	movi	r2,2533
 2001d98:	18800815 	stw	r2,32(r3)
	}
	if (g <= a && g <= b && g <= c && g <= d && g <= e && g <= f){//[a]--[b]--[c]--[d]--[e]--[f]--[g*]
 2001d9c:	e0c00317 	ldw	r3,12(fp)
 2001da0:	e0bffc17 	ldw	r2,-16(fp)
 2001da4:	10c01736 	bltu	r2,r3,2001e04 <processing+0x30c>
 2001da8:	e0c00317 	ldw	r3,12(fp)
 2001dac:	e0bffd17 	ldw	r2,-12(fp)
 2001db0:	10c01436 	bltu	r2,r3,2001e04 <processing+0x30c>
 2001db4:	e0c00317 	ldw	r3,12(fp)
 2001db8:	e0bffe17 	ldw	r2,-8(fp)
 2001dbc:	10c01136 	bltu	r2,r3,2001e04 <processing+0x30c>
 2001dc0:	e0c00317 	ldw	r3,12(fp)
 2001dc4:	e0bfff17 	ldw	r2,-4(fp)
 2001dc8:	10c00e36 	bltu	r2,r3,2001e04 <processing+0x30c>
 2001dcc:	e0c00317 	ldw	r3,12(fp)
 2001dd0:	e0800117 	ldw	r2,4(fp)
 2001dd4:	10c00b36 	bltu	r2,r3,2001e04 <processing+0x30c>
 2001dd8:	e0c00317 	ldw	r3,12(fp)
 2001ddc:	e0800217 	ldw	r2,8(fp)
 2001de0:	10c00836 	bltu	r2,r3,2001e04 <processing+0x30c>
		sDATA.ulServoPWM_C = 1966;
 2001de4:	00c08074 	movhi	r3,513
 2001de8:	18ed8004 	addi	r3,r3,-18944
 2001dec:	0081eb84 	movi	r2,1966
 2001df0:	18800015 	stw	r2,0(r3)
		sDATA.ulThrottlePWM_C = 2531;
 2001df4:	00c08074 	movhi	r3,513
 2001df8:	18ed8004 	addi	r3,r3,-18944
 2001dfc:	008278c4 	movi	r2,2531
 2001e00:	18800815 	stw	r2,32(r3)
	}

}
 2001e04:	e037883a 	mov	sp,fp
 2001e08:	df000017 	ldw	fp,0(sp)
 2001e0c:	dec00104 	addi	sp,sp,4
 2001e10:	f800283a 	ret

02001e14 <filter>:


alt_u32 filter(alt_u32 raw_value, alt_u32 filtered_value)
{
 2001e14:	defffb04 	addi	sp,sp,-20
 2001e18:	df000415 	stw	fp,16(sp)
 2001e1c:	df000404 	addi	fp,sp,16
 2001e20:	e13ffd15 	stw	r4,-12(fp)
 2001e24:	e17ffe15 	stw	r5,-8(fp)
	alt_u32 difference;
	difference = raw_value - filtered_value;
 2001e28:	e0fffd17 	ldw	r3,-12(fp)
 2001e2c:	e0bffe17 	ldw	r2,-8(fp)
 2001e30:	1885c83a 	sub	r2,r3,r2
 2001e34:	e0bffc15 	stw	r2,-16(fp)
	//check if difference of raw to filtered value is positive,
	//if positive return positive copy if negative return negative copy
	//then check if the copy is greater than 50, if greater than 50 use raw value
	// if less than 50 use filtered value
	return ((difference > 0 ? difference : -difference) > 50) ? raw_value : filtered_value;
 2001e38:	e0bffc17 	ldw	r2,-16(fp)
 2001e3c:	10800cf0 	cmpltui	r2,r2,51
 2001e40:	1000031e 	bne	r2,zero,2001e50 <filter+0x3c>
 2001e44:	e0bffd17 	ldw	r2,-12(fp)
 2001e48:	e0bfff15 	stw	r2,-4(fp)
 2001e4c:	00000206 	br	2001e58 <filter+0x44>
 2001e50:	e0bffe17 	ldw	r2,-8(fp)
 2001e54:	e0bfff15 	stw	r2,-4(fp)
 2001e58:	e0bfff17 	ldw	r2,-4(fp)
}
 2001e5c:	e037883a 	mov	sp,fp
 2001e60:	df000017 	ldw	fp,0(sp)
 2001e64:	dec00104 	addi	sp,sp,4
 2001e68:	f800283a 	ret

02001e6c <vSetServoPWM>:


void vSetServoPWM(alt_u32 ulPwmValue)
{
 2001e6c:	defffc04 	addi	sp,sp,-16
 2001e70:	df000315 	stw	fp,12(sp)
 2001e74:	df000304 	addi	fp,sp,12
 2001e78:	e13fff15 	stw	r4,-4(fp)
	//want a 1ms minimum pulse width: 1ms/20ms=0.05 then 4095*0.05=204.75
	//PWM_Steering = 307 for 1.5ms pulse width
	//note: might want to increase the resolution to 32 bits later

	//set servo only if within range of servo travel limits
	if((sDATA.ulServoMin <= ulPwmValue) && (ulPwmValue <= sDATA.ulServoMax))
 2001e7c:	00808074 	movhi	r2,513
 2001e80:	10ad8004 	addi	r2,r2,-18944
 2001e84:	10c00217 	ldw	r3,8(r2)
 2001e88:	e0bfff17 	ldw	r2,-4(fp)
 2001e8c:	10c02836 	bltu	r2,r3,2001f30 <vSetServoPWM+0xc4>
 2001e90:	00808074 	movhi	r2,513
 2001e94:	10ad8004 	addi	r2,r2,-18944
 2001e98:	10c00317 	ldw	r3,12(r2)
 2001e9c:	e0bfff17 	ldw	r2,-4(fp)
 2001ea0:	18802336 	bltu	r3,r2,2001f30 <vSetServoPWM+0xc4>
	{


	new_value = ulPwmValue; //new value to bring steering servo up/down to.
 2001ea4:	e0bfff17 	ldw	r2,-4(fp)
 2001ea8:	e0bffe15 	stw	r2,-8(fp)

	old_value = sDATA.ulServoPWM_O;//present value becomes old_value value
 2001eac:	00808074 	movhi	r2,513
 2001eb0:	10ad8004 	addi	r2,r2,-18944
 2001eb4:	10800117 	ldw	r2,4(r2)
 2001eb8:	e0bffd15 	stw	r2,-12(fp)

	//gradually change from old value to new value
	//gradually in this case meaning the change will be pretty quick
	if (new_value > old_value)
 2001ebc:	e0fffe17 	ldw	r3,-8(fp)
 2001ec0:	e0bffd17 	ldw	r2,-12(fp)
 2001ec4:	10c00c2e 	bgeu	r2,r3,2001ef8 <vSetServoPWM+0x8c>
	{
		//ramp the old_value value up to the new value
		while(new_value != old_value)
 2001ec8:	00000706 	br	2001ee8 <vSetServoPWM+0x7c>
		{
			old_value++;
 2001ecc:	e0bffd17 	ldw	r2,-12(fp)
 2001ed0:	10800044 	addi	r2,r2,1
 2001ed4:	e0bffd15 	stw	r2,-12(fp)
			IOWR_32DIRECT(SLAVE_TEMPLATE_0_BASE, (DATA_OUT_14 * 4), (alt_u32)old_value);//PWM_Steering
 2001ed8:	e0fffd17 	ldw	r3,-12(fp)
 2001edc:	00810034 	movhi	r2,1024
 2001ee0:	108ce104 	addi	r2,r2,13188
 2001ee4:	10c00035 	stwio	r3,0(r2)
	//gradually change from old value to new value
	//gradually in this case meaning the change will be pretty quick
	if (new_value > old_value)
	{
		//ramp the old_value value up to the new value
		while(new_value != old_value)
 2001ee8:	e0fffe17 	ldw	r3,-8(fp)
 2001eec:	e0bffd17 	ldw	r2,-12(fp)
 2001ef0:	18bff61e 	bne	r3,r2,2001ecc <vSetServoPWM+0x60>
 2001ef4:	00000e06 	br	2001f30 <vSetServoPWM+0xc4>
			old_value++;
			IOWR_32DIRECT(SLAVE_TEMPLATE_0_BASE, (DATA_OUT_14 * 4), (alt_u32)old_value);//PWM_Steering

		}
	}
	else if(new_value < old_value)
 2001ef8:	e0fffe17 	ldw	r3,-8(fp)
 2001efc:	e0bffd17 	ldw	r2,-12(fp)
 2001f00:	18800b2e 	bgeu	r3,r2,2001f30 <vSetServoPWM+0xc4>
	{
		// ramp the old value down to the new value
		while(new_value != old_value)
 2001f04:	00000706 	br	2001f24 <vSetServoPWM+0xb8>
		{	old_value--;
 2001f08:	e0bffd17 	ldw	r2,-12(fp)
 2001f0c:	10bfffc4 	addi	r2,r2,-1
 2001f10:	e0bffd15 	stw	r2,-12(fp)
			IOWR_32DIRECT(SLAVE_TEMPLATE_0_BASE, (DATA_OUT_14 * 4), (alt_u32)old_value);//PWM_Steering
 2001f14:	e0fffd17 	ldw	r3,-12(fp)
 2001f18:	00810034 	movhi	r2,1024
 2001f1c:	108ce104 	addi	r2,r2,13188
 2001f20:	10c00035 	stwio	r3,0(r2)
		}
	}
	else if(new_value < old_value)
	{
		// ramp the old value down to the new value
		while(new_value != old_value)
 2001f24:	e0fffe17 	ldw	r3,-8(fp)
 2001f28:	e0bffd17 	ldw	r2,-12(fp)
 2001f2c:	18bff61e 	bne	r3,r2,2001f08 <vSetServoPWM+0x9c>

	//value change complete
	//sDATA.ulServoPWM_C = new_value;//update ram copy of present servo value

	}
}
 2001f30:	e037883a 	mov	sp,fp
 2001f34:	df000017 	ldw	fp,0(sp)
 2001f38:	dec00104 	addi	sp,sp,4
 2001f3c:	f800283a 	ret

02001f40 <vSetThrottle>:

void vSetThrottle(alt_u32 ulPwmValue)
{
 2001f40:	defffe04 	addi	sp,sp,-8
 2001f44:	df000115 	stw	fp,4(sp)
 2001f48:	df000104 	addi	fp,sp,4
 2001f4c:	e13fff15 	stw	r4,-4(fp)
	//note: might want to increase the resolution to 32 bits later

	//set throttle only if within range of throttle travel limits
	//if((sDATA.ulThrottleMin <= ulPwmValue) && (ulPwmValue <= sDATA.ulThrottleMax))
	//{
	sDATA.ulThrottlePWM_C = ulPwmValue;
 2001f50:	00c08074 	movhi	r3,513
 2001f54:	18ed8004 	addi	r3,r3,-18944
 2001f58:	e0bfff17 	ldw	r2,-4(fp)
 2001f5c:	18800815 	stw	r2,32(r3)
	IOWR_32DIRECT(SLAVE_TEMPLATE_0_BASE, (DATA_OUT_15 * 4), (alt_u32)sDATA.ulThrottlePWM_C);//PWM_Steering
 2001f60:	00808074 	movhi	r2,513
 2001f64:	10ad8004 	addi	r2,r2,-18944
 2001f68:	10800817 	ldw	r2,32(r2)
 2001f6c:	1007883a 	mov	r3,r2
 2001f70:	00810034 	movhi	r2,1024
 2001f74:	108cf104 	addi	r2,r2,13252
 2001f78:	10c00035 	stwio	r3,0(r2)
	//}
}
 2001f7c:	e037883a 	mov	sp,fp
 2001f80:	df000017 	ldw	fp,0(sp)
 2001f84:	dec00104 	addi	sp,sp,4
 2001f88:	f800283a 	ret

02001f8c <vEchoChar>:
 * @brief 	Echo the "legal" command line key that was entered
 * @note 	Accumulated value is reset
 * @param 	[in] ubChar Character value
 */
void vEchoChar(alt_u8 ubChar)
{
 2001f8c:	defffd04 	addi	sp,sp,-12
 2001f90:	dfc00215 	stw	ra,8(sp)
 2001f94:	df000115 	stw	fp,4(sp)
 2001f98:	df000104 	addi	fp,sp,4
 2001f9c:	e13fff05 	stb	r4,-4(fp)
	vCursor(2,1);
 2001fa0:	01000084 	movi	r4,2
 2001fa4:	01400044 	movi	r5,1
 2001fa8:	20006f80 	call	20006f8 <vCursor>
	vPutChar(ubChar);
 2001fac:	e13fff03 	ldbu	r4,-4(fp)
 2001fb0:	20006680 	call	2000668 <vPutChar>

	sSUI.ulAccumulate = 0;				// Init the accumulated value
 2001fb4:	00808074 	movhi	r2,513
 2001fb8:	10ad7704 	addi	r2,r2,-18980
 2001fbc:	10000115 	stw	zero,4(r2)
	sSUI.ubCount = 0;
 2001fc0:	00808074 	movhi	r2,513
 2001fc4:	10ad7704 	addi	r2,r2,-18980
 2001fc8:	1000008d 	sth	zero,2(r2)
}
 2001fcc:	e037883a 	mov	sp,fp
 2001fd0:	dfc00117 	ldw	ra,4(sp)
 2001fd4:	df000017 	ldw	fp,0(sp)
 2001fd8:	dec00204 	addi	sp,sp,8
 2001fdc:	f800283a 	ret

02001fe0 <vEraseCommand>:
/*!
 * @brief Erase any command line characters
 *
 */
void vEraseCommand(void)
{
 2001fe0:	defffe04 	addi	sp,sp,-8
 2001fe4:	dfc00115 	stw	ra,4(sp)
 2001fe8:	df000015 	stw	fp,0(sp)
 2001fec:	d839883a 	mov	fp,sp
	vPrintTxt(2, 1, 80, "                                                                                ");
 2001ff0:	01000084 	movi	r4,2
 2001ff4:	01400044 	movi	r5,1
 2001ff8:	01801404 	movi	r6,80
 2001ffc:	01c08074 	movhi	r7,513
 2002000:	39e6d504 	addi	r7,r7,-25772
 2002004:	20007fc0 	call	20007fc <vPrintTxt>
}
 2002008:	e037883a 	mov	sp,fp
 200200c:	dfc00117 	ldw	ra,4(sp)
 2002010:	df000017 	ldw	fp,0(sp)
 2002014:	dec00204 	addi	sp,sp,8
 2002018:	f800283a 	ret

0200201c <pow>:
 200201c:	deffee04 	addi	sp,sp,-72
 2002020:	ddc01015 	stw	r23,64(sp)
 2002024:	05c08074 	movhi	r23,513
 2002028:	bded6a04 	addi	r23,r23,-19032
 200202c:	dd800f15 	stw	r22,60(sp)
 2002030:	dd400e15 	stw	r21,56(sp)
 2002034:	dd000d15 	stw	r20,52(sp)
 2002038:	dcc00c15 	stw	r19,48(sp)
 200203c:	dc800b15 	stw	r18,44(sp)
 2002040:	dc400a15 	stw	r17,40(sp)
 2002044:	dc000915 	stw	r16,36(sp)
 2002048:	2029883a 	mov	r20,r4
 200204c:	dfc01115 	stw	ra,68(sp)
 2002050:	3025883a 	mov	r18,r6
 2002054:	282b883a 	mov	r21,r5
 2002058:	3827883a 	mov	r19,r7
 200205c:	20024a40 	call	20024a4 <__ieee754_pow>
 2002060:	b9000017 	ldw	r4,0(r23)
 2002064:	05bfffc4 	movi	r22,-1
 2002068:	1021883a 	mov	r16,r2
 200206c:	1823883a 	mov	r17,r3
 2002070:	25800426 	beq	r4,r22,2002084 <pow+0x68>
 2002074:	9009883a 	mov	r4,r18
 2002078:	980b883a 	mov	r5,r19
 200207c:	2003aa00 	call	2003aa0 <__isnand>
 2002080:	10000d26 	beq	r2,zero,20020b8 <pow+0x9c>
 2002084:	8005883a 	mov	r2,r16
 2002088:	8807883a 	mov	r3,r17
 200208c:	dfc01117 	ldw	ra,68(sp)
 2002090:	ddc01017 	ldw	r23,64(sp)
 2002094:	dd800f17 	ldw	r22,60(sp)
 2002098:	dd400e17 	ldw	r21,56(sp)
 200209c:	dd000d17 	ldw	r20,52(sp)
 20020a0:	dcc00c17 	ldw	r19,48(sp)
 20020a4:	dc800b17 	ldw	r18,44(sp)
 20020a8:	dc400a17 	ldw	r17,40(sp)
 20020ac:	dc000917 	ldw	r16,36(sp)
 20020b0:	dec01204 	addi	sp,sp,72
 20020b4:	f800283a 	ret
 20020b8:	a009883a 	mov	r4,r20
 20020bc:	a80b883a 	mov	r5,r21
 20020c0:	2003aa00 	call	2003aa0 <__isnand>
 20020c4:	1000151e 	bne	r2,zero,200211c <pow+0x100>
 20020c8:	000d883a 	mov	r6,zero
 20020cc:	000f883a 	mov	r7,zero
 20020d0:	a009883a 	mov	r4,r20
 20020d4:	a80b883a 	mov	r5,r21
 20020d8:	2004a1c0 	call	2004a1c <__eqdf2>
 20020dc:	1000541e 	bne	r2,zero,2002230 <pow+0x214>
 20020e0:	000d883a 	mov	r6,zero
 20020e4:	000f883a 	mov	r7,zero
 20020e8:	9009883a 	mov	r4,r18
 20020ec:	980b883a 	mov	r5,r19
 20020f0:	2004a1c0 	call	2004a1c <__eqdf2>
 20020f4:	10002c1e 	bne	r2,zero,20021a8 <pow+0x18c>
 20020f8:	b8800017 	ldw	r2,0(r23)
 20020fc:	d8000615 	stw	zero,24(sp)
 2002100:	d8000715 	stw	zero,28(sp)
 2002104:	10001226 	beq	r2,zero,2002150 <pow+0x134>
 2002108:	008ffc34 	movhi	r2,16368
 200210c:	d8800715 	stw	r2,28(sp)
 2002110:	dc000617 	ldw	r16,24(sp)
 2002114:	dc400717 	ldw	r17,28(sp)
 2002118:	003fda06 	br	2002084 <pow+0x68>
 200211c:	000d883a 	mov	r6,zero
 2002120:	000f883a 	mov	r7,zero
 2002124:	9009883a 	mov	r4,r18
 2002128:	980b883a 	mov	r5,r19
 200212c:	2004a1c0 	call	2004a1c <__eqdf2>
 2002130:	103fd41e 	bne	r2,zero,2002084 <pow+0x68>
 2002134:	b8c00017 	ldw	r3,0(r23)
 2002138:	010ffc34 	movhi	r4,16368
 200213c:	d8000615 	stw	zero,24(sp)
 2002140:	d9000715 	stw	r4,28(sp)
 2002144:	1d801526 	beq	r3,r22,200219c <pow+0x180>
 2002148:	00800084 	movi	r2,2
 200214c:	18801326 	beq	r3,r2,200219c <pow+0x180>
 2002150:	00808074 	movhi	r2,513
 2002154:	10a6ea04 	addi	r2,r2,-25688
 2002158:	00c00044 	movi	r3,1
 200215c:	d809883a 	mov	r4,sp
 2002160:	dcc00515 	stw	r19,20(sp)
 2002164:	dd400315 	stw	r21,12(sp)
 2002168:	d8800115 	stw	r2,4(sp)
 200216c:	d8c00015 	stw	r3,0(sp)
 2002170:	dc800415 	stw	r18,16(sp)
 2002174:	dd000215 	stw	r20,8(sp)
 2002178:	d8000815 	stw	zero,32(sp)
 200217c:	2003ad00 	call	2003ad0 <matherr>
 2002180:	10002726 	beq	r2,zero,2002220 <pow+0x204>
 2002184:	d8800817 	ldw	r2,32(sp)
 2002188:	103fe126 	beq	r2,zero,2002110 <pow+0xf4>
 200218c:	20057a00 	call	20057a0 <__errno>
 2002190:	d8c00817 	ldw	r3,32(sp)
 2002194:	10c00015 	stw	r3,0(r2)
 2002198:	003fdd06 	br	2002110 <pow+0xf4>
 200219c:	d9000715 	stw	r4,28(sp)
 20021a0:	d8000615 	stw	zero,24(sp)
 20021a4:	003fda06 	br	2002110 <pow+0xf4>
 20021a8:	9009883a 	mov	r4,r18
 20021ac:	980b883a 	mov	r5,r19
 20021b0:	2003a840 	call	2003a84 <finite>
 20021b4:	103fb326 	beq	r2,zero,2002084 <pow+0x68>
 20021b8:	000d883a 	mov	r6,zero
 20021bc:	000f883a 	mov	r7,zero
 20021c0:	9009883a 	mov	r4,r18
 20021c4:	980b883a 	mov	r5,r19
 20021c8:	2004bb40 	call	2004bb4 <__ltdf2>
 20021cc:	103fad0e 	bge	r2,zero,2002084 <pow+0x68>
 20021d0:	b9000017 	ldw	r4,0(r23)
 20021d4:	00800044 	movi	r2,1
 20021d8:	00c08074 	movhi	r3,513
 20021dc:	18e6ea04 	addi	r3,r3,-25688
 20021e0:	d8800015 	stw	r2,0(sp)
 20021e4:	d8c00115 	stw	r3,4(sp)
 20021e8:	dd400315 	stw	r21,12(sp)
 20021ec:	dcc00515 	stw	r19,20(sp)
 20021f0:	d8000815 	stw	zero,32(sp)
 20021f4:	dd000215 	stw	r20,8(sp)
 20021f8:	dc800415 	stw	r18,16(sp)
 20021fc:	20005626 	beq	r4,zero,2002358 <pow+0x33c>
 2002200:	00bffc34 	movhi	r2,65520
 2002204:	d8800715 	stw	r2,28(sp)
 2002208:	00800084 	movi	r2,2
 200220c:	d8000615 	stw	zero,24(sp)
 2002210:	20800326 	beq	r4,r2,2002220 <pow+0x204>
 2002214:	d809883a 	mov	r4,sp
 2002218:	2003ad00 	call	2003ad0 <matherr>
 200221c:	103fd91e 	bne	r2,zero,2002184 <pow+0x168>
 2002220:	20057a00 	call	20057a0 <__errno>
 2002224:	00c00844 	movi	r3,33
 2002228:	10c00015 	stw	r3,0(r2)
 200222c:	003fd506 	br	2002184 <pow+0x168>
 2002230:	8009883a 	mov	r4,r16
 2002234:	880b883a 	mov	r5,r17
 2002238:	2003a840 	call	2003a84 <finite>
 200223c:	10002426 	beq	r2,zero,20022d0 <pow+0x2b4>
 2002240:	000d883a 	mov	r6,zero
 2002244:	000f883a 	mov	r7,zero
 2002248:	8009883a 	mov	r4,r16
 200224c:	880b883a 	mov	r5,r17
 2002250:	2004a1c0 	call	2004a1c <__eqdf2>
 2002254:	103f8b1e 	bne	r2,zero,2002084 <pow+0x68>
 2002258:	a009883a 	mov	r4,r20
 200225c:	a80b883a 	mov	r5,r21
 2002260:	2003a840 	call	2003a84 <finite>
 2002264:	103f8726 	beq	r2,zero,2002084 <pow+0x68>
 2002268:	9009883a 	mov	r4,r18
 200226c:	980b883a 	mov	r5,r19
 2002270:	2003a840 	call	2003a84 <finite>
 2002274:	103f8326 	beq	r2,zero,2002084 <pow+0x68>
 2002278:	b9000017 	ldw	r4,0(r23)
 200227c:	00800104 	movi	r2,4
 2002280:	d8800015 	stw	r2,0(sp)
 2002284:	00c08074 	movhi	r3,513
 2002288:	18e6ea04 	addi	r3,r3,-25688
 200228c:	00800084 	movi	r2,2
 2002290:	d8c00115 	stw	r3,4(sp)
 2002294:	dd400315 	stw	r21,12(sp)
 2002298:	dcc00515 	stw	r19,20(sp)
 200229c:	d8000815 	stw	zero,32(sp)
 20022a0:	dd000215 	stw	r20,8(sp)
 20022a4:	dc800415 	stw	r18,16(sp)
 20022a8:	d8000615 	stw	zero,24(sp)
 20022ac:	d8000715 	stw	zero,28(sp)
 20022b0:	20800326 	beq	r4,r2,20022c0 <pow+0x2a4>
 20022b4:	d809883a 	mov	r4,sp
 20022b8:	2003ad00 	call	2003ad0 <matherr>
 20022bc:	103fb11e 	bne	r2,zero,2002184 <pow+0x168>
 20022c0:	20057a00 	call	20057a0 <__errno>
 20022c4:	00c00884 	movi	r3,34
 20022c8:	10c00015 	stw	r3,0(r2)
 20022cc:	003fad06 	br	2002184 <pow+0x168>
 20022d0:	a009883a 	mov	r4,r20
 20022d4:	a80b883a 	mov	r5,r21
 20022d8:	2003a840 	call	2003a84 <finite>
 20022dc:	103fd826 	beq	r2,zero,2002240 <pow+0x224>
 20022e0:	9009883a 	mov	r4,r18
 20022e4:	980b883a 	mov	r5,r19
 20022e8:	2003a840 	call	2003a84 <finite>
 20022ec:	103fd426 	beq	r2,zero,2002240 <pow+0x224>
 20022f0:	880b883a 	mov	r5,r17
 20022f4:	8009883a 	mov	r4,r16
 20022f8:	2003aa00 	call	2003aa0 <__isnand>
 20022fc:	10001926 	beq	r2,zero,2002364 <pow+0x348>
 2002300:	bc000017 	ldw	r16,0(r23)
 2002304:	00800044 	movi	r2,1
 2002308:	00c08074 	movhi	r3,513
 200230c:	18e6ea04 	addi	r3,r3,-25688
 2002310:	d8800015 	stw	r2,0(sp)
 2002314:	d8c00115 	stw	r3,4(sp)
 2002318:	dd400315 	stw	r21,12(sp)
 200231c:	dcc00515 	stw	r19,20(sp)
 2002320:	d8000815 	stw	zero,32(sp)
 2002324:	dd000215 	stw	r20,8(sp)
 2002328:	dc800415 	stw	r18,16(sp)
 200232c:	80000a26 	beq	r16,zero,2002358 <pow+0x33c>
 2002330:	0009883a 	mov	r4,zero
 2002334:	000d883a 	mov	r6,zero
 2002338:	000b883a 	mov	r5,zero
 200233c:	000f883a 	mov	r7,zero
 2002340:	20047c40 	call	20047c4 <__divdf3>
 2002344:	d8800615 	stw	r2,24(sp)
 2002348:	00800084 	movi	r2,2
 200234c:	d8c00715 	stw	r3,28(sp)
 2002350:	80bfb01e 	bne	r16,r2,2002214 <pow+0x1f8>
 2002354:	003fb206 	br	2002220 <pow+0x204>
 2002358:	d8000615 	stw	zero,24(sp)
 200235c:	d8000715 	stw	zero,28(sp)
 2002360:	003fac06 	br	2002214 <pow+0x1f8>
 2002364:	b8800017 	ldw	r2,0(r23)
 2002368:	00c000c4 	movi	r3,3
 200236c:	01008074 	movhi	r4,513
 2002370:	2126ea04 	addi	r4,r4,-25688
 2002374:	d8c00015 	stw	r3,0(sp)
 2002378:	d9000115 	stw	r4,4(sp)
 200237c:	d8000815 	stw	zero,32(sp)
 2002380:	dd000215 	stw	r20,8(sp)
 2002384:	dd400315 	stw	r21,12(sp)
 2002388:	dc800415 	stw	r18,16(sp)
 200238c:	dcc00515 	stw	r19,20(sp)
 2002390:	1000251e 	bne	r2,zero,2002428 <pow+0x40c>
 2002394:	05b80034 	movhi	r22,57344
 2002398:	0091fc34 	movhi	r2,18416
 200239c:	10bfffc4 	addi	r2,r2,-1
 20023a0:	000d883a 	mov	r6,zero
 20023a4:	000f883a 	mov	r7,zero
 20023a8:	a80b883a 	mov	r5,r21
 20023ac:	a009883a 	mov	r4,r20
 20023b0:	d8800715 	stw	r2,28(sp)
 20023b4:	dd800615 	stw	r22,24(sp)
 20023b8:	2004bb40 	call	2004bb4 <__ltdf2>
 20023bc:	103fbd0e 	bge	r2,zero,20022b4 <pow+0x298>
 20023c0:	0005883a 	mov	r2,zero
 20023c4:	00cff834 	movhi	r3,16352
 20023c8:	180f883a 	mov	r7,r3
 20023cc:	100d883a 	mov	r6,r2
 20023d0:	980b883a 	mov	r5,r19
 20023d4:	9009883a 	mov	r4,r18
 20023d8:	20044000 	call	2004400 <__muldf3>
 20023dc:	1009883a 	mov	r4,r2
 20023e0:	180b883a 	mov	r5,r3
 20023e4:	1021883a 	mov	r16,r2
 20023e8:	1823883a 	mov	r17,r3
 20023ec:	2003ae80 	call	2003ae8 <rint>
 20023f0:	180f883a 	mov	r7,r3
 20023f4:	8009883a 	mov	r4,r16
 20023f8:	880b883a 	mov	r5,r17
 20023fc:	100d883a 	mov	r6,r2
 2002400:	2004aa40 	call	2004aa4 <__nedf2>
 2002404:	10000426 	beq	r2,zero,2002418 <pow+0x3fc>
 2002408:	00b1fc34 	movhi	r2,51184
 200240c:	10bfffc4 	addi	r2,r2,-1
 2002410:	dd800615 	stw	r22,24(sp)
 2002414:	d8800715 	stw	r2,28(sp)
 2002418:	b8c00017 	ldw	r3,0(r23)
 200241c:	00800084 	movi	r2,2
 2002420:	18bfa41e 	bne	r3,r2,20022b4 <pow+0x298>
 2002424:	003fa606 	br	20022c0 <pow+0x2a4>
 2002428:	009ffc34 	movhi	r2,32752
 200242c:	000d883a 	mov	r6,zero
 2002430:	000f883a 	mov	r7,zero
 2002434:	a80b883a 	mov	r5,r21
 2002438:	a009883a 	mov	r4,r20
 200243c:	d8800715 	stw	r2,28(sp)
 2002440:	d8000615 	stw	zero,24(sp)
 2002444:	2004bb40 	call	2004bb4 <__ltdf2>
 2002448:	103ff30e 	bge	r2,zero,2002418 <pow+0x3fc>
 200244c:	0005883a 	mov	r2,zero
 2002450:	00cff834 	movhi	r3,16352
 2002454:	180f883a 	mov	r7,r3
 2002458:	100d883a 	mov	r6,r2
 200245c:	980b883a 	mov	r5,r19
 2002460:	9009883a 	mov	r4,r18
 2002464:	20044000 	call	2004400 <__muldf3>
 2002468:	1009883a 	mov	r4,r2
 200246c:	180b883a 	mov	r5,r3
 2002470:	1021883a 	mov	r16,r2
 2002474:	1823883a 	mov	r17,r3
 2002478:	2003ae80 	call	2003ae8 <rint>
 200247c:	180f883a 	mov	r7,r3
 2002480:	8009883a 	mov	r4,r16
 2002484:	880b883a 	mov	r5,r17
 2002488:	100d883a 	mov	r6,r2
 200248c:	2004aa40 	call	2004aa4 <__nedf2>
 2002490:	103fe126 	beq	r2,zero,2002418 <pow+0x3fc>
 2002494:	00bffc34 	movhi	r2,65520
 2002498:	d8800715 	stw	r2,28(sp)
 200249c:	d8000615 	stw	zero,24(sp)
 20024a0:	003fdd06 	br	2002418 <pow+0x3fc>

020024a4 <__ieee754_pow>:
 20024a4:	deffbb04 	addi	sp,sp,-276
 20024a8:	3005883a 	mov	r2,r6
 20024ac:	dd404015 	stw	r21,256(sp)
 20024b0:	dd003f15 	stw	r20,252(sp)
 20024b4:	d9802815 	stw	r6,160(sp)
 20024b8:	2029883a 	mov	r20,r4
 20024bc:	282b883a 	mov	r21,r5
 20024c0:	3009883a 	mov	r4,r6
 20024c4:	380b883a 	mov	r5,r7
 20024c8:	01a00034 	movhi	r6,32768
 20024cc:	31bfffc4 	addi	r6,r6,-1
 20024d0:	dc003b15 	stw	r16,236(sp)
 20024d4:	29a0703a 	and	r16,r5,r6
 20024d8:	1404b03a 	or	r2,r2,r16
 20024dc:	dd804115 	stw	r22,260(sp)
 20024e0:	dc403c15 	stw	r17,240(sp)
 20024e4:	d9c02915 	stw	r7,164(sp)
 20024e8:	382d883a 	mov	r22,r7
 20024ec:	dfc04415 	stw	ra,272(sp)
 20024f0:	200f883a 	mov	r7,r4
 20024f4:	df004315 	stw	fp,268(sp)
 20024f8:	ddc04215 	stw	r23,264(sp)
 20024fc:	dcc03e15 	stw	r19,248(sp)
 2002500:	dc803d15 	stw	r18,244(sp)
 2002504:	a023883a 	mov	r17,r20
 2002508:	2809883a 	mov	r4,r5
 200250c:	10000826 	beq	r2,zero,2002530 <__ieee754_pow+0x8c>
 2002510:	a9a4703a 	and	r18,r21,r6
 2002514:	009ffc34 	movhi	r2,32752
 2002518:	a827883a 	mov	r19,r21
 200251c:	1480180e 	bge	r2,r18,2002580 <__ieee754_pow+0xdc>
 2002520:	00b00434 	movhi	r2,49168
 2002524:	9085883a 	add	r2,r18,r2
 2002528:	8884b03a 	or	r2,r17,r2
 200252c:	1000321e 	bne	r2,zero,20025f8 <__ieee754_pow+0x154>
 2002530:	0009883a 	mov	r4,zero
 2002534:	014ffc34 	movhi	r5,16368
 2002538:	d9002815 	stw	r4,160(sp)
 200253c:	d9402915 	stw	r5,164(sp)
 2002540:	d9002817 	ldw	r4,160(sp)
 2002544:	d9402917 	ldw	r5,164(sp)
 2002548:	2005883a 	mov	r2,r4
 200254c:	2807883a 	mov	r3,r5
 2002550:	dfc04417 	ldw	ra,272(sp)
 2002554:	df004317 	ldw	fp,268(sp)
 2002558:	ddc04217 	ldw	r23,264(sp)
 200255c:	dd804117 	ldw	r22,260(sp)
 2002560:	dd404017 	ldw	r21,256(sp)
 2002564:	dd003f17 	ldw	r20,252(sp)
 2002568:	dcc03e17 	ldw	r19,248(sp)
 200256c:	dc803d17 	ldw	r18,244(sp)
 2002570:	dc403c17 	ldw	r17,240(sp)
 2002574:	dc003b17 	ldw	r16,236(sp)
 2002578:	dec04504 	addi	sp,sp,276
 200257c:	f800283a 	ret
 2002580:	90802b26 	beq	r18,r2,2002630 <__ieee754_pow+0x18c>
 2002584:	143fe616 	blt	r2,r16,2002520 <__ieee754_pow+0x7c>
 2002588:	80806126 	beq	r16,r2,2002710 <__ieee754_pow+0x26c>
 200258c:	982e403a 	cmpge	r23,r19,zero
 2002590:	b8004e26 	beq	r23,zero,20026cc <__ieee754_pow+0x228>
 2002594:	0039883a 	mov	fp,zero
 2002598:	3800281e 	bne	r7,zero,200263c <__ieee754_pow+0x198>
 200259c:	009ffc34 	movhi	r2,32752
 20025a0:	80804f26 	beq	r16,r2,20026e0 <__ieee754_pow+0x23c>
 20025a4:	008ffc34 	movhi	r2,16368
 20025a8:	80808226 	beq	r16,r2,20027b4 <__ieee754_pow+0x310>
 20025ac:	00900034 	movhi	r2,16384
 20025b0:	20828426 	beq	r4,r2,2002fc4 <__ieee754_pow+0xb20>
 20025b4:	008ff834 	movhi	r2,16352
 20025b8:	2080201e 	bne	r4,r2,200263c <__ieee754_pow+0x198>
 20025bc:	98001f16 	blt	r19,zero,200263c <__ieee754_pow+0x198>
 20025c0:	a80b883a 	mov	r5,r21
 20025c4:	a009883a 	mov	r4,r20
 20025c8:	dfc04417 	ldw	ra,272(sp)
 20025cc:	df004317 	ldw	fp,268(sp)
 20025d0:	ddc04217 	ldw	r23,264(sp)
 20025d4:	dd804117 	ldw	r22,260(sp)
 20025d8:	dd404017 	ldw	r21,256(sp)
 20025dc:	dd003f17 	ldw	r20,252(sp)
 20025e0:	dcc03e17 	ldw	r19,248(sp)
 20025e4:	dc803d17 	ldw	r18,244(sp)
 20025e8:	dc403c17 	ldw	r17,240(sp)
 20025ec:	dc003b17 	ldw	r16,236(sp)
 20025f0:	dec04504 	addi	sp,sp,276
 20025f4:	20037a41 	jmpi	20037a4 <__ieee754_sqrt>
 20025f8:	01008074 	movhi	r4,513
 20025fc:	2126eb04 	addi	r4,r4,-25684
 2002600:	dfc04417 	ldw	ra,272(sp)
 2002604:	df004317 	ldw	fp,268(sp)
 2002608:	ddc04217 	ldw	r23,264(sp)
 200260c:	dd804117 	ldw	r22,260(sp)
 2002610:	dd404017 	ldw	r21,256(sp)
 2002614:	dd003f17 	ldw	r20,252(sp)
 2002618:	dcc03e17 	ldw	r19,248(sp)
 200261c:	dc803d17 	ldw	r18,244(sp)
 2002620:	dc403c17 	ldw	r17,240(sp)
 2002624:	dc003b17 	ldw	r16,236(sp)
 2002628:	dec04504 	addi	sp,sp,276
 200262c:	2003ad81 	jmpi	2003ad8 <nan>
 2002630:	a03fbb1e 	bne	r20,zero,2002520 <__ieee754_pow+0x7c>
 2002634:	003fd306 	br	2002584 <__ieee754_pow+0xe0>
 2002638:	0039883a 	mov	fp,zero
 200263c:	a009883a 	mov	r4,r20
 2002640:	a80b883a 	mov	r5,r21
 2002644:	2003a6c0 	call	2003a6c <fabs>
 2002648:	1015883a 	mov	r10,r2
 200264c:	1817883a 	mov	r11,r3
 2002650:	88001226 	beq	r17,zero,200269c <__ieee754_pow+0x1f8>
 2002654:	9804d7fa 	srli	r2,r19,31
 2002658:	10bfffc4 	addi	r2,r2,-1
 200265c:	1706b03a 	or	r3,r2,fp
 2002660:	d8802515 	stw	r2,148(sp)
 2002664:	18002c1e 	bne	r3,zero,2002718 <__ieee754_pow+0x274>
 2002668:	a80f883a 	mov	r7,r21
 200266c:	a009883a 	mov	r4,r20
 2002670:	a80b883a 	mov	r5,r21
 2002674:	a00d883a 	mov	r6,r20
 2002678:	200430c0 	call	200430c <__subdf3>
 200267c:	1009883a 	mov	r4,r2
 2002680:	180b883a 	mov	r5,r3
 2002684:	100d883a 	mov	r6,r2
 2002688:	180f883a 	mov	r7,r3
 200268c:	20047c40 	call	20047c4 <__divdf3>
 2002690:	d8802815 	stw	r2,160(sp)
 2002694:	d8c02915 	stw	r3,164(sp)
 2002698:	003fa906 	br	2002540 <__ieee754_pow+0x9c>
 200269c:	009ffc34 	movhi	r2,32752
 20026a0:	90800326 	beq	r18,r2,20026b0 <__ieee754_pow+0x20c>
 20026a4:	90000226 	beq	r18,zero,20026b0 <__ieee754_pow+0x20c>
 20026a8:	008ffc34 	movhi	r2,16368
 20026ac:	90bfe91e 	bne	r18,r2,2002654 <__ieee754_pow+0x1b0>
 20026b0:	b0026316 	blt	r22,zero,2003040 <__ieee754_pow+0xb9c>
 20026b4:	5011883a 	mov	r8,r10
 20026b8:	5813883a 	mov	r9,r11
 20026bc:	b8023126 	beq	r23,zero,2002f84 <__ieee754_pow+0xae0>
 20026c0:	da002815 	stw	r8,160(sp)
 20026c4:	da402915 	stw	r9,164(sp)
 20026c8:	003f9d06 	br	2002540 <__ieee754_pow+0x9c>
 20026cc:	0090d034 	movhi	r2,17216
 20026d0:	10bfffc4 	addi	r2,r2,-1
 20026d4:	1400270e 	bge	r2,r16,2002774 <__ieee754_pow+0x2d0>
 20026d8:	07000084 	movi	fp,2
 20026dc:	003fae06 	br	2002598 <__ieee754_pow+0xf4>
 20026e0:	00b00434 	movhi	r2,49168
 20026e4:	9085883a 	add	r2,r18,r2
 20026e8:	8884b03a 	or	r2,r17,r2
 20026ec:	103f9026 	beq	r2,zero,2002530 <__ieee754_pow+0x8c>
 20026f0:	008ffc34 	movhi	r2,16368
 20026f4:	10bfffc4 	addi	r2,r2,-1
 20026f8:	1482d00e 	bge	r2,r18,200323c <__ieee754_pow+0xd98>
 20026fc:	b03f900e 	bge	r22,zero,2002540 <__ieee754_pow+0x9c>
 2002700:	0005883a 	mov	r2,zero
 2002704:	d8802815 	stw	r2,160(sp)
 2002708:	d8802915 	stw	r2,164(sp)
 200270c:	003f8c06 	br	2002540 <__ieee754_pow+0x9c>
 2002710:	383f9e26 	beq	r7,zero,200258c <__ieee754_pow+0xe8>
 2002714:	003f8206 	br	2002520 <__ieee754_pow+0x7c>
 2002718:	00907834 	movhi	r2,16864
 200271c:	1400290e 	bge	r2,r16,20027c4 <__ieee754_pow+0x320>
 2002720:	0090fc34 	movhi	r2,17392
 2002724:	1402500e 	bge	r2,r16,2003068 <__ieee754_pow+0xbc4>
 2002728:	008ffc34 	movhi	r2,16368
 200272c:	10bfffc4 	addi	r2,r2,-1
 2002730:	14800b0e 	bge	r2,r18,2002760 <__ieee754_pow+0x2bc>
 2002734:	05800b0e 	bge	zero,r22,2002764 <__ieee754_pow+0x2c0>
 2002738:	00a20034 	movhi	r2,34816
 200273c:	109d6704 	addi	r2,r2,30108
 2002740:	00df8e34 	movhi	r3,32312
 2002744:	18f90f04 	addi	r3,r3,-7108
 2002748:	100d883a 	mov	r6,r2
 200274c:	180f883a 	mov	r7,r3
 2002750:	1009883a 	mov	r4,r2
 2002754:	180b883a 	mov	r5,r3
 2002758:	20044000 	call	2004400 <__muldf3>
 200275c:	003fcc06 	br	2002690 <__ieee754_pow+0x1ec>
 2002760:	b03ff516 	blt	r22,zero,2002738 <__ieee754_pow+0x294>
 2002764:	0007883a 	mov	r3,zero
 2002768:	d8c02815 	stw	r3,160(sp)
 200276c:	d8c02915 	stw	r3,164(sp)
 2002770:	003f7306 	br	2002540 <__ieee754_pow+0x9c>
 2002774:	008ffc34 	movhi	r2,16368
 2002778:	10bfffc4 	addi	r2,r2,-1
 200277c:	143f850e 	bge	r2,r16,2002594 <__ieee754_pow+0xf0>
 2002780:	8005d53a 	srai	r2,r16,20
 2002784:	01400504 	movi	r5,20
 2002788:	10ff0044 	addi	r3,r2,-1023
 200278c:	28c3e10e 	bge	r5,r3,2003714 <__ieee754_pow+0x1270>
 2002790:	00800d04 	movi	r2,52
 2002794:	10c5c83a 	sub	r2,r2,r3
 2002798:	3886d83a 	srl	r3,r7,r2
 200279c:	1884983a 	sll	r2,r3,r2
 20027a0:	38bf7c1e 	bne	r7,r2,2002594 <__ieee754_pow+0xf0>
 20027a4:	18c0004c 	andi	r3,r3,1
 20027a8:	00800084 	movi	r2,2
 20027ac:	10f9c83a 	sub	fp,r2,r3
 20027b0:	003f7906 	br	2002598 <__ieee754_pow+0xf4>
 20027b4:	b0038516 	blt	r22,zero,20035cc <__ieee754_pow+0x1128>
 20027b8:	dd002815 	stw	r20,160(sp)
 20027bc:	dd402915 	stw	r21,164(sp)
 20027c0:	003f5f06 	br	2002540 <__ieee754_pow+0x9c>
 20027c4:	00800434 	movhi	r2,16
 20027c8:	10bfffc4 	addi	r2,r2,-1
 20027cc:	1482900e 	bge	r2,r18,2003210 <__ieee754_pow+0xd6c>
 20027d0:	000b883a 	mov	r5,zero
 20027d4:	9005d53a 	srai	r2,r18,20
 20027d8:	00c00434 	movhi	r3,16
 20027dc:	18ffffc4 	addi	r3,r3,-1
 20027e0:	90c8703a 	and	r4,r18,r3
 20027e4:	2887883a 	add	r3,r5,r2
 20027e8:	18bf0044 	addi	r2,r3,-1023
 20027ec:	d8800015 	stw	r2,0(sp)
 20027f0:	00800134 	movhi	r2,4
 20027f4:	10a62384 	addi	r2,r2,-26482
 20027f8:	250ffc34 	orhi	r20,r4,16368
 20027fc:	1101ee0e 	bge	r2,r4,2002fb8 <__ieee754_pow+0xb14>
 2002800:	00800334 	movhi	r2,12
 2002804:	10ad9e44 	addi	r2,r2,-18823
 2002808:	1101e716 	blt	r2,r4,2002fa8 <__ieee754_pow+0xb04>
 200280c:	01000044 	movi	r4,1
 2002810:	04000334 	movhi	r16,12
 2002814:	200890fa 	slli	r4,r4,3
 2002818:	da800115 	stw	r10,4(sp)
 200281c:	dd000215 	stw	r20,8(sp)
 2002820:	d9002c15 	stw	r4,176(sp)
 2002824:	d9402c17 	ldw	r5,176(sp)
 2002828:	01008074 	movhi	r4,513
 200282c:	2126ec04 	addi	r4,r4,-25680
 2002830:	a02bd07a 	srai	r21,r20,1
 2002834:	2909883a 	add	r4,r5,r4
 2002838:	25800017 	ldw	r22,0(r4)
 200283c:	25c00117 	ldw	r23,4(r4)
 2002840:	a00b883a 	mov	r5,r20
 2002844:	5009883a 	mov	r4,r10
 2002848:	b00d883a 	mov	r6,r22
 200284c:	b80f883a 	mov	r7,r23
 2002850:	200430c0 	call	200430c <__subdf3>
 2002854:	d9000117 	ldw	r4,4(sp)
 2002858:	a00b883a 	mov	r5,r20
 200285c:	b00d883a 	mov	r6,r22
 2002860:	b80f883a 	mov	r7,r23
 2002864:	1025883a 	mov	r18,r2
 2002868:	1827883a 	mov	r19,r3
 200286c:	200438c0 	call	200438c <__adddf3>
 2002870:	0011883a 	mov	r8,zero
 2002874:	024ffc34 	movhi	r9,16368
 2002878:	480b883a 	mov	r5,r9
 200287c:	4009883a 	mov	r4,r8
 2002880:	180f883a 	mov	r7,r3
 2002884:	100d883a 	mov	r6,r2
 2002888:	20047c40 	call	20047c4 <__divdf3>
 200288c:	d8c02e15 	stw	r3,184(sp)
 2002890:	d8800f15 	stw	r2,60(sp)
 2002894:	d8802d15 	stw	r2,180(sp)
 2002898:	d8802e17 	ldw	r2,184(sp)
 200289c:	d9800f17 	ldw	r6,60(sp)
 20028a0:	9009883a 	mov	r4,r18
 20028a4:	980b883a 	mov	r5,r19
 20028a8:	100f883a 	mov	r7,r2
 20028ac:	dc800b15 	stw	r18,44(sp)
 20028b0:	dcc00c15 	stw	r19,48(sp)
 20028b4:	d8801015 	stw	r2,64(sp)
 20028b8:	20044000 	call	2004400 <__muldf3>
 20028bc:	d8c03015 	stw	r3,192(sp)
 20028c0:	d9003017 	ldw	r4,192(sp)
 20028c4:	d8802f15 	stw	r2,188(sp)
 20028c8:	d8800315 	stw	r2,12(sp)
 20028cc:	ad480034 	orhi	r21,r21,8192
 20028d0:	0005883a 	mov	r2,zero
 20028d4:	ac2b883a 	add	r21,r21,r16
 20028d8:	000b883a 	mov	r5,zero
 20028dc:	1021883a 	mov	r16,r2
 20028e0:	2005883a 	mov	r2,r4
 20028e4:	800d883a 	mov	r6,r16
 20028e8:	a80f883a 	mov	r7,r21
 20028ec:	d9000415 	stw	r4,16(sp)
 20028f0:	d9002715 	stw	r4,156(sp)
 20028f4:	d9402615 	stw	r5,152(sp)
 20028f8:	d9401615 	stw	r5,88(sp)
 20028fc:	d9001715 	stw	r4,92(sp)
 2002900:	100b883a 	mov	r5,r2
 2002904:	0009883a 	mov	r4,zero
 2002908:	20044000 	call	2004400 <__muldf3>
 200290c:	d9000b17 	ldw	r4,44(sp)
 2002910:	980b883a 	mov	r5,r19
 2002914:	180f883a 	mov	r7,r3
 2002918:	100d883a 	mov	r6,r2
 200291c:	200430c0 	call	200430c <__subdf3>
 2002920:	8009883a 	mov	r4,r16
 2002924:	a80b883a 	mov	r5,r21
 2002928:	b80f883a 	mov	r7,r23
 200292c:	b00d883a 	mov	r6,r22
 2002930:	1021883a 	mov	r16,r2
 2002934:	1823883a 	mov	r17,r3
 2002938:	200430c0 	call	200430c <__subdf3>
 200293c:	d9000117 	ldw	r4,4(sp)
 2002940:	a00b883a 	mov	r5,r20
 2002944:	180f883a 	mov	r7,r3
 2002948:	100d883a 	mov	r6,r2
 200294c:	200430c0 	call	200430c <__subdf3>
 2002950:	d9001617 	ldw	r4,88(sp)
 2002954:	d9402717 	ldw	r5,156(sp)
 2002958:	180f883a 	mov	r7,r3
 200295c:	100d883a 	mov	r6,r2
 2002960:	20044000 	call	2004400 <__muldf3>
 2002964:	180f883a 	mov	r7,r3
 2002968:	880b883a 	mov	r5,r17
 200296c:	8009883a 	mov	r4,r16
 2002970:	100d883a 	mov	r6,r2
 2002974:	200430c0 	call	200430c <__subdf3>
 2002978:	d9000f17 	ldw	r4,60(sp)
 200297c:	d9402e17 	ldw	r5,184(sp)
 2002980:	180f883a 	mov	r7,r3
 2002984:	100d883a 	mov	r6,r2
 2002988:	20044000 	call	2004400 <__muldf3>
 200298c:	d9000317 	ldw	r4,12(sp)
 2002990:	d9403017 	ldw	r5,192(sp)
 2002994:	d8803115 	stw	r2,196(sp)
 2002998:	200d883a 	mov	r6,r4
 200299c:	280f883a 	mov	r7,r5
 20029a0:	d8c03215 	stw	r3,200(sp)
 20029a4:	20044000 	call	2004400 <__muldf3>
 20029a8:	1009883a 	mov	r4,r2
 20029ac:	180b883a 	mov	r5,r3
 20029b0:	100d883a 	mov	r6,r2
 20029b4:	180f883a 	mov	r7,r3
 20029b8:	1021883a 	mov	r16,r2
 20029bc:	1823883a 	mov	r17,r3
 20029c0:	20044000 	call	2004400 <__muldf3>
 20029c4:	02129174 	movhi	r8,19013
 20029c8:	4213bbc4 	addi	r8,r8,20207
 20029cc:	024ff2b4 	movhi	r9,16330
 20029d0:	4a5f8a04 	addi	r9,r9,32296
 20029d4:	480f883a 	mov	r7,r9
 20029d8:	8009883a 	mov	r4,r16
 20029dc:	880b883a 	mov	r5,r17
 20029e0:	400d883a 	mov	r6,r8
 20029e4:	1029883a 	mov	r20,r2
 20029e8:	182b883a 	mov	r21,r3
 20029ec:	20044000 	call	2004400 <__muldf3>
 20029f0:	0224f2b4 	movhi	r8,37834
 20029f4:	4236d944 	addi	r8,r8,-9371
 20029f8:	024ff3b4 	movhi	r9,16334
 20029fc:	4a619284 	addi	r9,r9,-31158
 2002a00:	480f883a 	mov	r7,r9
 2002a04:	400d883a 	mov	r6,r8
 2002a08:	180b883a 	mov	r5,r3
 2002a0c:	1009883a 	mov	r4,r2
 2002a10:	200438c0 	call	200438c <__adddf3>
 2002a14:	180f883a 	mov	r7,r3
 2002a18:	8009883a 	mov	r4,r16
 2002a1c:	880b883a 	mov	r5,r17
 2002a20:	100d883a 	mov	r6,r2
 2002a24:	20044000 	call	2004400 <__muldf3>
 2002a28:	022a4774 	movhi	r8,43293
 2002a2c:	42104044 	addi	r8,r8,16641
 2002a30:	024ff474 	movhi	r9,16337
 2002a34:	4a5d1804 	addi	r9,r9,29792
 2002a38:	480f883a 	mov	r7,r9
 2002a3c:	400d883a 	mov	r6,r8
 2002a40:	180b883a 	mov	r5,r3
 2002a44:	1009883a 	mov	r4,r2
 2002a48:	200438c0 	call	200438c <__adddf3>
 2002a4c:	180f883a 	mov	r7,r3
 2002a50:	8009883a 	mov	r4,r16
 2002a54:	880b883a 	mov	r5,r17
 2002a58:	100d883a 	mov	r6,r2
 2002a5c:	20044000 	call	2004400 <__muldf3>
 2002a60:	021463f4 	movhi	r8,20879
 2002a64:	42099344 	addi	r8,r8,9805
 2002a68:	024ff574 	movhi	r9,16341
 2002a6c:	4a555544 	addi	r9,r9,21845
 2002a70:	480f883a 	mov	r7,r9
 2002a74:	400d883a 	mov	r6,r8
 2002a78:	180b883a 	mov	r5,r3
 2002a7c:	1009883a 	mov	r4,r2
 2002a80:	200438c0 	call	200438c <__adddf3>
 2002a84:	180f883a 	mov	r7,r3
 2002a88:	8009883a 	mov	r4,r16
 2002a8c:	880b883a 	mov	r5,r17
 2002a90:	100d883a 	mov	r6,r2
 2002a94:	20044000 	call	2004400 <__muldf3>
 2002a98:	0236dc34 	movhi	r8,56176
 2002a9c:	422affc4 	addi	r8,r8,-21505
 2002aa0:	024ff6f4 	movhi	r9,16347
 2002aa4:	4a5b6d84 	addi	r9,r9,28086
 2002aa8:	480f883a 	mov	r7,r9
 2002aac:	400d883a 	mov	r6,r8
 2002ab0:	180b883a 	mov	r5,r3
 2002ab4:	1009883a 	mov	r4,r2
 2002ab8:	200438c0 	call	200438c <__adddf3>
 2002abc:	180f883a 	mov	r7,r3
 2002ac0:	8009883a 	mov	r4,r16
 2002ac4:	880b883a 	mov	r5,r17
 2002ac8:	100d883a 	mov	r6,r2
 2002acc:	20044000 	call	2004400 <__muldf3>
 2002ad0:	020cccf4 	movhi	r8,13107
 2002ad4:	420cc0c4 	addi	r8,r8,13059
 2002ad8:	024ff8f4 	movhi	r9,16355
 2002adc:	4a4cccc4 	addi	r9,r9,13107
 2002ae0:	480f883a 	mov	r7,r9
 2002ae4:	400d883a 	mov	r6,r8
 2002ae8:	180b883a 	mov	r5,r3
 2002aec:	1009883a 	mov	r4,r2
 2002af0:	200438c0 	call	200438c <__adddf3>
 2002af4:	180f883a 	mov	r7,r3
 2002af8:	a80b883a 	mov	r5,r21
 2002afc:	a009883a 	mov	r4,r20
 2002b00:	100d883a 	mov	r6,r2
 2002b04:	20044000 	call	2004400 <__muldf3>
 2002b08:	d9000317 	ldw	r4,12(sp)
 2002b0c:	d9403017 	ldw	r5,192(sp)
 2002b10:	d9801617 	ldw	r6,88(sp)
 2002b14:	d9c02717 	ldw	r7,156(sp)
 2002b18:	1021883a 	mov	r16,r2
 2002b1c:	1823883a 	mov	r17,r3
 2002b20:	200438c0 	call	200438c <__adddf3>
 2002b24:	d9003117 	ldw	r4,196(sp)
 2002b28:	d9403217 	ldw	r5,200(sp)
 2002b2c:	180f883a 	mov	r7,r3
 2002b30:	100d883a 	mov	r6,r2
 2002b34:	d9001415 	stw	r4,80(sp)
 2002b38:	d9401515 	stw	r5,84(sp)
 2002b3c:	20044000 	call	2004400 <__muldf3>
 2002b40:	180f883a 	mov	r7,r3
 2002b44:	8009883a 	mov	r4,r16
 2002b48:	880b883a 	mov	r5,r17
 2002b4c:	100d883a 	mov	r6,r2
 2002b50:	200438c0 	call	200438c <__adddf3>
 2002b54:	d9001617 	ldw	r4,88(sp)
 2002b58:	d9402717 	ldw	r5,156(sp)
 2002b5c:	d8803315 	stw	r2,204(sp)
 2002b60:	200d883a 	mov	r6,r4
 2002b64:	280f883a 	mov	r7,r5
 2002b68:	d8c03415 	stw	r3,208(sp)
 2002b6c:	20044000 	call	2004400 <__muldf3>
 2002b70:	182f883a 	mov	r23,r3
 2002b74:	05500234 	movhi	r21,16392
 2002b78:	0029883a 	mov	r20,zero
 2002b7c:	b80b883a 	mov	r5,r23
 2002b80:	a00d883a 	mov	r6,r20
 2002b84:	a80f883a 	mov	r7,r21
 2002b88:	1009883a 	mov	r4,r2
 2002b8c:	d8800715 	stw	r2,28(sp)
 2002b90:	d8c00815 	stw	r3,32(sp)
 2002b94:	200438c0 	call	200438c <__adddf3>
 2002b98:	d9003317 	ldw	r4,204(sp)
 2002b9c:	d9403417 	ldw	r5,208(sp)
 2002ba0:	180f883a 	mov	r7,r3
 2002ba4:	100d883a 	mov	r6,r2
 2002ba8:	d9000515 	stw	r4,20(sp)
 2002bac:	d9400615 	stw	r5,24(sp)
 2002bb0:	200438c0 	call	200438c <__adddf3>
 2002bb4:	d9001617 	ldw	r4,88(sp)
 2002bb8:	d9402717 	ldw	r5,156(sp)
 2002bbc:	0025883a 	mov	r18,zero
 2002bc0:	900d883a 	mov	r6,r18
 2002bc4:	180f883a 	mov	r7,r3
 2002bc8:	1823883a 	mov	r17,r3
 2002bcc:	20044000 	call	2004400 <__muldf3>
 2002bd0:	d9001417 	ldw	r4,80(sp)
 2002bd4:	d9403217 	ldw	r5,200(sp)
 2002bd8:	880f883a 	mov	r7,r17
 2002bdc:	900d883a 	mov	r6,r18
 2002be0:	d8803515 	stw	r2,212(sp)
 2002be4:	d8c03615 	stw	r3,216(sp)
 2002be8:	20044000 	call	2004400 <__muldf3>
 2002bec:	a80f883a 	mov	r7,r21
 2002bf0:	880b883a 	mov	r5,r17
 2002bf4:	000d883a 	mov	r6,zero
 2002bf8:	9009883a 	mov	r4,r18
 2002bfc:	1021883a 	mov	r16,r2
 2002c00:	1823883a 	mov	r17,r3
 2002c04:	200430c0 	call	200430c <__subdf3>
 2002c08:	d9800717 	ldw	r6,28(sp)
 2002c0c:	b80f883a 	mov	r7,r23
 2002c10:	180b883a 	mov	r5,r3
 2002c14:	1009883a 	mov	r4,r2
 2002c18:	200430c0 	call	200430c <__subdf3>
 2002c1c:	d9000517 	ldw	r4,20(sp)
 2002c20:	d9403417 	ldw	r5,208(sp)
 2002c24:	180f883a 	mov	r7,r3
 2002c28:	100d883a 	mov	r6,r2
 2002c2c:	200430c0 	call	200430c <__subdf3>
 2002c30:	d9000317 	ldw	r4,12(sp)
 2002c34:	d9403017 	ldw	r5,192(sp)
 2002c38:	180f883a 	mov	r7,r3
 2002c3c:	100d883a 	mov	r6,r2
 2002c40:	20044000 	call	2004400 <__muldf3>
 2002c44:	180f883a 	mov	r7,r3
 2002c48:	880b883a 	mov	r5,r17
 2002c4c:	8009883a 	mov	r4,r16
 2002c50:	100d883a 	mov	r6,r2
 2002c54:	200438c0 	call	200438c <__adddf3>
 2002c58:	102d883a 	mov	r22,r2
 2002c5c:	d9003617 	ldw	r4,216(sp)
 2002c60:	d8803517 	ldw	r2,212(sp)
 2002c64:	d9403617 	ldw	r5,216(sp)
 2002c68:	182f883a 	mov	r23,r3
 2002c6c:	b00d883a 	mov	r6,r22
 2002c70:	b80f883a 	mov	r7,r23
 2002c74:	d9000a15 	stw	r4,40(sp)
 2002c78:	1009883a 	mov	r4,r2
 2002c7c:	054ffbf4 	movhi	r21,16367
 2002c80:	ad71c244 	addi	r21,r21,-14583
 2002c84:	dd800d15 	stw	r22,52(sp)
 2002c88:	ddc00e15 	stw	r23,56(sp)
 2002c8c:	05380034 	movhi	r20,57344
 2002c90:	d8800915 	stw	r2,36(sp)
 2002c94:	200438c0 	call	200438c <__adddf3>
 2002c98:	180b883a 	mov	r5,r3
 2002c9c:	a00d883a 	mov	r6,r20
 2002ca0:	a80f883a 	mov	r7,r21
 2002ca4:	9009883a 	mov	r4,r18
 2002ca8:	1823883a 	mov	r17,r3
 2002cac:	20044000 	call	2004400 <__muldf3>
 2002cb0:	020516f4 	movhi	r8,5211
 2002cb4:	42007d44 	addi	r8,r8,501
 2002cb8:	026f8fb4 	movhi	r9,48702
 2002cbc:	4a4bf804 	addi	r9,r9,12256
 2002cc0:	480f883a 	mov	r7,r9
 2002cc4:	400d883a 	mov	r6,r8
 2002cc8:	880b883a 	mov	r5,r17
 2002ccc:	9009883a 	mov	r4,r18
 2002cd0:	d8803715 	stw	r2,220(sp)
 2002cd4:	d8c03815 	stw	r3,224(sp)
 2002cd8:	20044000 	call	2004400 <__muldf3>
 2002cdc:	d9800917 	ldw	r6,36(sp)
 2002ce0:	d9c03617 	ldw	r7,216(sp)
 2002ce4:	880b883a 	mov	r5,r17
 2002ce8:	9009883a 	mov	r4,r18
 2002cec:	1021883a 	mov	r16,r2
 2002cf0:	1823883a 	mov	r17,r3
 2002cf4:	200430c0 	call	200430c <__subdf3>
 2002cf8:	d9000d17 	ldw	r4,52(sp)
 2002cfc:	b80b883a 	mov	r5,r23
 2002d00:	180f883a 	mov	r7,r3
 2002d04:	100d883a 	mov	r6,r2
 2002d08:	200430c0 	call	200430c <__subdf3>
 2002d0c:	180b883a 	mov	r5,r3
 2002d10:	a80f883a 	mov	r7,r21
 2002d14:	01b70eb4 	movhi	r6,56378
 2002d18:	3180ff44 	addi	r6,r6,1021
 2002d1c:	1009883a 	mov	r4,r2
 2002d20:	20044000 	call	2004400 <__muldf3>
 2002d24:	180f883a 	mov	r7,r3
 2002d28:	880b883a 	mov	r5,r17
 2002d2c:	8009883a 	mov	r4,r16
 2002d30:	100d883a 	mov	r6,r2
 2002d34:	200438c0 	call	200438c <__adddf3>
 2002d38:	d9402c17 	ldw	r5,176(sp)
 2002d3c:	01008074 	movhi	r4,513
 2002d40:	2126f004 	addi	r4,r4,-25664
 2002d44:	2909883a 	add	r4,r5,r4
 2002d48:	22400117 	ldw	r9,4(r4)
 2002d4c:	22000017 	ldw	r8,0(r4)
 2002d50:	180b883a 	mov	r5,r3
 2002d54:	480f883a 	mov	r7,r9
 2002d58:	400d883a 	mov	r6,r8
 2002d5c:	1009883a 	mov	r4,r2
 2002d60:	200438c0 	call	200438c <__adddf3>
 2002d64:	d9000017 	ldw	r4,0(sp)
 2002d68:	182f883a 	mov	r23,r3
 2002d6c:	102d883a 	mov	r22,r2
 2002d70:	2004cc40 	call	2004cc4 <__floatsidf>
 2002d74:	d9402c17 	ldw	r5,176(sp)
 2002d78:	01008074 	movhi	r4,513
 2002d7c:	2126f404 	addi	r4,r4,-25648
 2002d80:	b00d883a 	mov	r6,r22
 2002d84:	2911883a 	add	r8,r5,r4
 2002d88:	d9003717 	ldw	r4,220(sp)
 2002d8c:	d9403817 	ldw	r5,224(sp)
 2002d90:	45000017 	ldw	r20,0(r8)
 2002d94:	d9002315 	stw	r4,140(sp)
 2002d98:	d9003817 	ldw	r4,224(sp)
 2002d9c:	45400117 	ldw	r21,4(r8)
 2002da0:	b80f883a 	mov	r7,r23
 2002da4:	d9002415 	stw	r4,144(sp)
 2002da8:	d9002317 	ldw	r4,140(sp)
 2002dac:	1021883a 	mov	r16,r2
 2002db0:	1823883a 	mov	r17,r3
 2002db4:	dd802115 	stw	r22,132(sp)
 2002db8:	ddc02215 	stw	r23,136(sp)
 2002dbc:	200438c0 	call	200438c <__adddf3>
 2002dc0:	180b883a 	mov	r5,r3
 2002dc4:	1009883a 	mov	r4,r2
 2002dc8:	a00d883a 	mov	r6,r20
 2002dcc:	a80f883a 	mov	r7,r21
 2002dd0:	200438c0 	call	200438c <__adddf3>
 2002dd4:	180f883a 	mov	r7,r3
 2002dd8:	8009883a 	mov	r4,r16
 2002ddc:	880b883a 	mov	r5,r17
 2002de0:	100d883a 	mov	r6,r2
 2002de4:	200438c0 	call	200438c <__adddf3>
 2002de8:	180b883a 	mov	r5,r3
 2002dec:	0009883a 	mov	r4,zero
 2002df0:	800d883a 	mov	r6,r16
 2002df4:	880f883a 	mov	r7,r17
 2002df8:	d9001b15 	stw	r4,108(sp)
 2002dfc:	d8c01c15 	stw	r3,112(sp)
 2002e00:	200430c0 	call	200430c <__subdf3>
 2002e04:	180b883a 	mov	r5,r3
 2002e08:	a80f883a 	mov	r7,r21
 2002e0c:	1009883a 	mov	r4,r2
 2002e10:	a00d883a 	mov	r6,r20
 2002e14:	200430c0 	call	200430c <__subdf3>
 2002e18:	d9802317 	ldw	r6,140(sp)
 2002e1c:	d9c03817 	ldw	r7,224(sp)
 2002e20:	180b883a 	mov	r5,r3
 2002e24:	1009883a 	mov	r4,r2
 2002e28:	200430c0 	call	200430c <__subdf3>
 2002e2c:	d9002117 	ldw	r4,132(sp)
 2002e30:	1011883a 	mov	r8,r2
 2002e34:	1813883a 	mov	r9,r3
 2002e38:	b80b883a 	mov	r5,r23
 2002e3c:	480f883a 	mov	r7,r9
 2002e40:	400d883a 	mov	r6,r8
 2002e44:	200430c0 	call	200430c <__subdf3>
 2002e48:	1823883a 	mov	r17,r3
 2002e4c:	d8c02517 	ldw	r3,148(sp)
 2002e50:	1021883a 	mov	r16,r2
 2002e54:	e0bfffc4 	addi	r2,fp,-1
 2002e58:	1884b03a 	or	r2,r3,r2
 2002e5c:	1000731e 	bne	r2,zero,200302c <__ieee754_pow+0xb88>
 2002e60:	0009883a 	mov	r4,zero
 2002e64:	016ffc34 	movhi	r5,49136
 2002e68:	d9001915 	stw	r4,100(sp)
 2002e6c:	d9401a15 	stw	r5,104(sp)
 2002e70:	d9402917 	ldw	r5,164(sp)
 2002e74:	d9002817 	ldw	r4,160(sp)
 2002e78:	0029883a 	mov	r20,zero
 2002e7c:	a00d883a 	mov	r6,r20
 2002e80:	280f883a 	mov	r7,r5
 2002e84:	2827883a 	mov	r19,r5
 2002e88:	200430c0 	call	200430c <__subdf3>
 2002e8c:	d9001b17 	ldw	r4,108(sp)
 2002e90:	d9401c17 	ldw	r5,112(sp)
 2002e94:	180f883a 	mov	r7,r3
 2002e98:	100d883a 	mov	r6,r2
 2002e9c:	20044000 	call	2004400 <__muldf3>
 2002ea0:	d9c02917 	ldw	r7,164(sp)
 2002ea4:	d9802817 	ldw	r6,160(sp)
 2002ea8:	880b883a 	mov	r5,r17
 2002eac:	8009883a 	mov	r4,r16
 2002eb0:	1823883a 	mov	r17,r3
 2002eb4:	1021883a 	mov	r16,r2
 2002eb8:	20044000 	call	2004400 <__muldf3>
 2002ebc:	180f883a 	mov	r7,r3
 2002ec0:	880b883a 	mov	r5,r17
 2002ec4:	8009883a 	mov	r4,r16
 2002ec8:	100d883a 	mov	r6,r2
 2002ecc:	200438c0 	call	200438c <__adddf3>
 2002ed0:	d9401c17 	ldw	r5,112(sp)
 2002ed4:	d9001b17 	ldw	r4,108(sp)
 2002ed8:	a00d883a 	mov	r6,r20
 2002edc:	980f883a 	mov	r7,r19
 2002ee0:	1029883a 	mov	r20,r2
 2002ee4:	182b883a 	mov	r21,r3
 2002ee8:	20044000 	call	2004400 <__muldf3>
 2002eec:	1025883a 	mov	r18,r2
 2002ef0:	1827883a 	mov	r19,r3
 2002ef4:	a009883a 	mov	r4,r20
 2002ef8:	a80b883a 	mov	r5,r21
 2002efc:	900d883a 	mov	r6,r18
 2002f00:	980f883a 	mov	r7,r19
 2002f04:	dd001d15 	stw	r20,116(sp)
 2002f08:	dc801f15 	stw	r18,124(sp)
 2002f0c:	dd401e15 	stw	r21,120(sp)
 2002f10:	dcc02015 	stw	r19,128(sp)
 2002f14:	200438c0 	call	200438c <__adddf3>
 2002f18:	1823883a 	mov	r17,r3
 2002f1c:	01102434 	movhi	r4,16528
 2002f20:	213fffc4 	addi	r4,r4,-1
 2002f24:	1021883a 	mov	r16,r2
 2002f28:	182f883a 	mov	r23,r3
 2002f2c:	dc401815 	stw	r17,96(sp)
 2002f30:	100b883a 	mov	r5,r2
 2002f34:	20c02c0e 	bge	r4,r3,2002fe8 <__ieee754_pow+0xb44>
 2002f38:	00afdc34 	movhi	r2,49008
 2002f3c:	1885883a 	add	r2,r3,r2
 2002f40:	2884b03a 	or	r2,r5,r2
 2002f44:	1001a626 	beq	r2,zero,20035e0 <__ieee754_pow+0x113c>
 2002f48:	04220034 	movhi	r16,34816
 2002f4c:	841d6704 	addi	r16,r16,30108
 2002f50:	045f8e34 	movhi	r17,32312
 2002f54:	8c790f04 	addi	r17,r17,-7108
 2002f58:	d9401a17 	ldw	r5,104(sp)
 2002f5c:	d9001917 	ldw	r4,100(sp)
 2002f60:	800d883a 	mov	r6,r16
 2002f64:	880f883a 	mov	r7,r17
 2002f68:	20044000 	call	2004400 <__muldf3>
 2002f6c:	180b883a 	mov	r5,r3
 2002f70:	800d883a 	mov	r6,r16
 2002f74:	880f883a 	mov	r7,r17
 2002f78:	1009883a 	mov	r4,r2
 2002f7c:	20044000 	call	2004400 <__muldf3>
 2002f80:	003dc306 	br	2002690 <__ieee754_pow+0x1ec>
 2002f84:	00b00434 	movhi	r2,49168
 2002f88:	9085883a 	add	r2,r18,r2
 2002f8c:	e084b03a 	or	r2,fp,r2
 2002f90:	1000af1e 	bne	r2,zero,2003250 <__ieee754_pow+0xdac>
 2002f94:	480f883a 	mov	r7,r9
 2002f98:	4009883a 	mov	r4,r8
 2002f9c:	480b883a 	mov	r5,r9
 2002fa0:	400d883a 	mov	r6,r8
 2002fa4:	003db406 	br	2002678 <__ieee754_pow+0x1d4>
 2002fa8:	00bffc34 	movhi	r2,65520
 2002fac:	18ff0084 	addi	r3,r3,-1022
 2002fb0:	a0a9883a 	add	r20,r20,r2
 2002fb4:	d8c00015 	stw	r3,0(sp)
 2002fb8:	0009883a 	mov	r4,zero
 2002fbc:	04000234 	movhi	r16,8
 2002fc0:	003e1406 	br	2002814 <__ieee754_pow+0x370>
 2002fc4:	a80f883a 	mov	r7,r21
 2002fc8:	a009883a 	mov	r4,r20
 2002fcc:	a80b883a 	mov	r5,r21
 2002fd0:	a00d883a 	mov	r6,r20
 2002fd4:	20044000 	call	2004400 <__muldf3>
 2002fd8:	180b883a 	mov	r5,r3
 2002fdc:	d8802815 	stw	r2,160(sp)
 2002fe0:	d9402915 	stw	r5,164(sp)
 2002fe4:	003d5606 	br	2002540 <__ieee754_pow+0x9c>
 2002fe8:	d9001817 	ldw	r4,96(sp)
 2002fec:	00a00034 	movhi	r2,32768
 2002ff0:	10bfffc4 	addi	r2,r2,-1
 2002ff4:	00d02474 	movhi	r3,16529
 2002ff8:	18f2ffc4 	addi	r3,r3,-13313
 2002ffc:	20b8703a 	and	fp,r4,r2
 2003000:	1f009d0e 	bge	r3,fp,2003278 <__ieee754_pow+0xdd4>
 2003004:	008fdbf4 	movhi	r2,16239
 2003008:	108d0004 	addi	r2,r2,13312
 200300c:	2085883a 	add	r2,r4,r2
 2003010:	1144b03a 	or	r2,r2,r5
 2003014:	1001c626 	beq	r2,zero,2003730 <__ieee754_pow+0x128c>
 2003018:	0430be74 	movhi	r16,49913
 200301c:	843cd644 	addi	r16,r16,-3239
 2003020:	04406974 	movhi	r17,421
 2003024:	8c5b87c4 	addi	r17,r17,28191
 2003028:	003fcb06 	br	2002f58 <__ieee754_pow+0xab4>
 200302c:	0005883a 	mov	r2,zero
 2003030:	00cffc34 	movhi	r3,16368
 2003034:	d8801915 	stw	r2,100(sp)
 2003038:	d8c01a15 	stw	r3,104(sp)
 200303c:	003f8c06 	br	2002e70 <__ieee754_pow+0x9cc>
 2003040:	0005883a 	mov	r2,zero
 2003044:	00cffc34 	movhi	r3,16368
 2003048:	180b883a 	mov	r5,r3
 200304c:	580f883a 	mov	r7,r11
 2003050:	1009883a 	mov	r4,r2
 2003054:	500d883a 	mov	r6,r10
 2003058:	20047c40 	call	20047c4 <__divdf3>
 200305c:	1011883a 	mov	r8,r2
 2003060:	1813883a 	mov	r9,r3
 2003064:	003d9506 	br	20026bc <__ieee754_pow+0x218>
 2003068:	008ffc34 	movhi	r2,16368
 200306c:	10bfff84 	addi	r2,r2,-2
 2003070:	14bdbb0e 	bge	r2,r18,2002760 <__ieee754_pow+0x2bc>
 2003074:	008ffc34 	movhi	r2,16368
 2003078:	14bdae16 	blt	r2,r18,2002734 <__ieee754_pow+0x290>
 200307c:	580b883a 	mov	r5,r11
 2003080:	5009883a 	mov	r4,r10
 2003084:	000d883a 	mov	r6,zero
 2003088:	100f883a 	mov	r7,r2
 200308c:	200430c0 	call	200430c <__subdf3>
 2003090:	1021883a 	mov	r16,r2
 2003094:	1823883a 	mov	r17,r3
 2003098:	00980034 	movhi	r2,24576
 200309c:	00cffdf4 	movhi	r3,16375
 20030a0:	18c551c4 	addi	r3,r3,5447
 20030a4:	8009883a 	mov	r4,r16
 20030a8:	880b883a 	mov	r5,r17
 20030ac:	180f883a 	mov	r7,r3
 20030b0:	100d883a 	mov	r6,r2
 20030b4:	20044000 	call	2004400 <__muldf3>
 20030b8:	023e17b4 	movhi	r8,63582
 20030bc:	4237d104 	addi	r8,r8,-8380
 20030c0:	024f9574 	movhi	r9,15957
 20030c4:	4a6b82c4 	addi	r9,r9,-20981
 20030c8:	480f883a 	mov	r7,r9
 20030cc:	400d883a 	mov	r6,r8
 20030d0:	8009883a 	mov	r4,r16
 20030d4:	880b883a 	mov	r5,r17
 20030d8:	102d883a 	mov	r22,r2
 20030dc:	182f883a 	mov	r23,r3
 20030e0:	20044000 	call	2004400 <__muldf3>
 20030e4:	8009883a 	mov	r4,r16
 20030e8:	880b883a 	mov	r5,r17
 20030ec:	800d883a 	mov	r6,r16
 20030f0:	880f883a 	mov	r7,r17
 20030f4:	d8802a15 	stw	r2,168(sp)
 20030f8:	d8c02b15 	stw	r3,172(sp)
 20030fc:	20044000 	call	2004400 <__muldf3>
 2003100:	0011883a 	mov	r8,zero
 2003104:	026ff434 	movhi	r9,49104
 2003108:	480f883a 	mov	r7,r9
 200310c:	8009883a 	mov	r4,r16
 2003110:	880b883a 	mov	r5,r17
 2003114:	400d883a 	mov	r6,r8
 2003118:	1029883a 	mov	r20,r2
 200311c:	182b883a 	mov	r21,r3
 2003120:	20044000 	call	2004400 <__muldf3>
 2003124:	02155574 	movhi	r8,21845
 2003128:	42155544 	addi	r8,r8,21845
 200312c:	024ff574 	movhi	r9,16341
 2003130:	4a555544 	addi	r9,r9,21845
 2003134:	480f883a 	mov	r7,r9
 2003138:	400d883a 	mov	r6,r8
 200313c:	180b883a 	mov	r5,r3
 2003140:	1009883a 	mov	r4,r2
 2003144:	200438c0 	call	200438c <__adddf3>
 2003148:	180f883a 	mov	r7,r3
 200314c:	8009883a 	mov	r4,r16
 2003150:	880b883a 	mov	r5,r17
 2003154:	100d883a 	mov	r6,r2
 2003158:	20044000 	call	2004400 <__muldf3>
 200315c:	0011883a 	mov	r8,zero
 2003160:	024ff834 	movhi	r9,16352
 2003164:	480b883a 	mov	r5,r9
 2003168:	4009883a 	mov	r4,r8
 200316c:	180f883a 	mov	r7,r3
 2003170:	100d883a 	mov	r6,r2
 2003174:	200430c0 	call	200430c <__subdf3>
 2003178:	180f883a 	mov	r7,r3
 200317c:	a80b883a 	mov	r5,r21
 2003180:	a009883a 	mov	r4,r20
 2003184:	100d883a 	mov	r6,r2
 2003188:	20044000 	call	2004400 <__muldf3>
 200318c:	02194b34 	movhi	r8,25900
 2003190:	4220bf84 	addi	r8,r8,-32002
 2003194:	026ffdf4 	movhi	r9,49143
 2003198:	4a4551c4 	addi	r9,r9,5447
 200319c:	480f883a 	mov	r7,r9
 20031a0:	400d883a 	mov	r6,r8
 20031a4:	180b883a 	mov	r5,r3
 20031a8:	1009883a 	mov	r4,r2
 20031ac:	20044000 	call	2004400 <__muldf3>
 20031b0:	d9402b17 	ldw	r5,172(sp)
 20031b4:	d9002a17 	ldw	r4,168(sp)
 20031b8:	180f883a 	mov	r7,r3
 20031bc:	100d883a 	mov	r6,r2
 20031c0:	200438c0 	call	200438c <__adddf3>
 20031c4:	100d883a 	mov	r6,r2
 20031c8:	b009883a 	mov	r4,r22
 20031cc:	b80b883a 	mov	r5,r23
 20031d0:	180f883a 	mov	r7,r3
 20031d4:	1021883a 	mov	r16,r2
 20031d8:	1823883a 	mov	r17,r3
 20031dc:	200438c0 	call	200438c <__adddf3>
 20031e0:	180b883a 	mov	r5,r3
 20031e4:	0009883a 	mov	r4,zero
 20031e8:	b00d883a 	mov	r6,r22
 20031ec:	b80f883a 	mov	r7,r23
 20031f0:	d9001b15 	stw	r4,108(sp)
 20031f4:	d8c01c15 	stw	r3,112(sp)
 20031f8:	200430c0 	call	200430c <__subdf3>
 20031fc:	1011883a 	mov	r8,r2
 2003200:	1813883a 	mov	r9,r3
 2003204:	8009883a 	mov	r4,r16
 2003208:	880b883a 	mov	r5,r17
 200320c:	003f0b06 	br	2002e3c <__ieee754_pow+0x998>
 2003210:	0005883a 	mov	r2,zero
 2003214:	00d0d034 	movhi	r3,17216
 2003218:	580b883a 	mov	r5,r11
 200321c:	5009883a 	mov	r4,r10
 2003220:	180f883a 	mov	r7,r3
 2003224:	100d883a 	mov	r6,r2
 2003228:	20044000 	call	2004400 <__muldf3>
 200322c:	1015883a 	mov	r10,r2
 2003230:	1825883a 	mov	r18,r3
 2003234:	017ff2c4 	movi	r5,-53
 2003238:	003d6606 	br	20027d4 <__ieee754_pow+0x330>
 200323c:	b03d300e 	bge	r22,zero,2002700 <__ieee754_pow+0x25c>
 2003240:	d9402917 	ldw	r5,164(sp)
 2003244:	28e0003c 	xorhi	r3,r5,32768
 2003248:	d8c02915 	stw	r3,164(sp)
 200324c:	003cbc06 	br	2002540 <__ieee754_pow+0x9c>
 2003250:	00800044 	movi	r2,1
 2003254:	e0bd1a1e 	bne	fp,r2,20026c0 <__ieee754_pow+0x21c>
 2003258:	48e0003c 	xorhi	r3,r9,32768
 200325c:	da002815 	stw	r8,160(sp)
 2003260:	d8c02915 	stw	r3,164(sp)
 2003264:	003cb606 	br	2002540 <__ieee754_pow+0x9c>
 2003268:	d9001817 	ldw	r4,96(sp)
 200326c:	00a00034 	movhi	r2,32768
 2003270:	10bfffc4 	addi	r2,r2,-1
 2003274:	20b8703a 	and	fp,r4,r2
 2003278:	008ff834 	movhi	r2,16352
 200327c:	1700fc16 	blt	r2,fp,2003670 <__ieee754_pow+0x11cc>
 2003280:	0039883a 	mov	fp,zero
 2003284:	d8001315 	stw	zero,76(sp)
 2003288:	0025883a 	mov	r18,zero
 200328c:	0005883a 	mov	r2,zero
 2003290:	00cff9b4 	movhi	r3,16358
 2003294:	18cb90c4 	addi	r3,r3,11843
 2003298:	9009883a 	mov	r4,r18
 200329c:	b80b883a 	mov	r5,r23
 20032a0:	180f883a 	mov	r7,r3
 20032a4:	100d883a 	mov	r6,r2
 20032a8:	20044000 	call	2004400 <__muldf3>
 20032ac:	d9c02017 	ldw	r7,128(sp)
 20032b0:	d9801f17 	ldw	r6,124(sp)
 20032b4:	9009883a 	mov	r4,r18
 20032b8:	b80b883a 	mov	r5,r23
 20032bc:	b823883a 	mov	r17,r23
 20032c0:	102d883a 	mov	r22,r2
 20032c4:	182f883a 	mov	r23,r3
 20032c8:	200430c0 	call	200430c <__subdf3>
 20032cc:	d9401e17 	ldw	r5,120(sp)
 20032d0:	d9001d17 	ldw	r4,116(sp)
 20032d4:	180f883a 	mov	r7,r3
 20032d8:	100d883a 	mov	r6,r2
 20032dc:	200430c0 	call	200430c <__subdf3>
 20032e0:	023fbeb4 	movhi	r8,65274
 20032e4:	420e7bc4 	addi	r8,r8,14831
 20032e8:	024ff9b4 	movhi	r9,16358
 20032ec:	4a4b9084 	addi	r9,r9,11842
 20032f0:	480f883a 	mov	r7,r9
 20032f4:	400d883a 	mov	r6,r8
 20032f8:	180b883a 	mov	r5,r3
 20032fc:	1009883a 	mov	r4,r2
 2003300:	20044000 	call	2004400 <__muldf3>
 2003304:	02032a34 	movhi	r8,3240
 2003308:	421b0e44 	addi	r8,r8,27705
 200330c:	026f8834 	movhi	r9,48672
 2003310:	4a571844 	addi	r9,r9,23649
 2003314:	480f883a 	mov	r7,r9
 2003318:	400d883a 	mov	r6,r8
 200331c:	9009883a 	mov	r4,r18
 2003320:	880b883a 	mov	r5,r17
 2003324:	1021883a 	mov	r16,r2
 2003328:	1823883a 	mov	r17,r3
 200332c:	20044000 	call	2004400 <__muldf3>
 2003330:	180f883a 	mov	r7,r3
 2003334:	880b883a 	mov	r5,r17
 2003338:	8009883a 	mov	r4,r16
 200333c:	100d883a 	mov	r6,r2
 2003340:	200438c0 	call	200438c <__adddf3>
 2003344:	100d883a 	mov	r6,r2
 2003348:	b009883a 	mov	r4,r22
 200334c:	b80b883a 	mov	r5,r23
 2003350:	180f883a 	mov	r7,r3
 2003354:	1021883a 	mov	r16,r2
 2003358:	1823883a 	mov	r17,r3
 200335c:	200438c0 	call	200438c <__adddf3>
 2003360:	1009883a 	mov	r4,r2
 2003364:	180b883a 	mov	r5,r3
 2003368:	b00d883a 	mov	r6,r22
 200336c:	b80f883a 	mov	r7,r23
 2003370:	d8803915 	stw	r2,228(sp)
 2003374:	d8c03a15 	stw	r3,232(sp)
 2003378:	d8801115 	stw	r2,68(sp)
 200337c:	d8c01215 	stw	r3,72(sp)
 2003380:	200430c0 	call	200430c <__subdf3>
 2003384:	180f883a 	mov	r7,r3
 2003388:	8009883a 	mov	r4,r16
 200338c:	880b883a 	mov	r5,r17
 2003390:	100d883a 	mov	r6,r2
 2003394:	200430c0 	call	200430c <__subdf3>
 2003398:	d9001117 	ldw	r4,68(sp)
 200339c:	d9403a17 	ldw	r5,232(sp)
 20033a0:	1029883a 	mov	r20,r2
 20033a4:	200d883a 	mov	r6,r4
 20033a8:	280f883a 	mov	r7,r5
 20033ac:	182b883a 	mov	r21,r3
 20033b0:	20044000 	call	2004400 <__muldf3>
 20033b4:	1021883a 	mov	r16,r2
 20033b8:	1823883a 	mov	r17,r3
 20033bc:	009caff4 	movhi	r2,29375
 20033c0:	10a93404 	addi	r2,r2,-23344
 20033c4:	00cf99b4 	movhi	r3,15974
 20033c8:	18cdda44 	addi	r3,r3,14185
 20033cc:	8009883a 	mov	r4,r16
 20033d0:	880b883a 	mov	r5,r17
 20033d4:	180f883a 	mov	r7,r3
 20033d8:	100d883a 	mov	r6,r2
 20033dc:	20044000 	call	2004400 <__muldf3>
 20033e0:	023174b4 	movhi	r8,50642
 20033e4:	421afc44 	addi	r8,r8,27633
 20033e8:	024faf34 	movhi	r9,16060
 20033ec:	4a6f5044 	addi	r9,r9,-17087
 20033f0:	480f883a 	mov	r7,r9
 20033f4:	400d883a 	mov	r6,r8
 20033f8:	180b883a 	mov	r5,r3
 20033fc:	1009883a 	mov	r4,r2
 2003400:	200430c0 	call	200430c <__subdf3>
 2003404:	180f883a 	mov	r7,r3
 2003408:	8009883a 	mov	r4,r16
 200340c:	880b883a 	mov	r5,r17
 2003410:	100d883a 	mov	r6,r2
 2003414:	20044000 	call	2004400 <__muldf3>
 2003418:	022bc9b4 	movhi	r8,44838
 200341c:	42378b04 	addi	r8,r8,-8660
 2003420:	024fc474 	movhi	r9,16145
 2003424:	4a559a84 	addi	r9,r9,22122
 2003428:	480f883a 	mov	r7,r9
 200342c:	400d883a 	mov	r6,r8
 2003430:	180b883a 	mov	r5,r3
 2003434:	1009883a 	mov	r4,r2
 2003438:	200438c0 	call	200438c <__adddf3>
 200343c:	180f883a 	mov	r7,r3
 2003440:	8009883a 	mov	r4,r16
 2003444:	880b883a 	mov	r5,r17
 2003448:	100d883a 	mov	r6,r2
 200344c:	20044000 	call	2004400 <__muldf3>
 2003450:	0205aff4 	movhi	r8,5823
 2003454:	422f64c4 	addi	r8,r8,-17005
 2003458:	024fd9f4 	movhi	r9,16231
 200345c:	4a705b04 	addi	r9,r9,-16020
 2003460:	480f883a 	mov	r7,r9
 2003464:	400d883a 	mov	r6,r8
 2003468:	180b883a 	mov	r5,r3
 200346c:	1009883a 	mov	r4,r2
 2003470:	200430c0 	call	200430c <__subdf3>
 2003474:	180f883a 	mov	r7,r3
 2003478:	8009883a 	mov	r4,r16
 200347c:	880b883a 	mov	r5,r17
 2003480:	100d883a 	mov	r6,r2
 2003484:	20044000 	call	2004400 <__muldf3>
 2003488:	02155574 	movhi	r8,21845
 200348c:	42154f84 	addi	r8,r8,21822
 2003490:	024ff174 	movhi	r9,16325
 2003494:	4a555544 	addi	r9,r9,21845
 2003498:	480f883a 	mov	r7,r9
 200349c:	400d883a 	mov	r6,r8
 20034a0:	180b883a 	mov	r5,r3
 20034a4:	1009883a 	mov	r4,r2
 20034a8:	200438c0 	call	200438c <__adddf3>
 20034ac:	180f883a 	mov	r7,r3
 20034b0:	8009883a 	mov	r4,r16
 20034b4:	880b883a 	mov	r5,r17
 20034b8:	100d883a 	mov	r6,r2
 20034bc:	20044000 	call	2004400 <__muldf3>
 20034c0:	d9001117 	ldw	r4,68(sp)
 20034c4:	d9403a17 	ldw	r5,232(sp)
 20034c8:	180f883a 	mov	r7,r3
 20034cc:	100d883a 	mov	r6,r2
 20034d0:	200430c0 	call	200430c <__subdf3>
 20034d4:	d9001117 	ldw	r4,68(sp)
 20034d8:	d9403a17 	ldw	r5,232(sp)
 20034dc:	100d883a 	mov	r6,r2
 20034e0:	180f883a 	mov	r7,r3
 20034e4:	1021883a 	mov	r16,r2
 20034e8:	1823883a 	mov	r17,r3
 20034ec:	20044000 	call	2004400 <__muldf3>
 20034f0:	0011883a 	mov	r8,zero
 20034f4:	02500034 	movhi	r9,16384
 20034f8:	480f883a 	mov	r7,r9
 20034fc:	400d883a 	mov	r6,r8
 2003500:	8009883a 	mov	r4,r16
 2003504:	880b883a 	mov	r5,r17
 2003508:	1021883a 	mov	r16,r2
 200350c:	1823883a 	mov	r17,r3
 2003510:	200430c0 	call	200430c <__subdf3>
 2003514:	180f883a 	mov	r7,r3
 2003518:	880b883a 	mov	r5,r17
 200351c:	8009883a 	mov	r4,r16
 2003520:	100d883a 	mov	r6,r2
 2003524:	20047c40 	call	20047c4 <__divdf3>
 2003528:	d9001117 	ldw	r4,68(sp)
 200352c:	d9403a17 	ldw	r5,232(sp)
 2003530:	a00d883a 	mov	r6,r20
 2003534:	a80f883a 	mov	r7,r21
 2003538:	1025883a 	mov	r18,r2
 200353c:	1827883a 	mov	r19,r3
 2003540:	20044000 	call	2004400 <__muldf3>
 2003544:	180f883a 	mov	r7,r3
 2003548:	a009883a 	mov	r4,r20
 200354c:	a80b883a 	mov	r5,r21
 2003550:	100d883a 	mov	r6,r2
 2003554:	200438c0 	call	200438c <__adddf3>
 2003558:	180f883a 	mov	r7,r3
 200355c:	980b883a 	mov	r5,r19
 2003560:	9009883a 	mov	r4,r18
 2003564:	100d883a 	mov	r6,r2
 2003568:	200430c0 	call	200430c <__subdf3>
 200356c:	d9801117 	ldw	r6,68(sp)
 2003570:	d9c03a17 	ldw	r7,232(sp)
 2003574:	180b883a 	mov	r5,r3
 2003578:	1009883a 	mov	r4,r2
 200357c:	200430c0 	call	200430c <__subdf3>
 2003580:	0011883a 	mov	r8,zero
 2003584:	024ffc34 	movhi	r9,16368
 2003588:	480b883a 	mov	r5,r9
 200358c:	180f883a 	mov	r7,r3
 2003590:	4009883a 	mov	r4,r8
 2003594:	100d883a 	mov	r6,r2
 2003598:	200430c0 	call	200430c <__subdf3>
 200359c:	100b883a 	mov	r5,r2
 20035a0:	d8801317 	ldw	r2,76(sp)
 20035a4:	10d5883a 	add	r10,r2,r3
 20035a8:	5005d53a 	srai	r2,r10,20
 20035ac:	0080720e 	bge	zero,r2,2003778 <__ieee754_pow+0x12d4>
 20035b0:	2811883a 	mov	r8,r5
 20035b4:	5013883a 	mov	r9,r10
 20035b8:	d9c01a17 	ldw	r7,104(sp)
 20035bc:	d9801917 	ldw	r6,100(sp)
 20035c0:	480b883a 	mov	r5,r9
 20035c4:	4009883a 	mov	r4,r8
 20035c8:	003e8206 	br	2002fd4 <__ieee754_pow+0xb30>
 20035cc:	0009883a 	mov	r4,zero
 20035d0:	800b883a 	mov	r5,r16
 20035d4:	a80f883a 	mov	r7,r21
 20035d8:	a00d883a 	mov	r6,r20
 20035dc:	003c2b06 	br	200268c <__ieee754_pow+0x1e8>
 20035e0:	d9001d17 	ldw	r4,116(sp)
 20035e4:	00994b34 	movhi	r2,25900
 20035e8:	10a0bf84 	addi	r2,r2,-32002
 20035ec:	00cf25f4 	movhi	r3,15511
 20035f0:	18c551c4 	addi	r3,r3,5447
 20035f4:	a80b883a 	mov	r5,r21
 20035f8:	180f883a 	mov	r7,r3
 20035fc:	100d883a 	mov	r6,r2
 2003600:	200438c0 	call	200438c <__adddf3>
 2003604:	d9801f17 	ldw	r6,124(sp)
 2003608:	880b883a 	mov	r5,r17
 200360c:	8009883a 	mov	r4,r16
 2003610:	980f883a 	mov	r7,r19
 2003614:	1021883a 	mov	r16,r2
 2003618:	1823883a 	mov	r17,r3
 200361c:	200430c0 	call	200430c <__subdf3>
 2003620:	180f883a 	mov	r7,r3
 2003624:	880b883a 	mov	r5,r17
 2003628:	8009883a 	mov	r4,r16
 200362c:	100d883a 	mov	r6,r2
 2003630:	2004b2c0 	call	2004b2c <__gtdf2>
 2003634:	00bf0c0e 	bge	zero,r2,2003268 <__ieee754_pow+0xdc4>
 2003638:	04220034 	movhi	r16,34816
 200363c:	841d6704 	addi	r16,r16,30108
 2003640:	045f8e34 	movhi	r17,32312
 2003644:	8c790f04 	addi	r17,r17,-7108
 2003648:	d9401a17 	ldw	r5,104(sp)
 200364c:	d9001917 	ldw	r4,100(sp)
 2003650:	800d883a 	mov	r6,r16
 2003654:	880f883a 	mov	r7,r17
 2003658:	20044000 	call	2004400 <__muldf3>
 200365c:	180b883a 	mov	r5,r3
 2003660:	800d883a 	mov	r6,r16
 2003664:	880f883a 	mov	r7,r17
 2003668:	1009883a 	mov	r4,r2
 200366c:	003e5906 	br	2002fd4 <__ieee754_pow+0xb30>
 2003670:	e005d53a 	srai	r2,fp,20
 2003674:	01800434 	movhi	r6,16
 2003678:	d9401817 	ldw	r5,96(sp)
 200367c:	10bf0084 	addi	r2,r2,-1022
 2003680:	308dd83a 	sra	r6,r6,r2
 2003684:	02000434 	movhi	r8,16
 2003688:	423fffc4 	addi	r8,r8,-1
 200368c:	0005883a 	mov	r2,zero
 2003690:	298d883a 	add	r6,r5,r6
 2003694:	318b883a 	add	r5,r6,r6
 2003698:	320e703a 	and	r7,r6,r8
 200369c:	1013883a 	mov	r9,r2
 20036a0:	280ad57a 	srli	r5,r5,21
 20036a4:	d8801817 	ldw	r2,96(sp)
 20036a8:	01000504 	movi	r4,20
 20036ac:	297f0044 	addi	r5,r5,-1023
 20036b0:	4151d83a 	sra	r8,r8,r5
 20036b4:	39c00434 	orhi	r7,r7,16
 20036b8:	2149c83a 	sub	r4,r4,r5
 20036bc:	0210303a 	nor	r8,zero,r8
 20036c0:	3939d83a 	sra	fp,r7,r4
 20036c4:	320e703a 	and	r7,r6,r8
 20036c8:	10002916 	blt	r2,zero,2003770 <__ieee754_pow+0x12cc>
 20036cc:	d9402017 	ldw	r5,128(sp)
 20036d0:	d9001f17 	ldw	r4,124(sp)
 20036d4:	480d883a 	mov	r6,r9
 20036d8:	200430c0 	call	200430c <__subdf3>
 20036dc:	180b883a 	mov	r5,r3
 20036e0:	d9402015 	stw	r5,128(sp)
 20036e4:	280f883a 	mov	r7,r5
 20036e8:	d9001d17 	ldw	r4,116(sp)
 20036ec:	d9401e17 	ldw	r5,120(sp)
 20036f0:	1007883a 	mov	r3,r2
 20036f4:	180d883a 	mov	r6,r3
 20036f8:	d8801f15 	stw	r2,124(sp)
 20036fc:	200438c0 	call	200438c <__adddf3>
 2003700:	180b883a 	mov	r5,r3
 2003704:	e006953a 	slli	r3,fp,20
 2003708:	282f883a 	mov	r23,r5
 200370c:	d8c01315 	stw	r3,76(sp)
 2003710:	003edd06 	br	2003288 <__ieee754_pow+0xde4>
 2003714:	383bc81e 	bne	r7,zero,2002638 <__ieee754_pow+0x194>
 2003718:	28c5c83a 	sub	r2,r5,r3
 200371c:	8087d83a 	sra	r3,r16,r2
 2003720:	1884983a 	sll	r2,r3,r2
 2003724:	80801b26 	beq	r16,r2,2003794 <__ieee754_pow+0x12f0>
 2003728:	0039883a 	mov	fp,zero
 200372c:	003b9d06 	br	20025a4 <__ieee754_pow+0x100>
 2003730:	d9801f17 	ldw	r6,124(sp)
 2003734:	8009883a 	mov	r4,r16
 2003738:	880b883a 	mov	r5,r17
 200373c:	980f883a 	mov	r7,r19
 2003740:	200430c0 	call	200430c <__subdf3>
 2003744:	d9001d17 	ldw	r4,116(sp)
 2003748:	a80b883a 	mov	r5,r21
 200374c:	180f883a 	mov	r7,r3
 2003750:	100d883a 	mov	r6,r2
 2003754:	2004c3c0 	call	2004c3c <__ledf2>
 2003758:	00bfc516 	blt	zero,r2,2003670 <__ieee754_pow+0x11cc>
 200375c:	0430be74 	movhi	r16,49913
 2003760:	843cd644 	addi	r16,r16,-3239
 2003764:	04406974 	movhi	r17,421
 2003768:	8c5b87c4 	addi	r17,r17,28191
 200376c:	003fb606 	br	2003648 <__ieee754_pow+0x11a4>
 2003770:	0739c83a 	sub	fp,zero,fp
 2003774:	003fd506 	br	20036cc <__ieee754_pow+0x1228>
 2003778:	2809883a 	mov	r4,r5
 200377c:	e00d883a 	mov	r6,fp
 2003780:	180b883a 	mov	r5,r3
 2003784:	2003cf80 	call	2003cf8 <scalbn>
 2003788:	1011883a 	mov	r8,r2
 200378c:	1813883a 	mov	r9,r3
 2003790:	003f8906 	br	20035b8 <__ieee754_pow+0x1114>
 2003794:	18c0004c 	andi	r3,r3,1
 2003798:	00800084 	movi	r2,2
 200379c:	10f9c83a 	sub	fp,r2,r3
 20037a0:	003b8006 	br	20025a4 <__ieee754_pow+0x100>

020037a4 <__ieee754_sqrt>:
 20037a4:	defffd04 	addi	sp,sp,-12
 20037a8:	dc000015 	stw	r16,0(sp)
 20037ac:	009ffc34 	movhi	r2,32752
 20037b0:	2021883a 	mov	r16,r4
 20037b4:	291ffc2c 	andhi	r4,r5,32752
 20037b8:	dc400115 	stw	r17,4(sp)
 20037bc:	dfc00215 	stw	ra,8(sp)
 20037c0:	2823883a 	mov	r17,r5
 20037c4:	280f883a 	mov	r7,r5
 20037c8:	2807883a 	mov	r3,r5
 20037cc:	8011883a 	mov	r8,r16
 20037d0:	20807d26 	beq	r4,r2,20039c8 <__ieee754_sqrt+0x224>
 20037d4:	01408d0e 	bge	zero,r5,2003a0c <__ieee754_sqrt+0x268>
 20037d8:	380dd53a 	srai	r6,r7,20
 20037dc:	3000131e 	bne	r6,zero,200382c <__ieee754_sqrt+0x88>
 20037e0:	1800041e 	bne	r3,zero,20037f4 <__ieee754_sqrt+0x50>
 20037e4:	400ed2fa 	srli	r7,r8,11
 20037e8:	31bffac4 	addi	r6,r6,-21
 20037ec:	4010957a 	slli	r8,r8,21
 20037f0:	383ffc26 	beq	r7,zero,20037e4 <__ieee754_sqrt+0x40>
 20037f4:	3880042c 	andhi	r2,r7,16
 20037f8:	1000991e 	bne	r2,zero,2003a60 <__ieee754_sqrt+0x2bc>
 20037fc:	0009883a 	mov	r4,zero
 2003800:	39cf883a 	add	r7,r7,r7
 2003804:	3880042c 	andhi	r2,r7,16
 2003808:	21000044 	addi	r4,r4,1
 200380c:	103ffc26 	beq	r2,zero,2003800 <__ieee754_sqrt+0x5c>
 2003810:	00800804 	movi	r2,32
 2003814:	1105c83a 	sub	r2,r2,r4
 2003818:	4086d83a 	srl	r3,r8,r2
 200381c:	4110983a 	sll	r8,r8,r4
 2003820:	3105c83a 	sub	r2,r6,r4
 2003824:	38ceb03a 	or	r7,r7,r3
 2003828:	11800044 	addi	r6,r2,1
 200382c:	31bf0044 	addi	r6,r6,-1023
 2003830:	30c0004c 	andi	r3,r6,1
 2003834:	00800434 	movhi	r2,16
 2003838:	10bfffc4 	addi	r2,r2,-1
 200383c:	3884703a 	and	r2,r7,r2
 2003840:	1807003a 	cmpeq	r3,r3,zero
 2003844:	11000434 	orhi	r4,r2,16
 2003848:	18005426 	beq	r3,zero,200399c <__ieee754_sqrt+0x1f8>
 200384c:	4004d7fa 	srli	r2,r8,31
 2003850:	4207883a 	add	r3,r8,r8
 2003854:	02800834 	movhi	r10,32
 2003858:	1105883a 	add	r2,r2,r4
 200385c:	2089883a 	add	r4,r4,r2
 2003860:	0011883a 	mov	r8,zero
 2003864:	000b883a 	mov	r5,zero
 2003868:	0013883a 	mov	r9,zero
 200386c:	02c00584 	movi	r11,22
 2003870:	520f883a 	add	r7,r10,r8
 2003874:	1804d7fa 	srli	r2,r3,31
 2003878:	4a400044 	addi	r9,r9,1
 200387c:	18c7883a 	add	r3,r3,r3
 2003880:	21c00316 	blt	r4,r7,2003890 <__ieee754_sqrt+0xec>
 2003884:	21c9c83a 	sub	r4,r4,r7
 2003888:	2a8b883a 	add	r5,r5,r10
 200388c:	51d1883a 	add	r8,r10,r7
 2003890:	1105883a 	add	r2,r2,r4
 2003894:	5014d07a 	srli	r10,r10,1
 2003898:	2089883a 	add	r4,r4,r2
 200389c:	4afff41e 	bne	r9,r11,2003870 <__ieee754_sqrt+0xcc>
 20038a0:	02600034 	movhi	r9,32768
 20038a4:	0017883a 	mov	r11,zero
 20038a8:	0019883a 	mov	r12,zero
 20038ac:	0015883a 	mov	r10,zero
 20038b0:	4821883a 	mov	r16,r9
 20038b4:	03c00804 	movi	r15,32
 20038b8:	00000806 	br	20038dc <__ieee754_sqrt+0x138>
 20038bc:	22003426 	beq	r4,r8,2003990 <__ieee754_sqrt+0x1ec>
 20038c0:	1804d7fa 	srli	r2,r3,31
 20038c4:	52800044 	addi	r10,r10,1
 20038c8:	18c7883a 	add	r3,r3,r3
 20038cc:	1105883a 	add	r2,r2,r4
 20038d0:	2089883a 	add	r4,r4,r2
 20038d4:	4812d07a 	srli	r9,r9,1
 20038d8:	53c01326 	beq	r10,r15,2003928 <__ieee754_sqrt+0x184>
 20038dc:	4acf883a 	add	r7,r9,r11
 20038e0:	413ff60e 	bge	r8,r4,20038bc <__ieee754_sqrt+0x118>
 20038e4:	38a0002c 	andhi	r2,r7,32768
 20038e8:	3a57883a 	add	r11,r7,r9
 20038ec:	14002426 	beq	r2,r16,2003980 <__ieee754_sqrt+0x1dc>
 20038f0:	4005883a 	mov	r2,r8
 20038f4:	2209c83a 	sub	r4,r4,r8
 20038f8:	19c0012e 	bgeu	r3,r7,2003900 <__ieee754_sqrt+0x15c>
 20038fc:	213fffc4 	addi	r4,r4,-1
 2003900:	19c7c83a 	sub	r3,r3,r7
 2003904:	1011883a 	mov	r8,r2
 2003908:	1804d7fa 	srli	r2,r3,31
 200390c:	52800044 	addi	r10,r10,1
 2003910:	6259883a 	add	r12,r12,r9
 2003914:	1105883a 	add	r2,r2,r4
 2003918:	18c7883a 	add	r3,r3,r3
 200391c:	2089883a 	add	r4,r4,r2
 2003920:	4812d07a 	srli	r9,r9,1
 2003924:	53ffed1e 	bne	r10,r15,20038dc <__ieee754_sqrt+0x138>
 2003928:	20c4b03a 	or	r2,r4,r3
 200392c:	1000201e 	bne	r2,zero,20039b0 <__ieee754_sqrt+0x20c>
 2003930:	600ed07a 	srli	r7,r12,1
 2003934:	2880004c 	andi	r2,r5,1
 2003938:	1005003a 	cmpeq	r2,r2,zero
 200393c:	1000011e 	bne	r2,zero,2003944 <__ieee754_sqrt+0x1a0>
 2003940:	39e00034 	orhi	r7,r7,32768
 2003944:	300dd07a 	srai	r6,r6,1
 2003948:	280bd07a 	srai	r5,r5,1
 200394c:	010ff834 	movhi	r4,16352
 2003950:	300c953a 	slli	r6,r6,20
 2003954:	290b883a 	add	r5,r5,r4
 2003958:	3821883a 	mov	r16,r7
 200395c:	299d883a 	add	r14,r5,r6
 2003960:	7023883a 	mov	r17,r14
 2003964:	8005883a 	mov	r2,r16
 2003968:	8807883a 	mov	r3,r17
 200396c:	dfc00217 	ldw	ra,8(sp)
 2003970:	dc400117 	ldw	r17,4(sp)
 2003974:	dc000017 	ldw	r16,0(sp)
 2003978:	dec00304 	addi	sp,sp,12
 200397c:	f800283a 	ret
 2003980:	5884703a 	and	r2,r11,r2
 2003984:	103fda1e 	bne	r2,zero,20038f0 <__ieee754_sqrt+0x14c>
 2003988:	40800044 	addi	r2,r8,1
 200398c:	003fd906 	br	20038f4 <__ieee754_sqrt+0x150>
 2003990:	19ffd42e 	bgeu	r3,r7,20038e4 <__ieee754_sqrt+0x140>
 2003994:	2011883a 	mov	r8,r4
 2003998:	003fc906 	br	20038c0 <__ieee754_sqrt+0x11c>
 200399c:	4004d7fa 	srli	r2,r8,31
 20039a0:	4211883a 	add	r8,r8,r8
 20039a4:	1105883a 	add	r2,r2,r4
 20039a8:	2089883a 	add	r4,r4,r2
 20039ac:	003fa706 	br	200384c <__ieee754_sqrt+0xa8>
 20039b0:	00bfffc4 	movi	r2,-1
 20039b4:	60802726 	beq	r12,r2,2003a54 <__ieee754_sqrt+0x2b0>
 20039b8:	6080004c 	andi	r2,r12,1
 20039bc:	6085883a 	add	r2,r12,r2
 20039c0:	100ed07a 	srli	r7,r2,1
 20039c4:	003fdb06 	br	2003934 <__ieee754_sqrt+0x190>
 20039c8:	8009883a 	mov	r4,r16
 20039cc:	800d883a 	mov	r6,r16
 20039d0:	20044000 	call	2004400 <__muldf3>
 20039d4:	180f883a 	mov	r7,r3
 20039d8:	880b883a 	mov	r5,r17
 20039dc:	8009883a 	mov	r4,r16
 20039e0:	100d883a 	mov	r6,r2
 20039e4:	200438c0 	call	200438c <__adddf3>
 20039e8:	1021883a 	mov	r16,r2
 20039ec:	1823883a 	mov	r17,r3
 20039f0:	8005883a 	mov	r2,r16
 20039f4:	8807883a 	mov	r3,r17
 20039f8:	dfc00217 	ldw	ra,8(sp)
 20039fc:	dc400117 	ldw	r17,4(sp)
 2003a00:	dc000017 	ldw	r16,0(sp)
 2003a04:	dec00304 	addi	sp,sp,12
 2003a08:	f800283a 	ret
 2003a0c:	00a00034 	movhi	r2,32768
 2003a10:	10bfffc4 	addi	r2,r2,-1
 2003a14:	2884703a 	and	r2,r5,r2
 2003a18:	8084b03a 	or	r2,r16,r2
 2003a1c:	103fd126 	beq	r2,zero,2003964 <__ieee754_sqrt+0x1c0>
 2003a20:	283f6d26 	beq	r5,zero,20037d8 <__ieee754_sqrt+0x34>
 2003a24:	280f883a 	mov	r7,r5
 2003a28:	8009883a 	mov	r4,r16
 2003a2c:	800d883a 	mov	r6,r16
 2003a30:	200430c0 	call	200430c <__subdf3>
 2003a34:	1009883a 	mov	r4,r2
 2003a38:	180b883a 	mov	r5,r3
 2003a3c:	100d883a 	mov	r6,r2
 2003a40:	180f883a 	mov	r7,r3
 2003a44:	20047c40 	call	20047c4 <__divdf3>
 2003a48:	1021883a 	mov	r16,r2
 2003a4c:	1823883a 	mov	r17,r3
 2003a50:	003fc406 	br	2003964 <__ieee754_sqrt+0x1c0>
 2003a54:	29400044 	addi	r5,r5,1
 2003a58:	000f883a 	mov	r7,zero
 2003a5c:	003fb506 	br	2003934 <__ieee754_sqrt+0x190>
 2003a60:	0009883a 	mov	r4,zero
 2003a64:	00800804 	movi	r2,32
 2003a68:	003f6b06 	br	2003818 <__ieee754_sqrt+0x74>

02003a6c <fabs>:
 2003a6c:	01e00034 	movhi	r7,32768
 2003a70:	39ffffc4 	addi	r7,r7,-1
 2003a74:	394e703a 	and	r7,r7,r5
 2003a78:	2005883a 	mov	r2,r4
 2003a7c:	3807883a 	mov	r3,r7
 2003a80:	f800283a 	ret

02003a84 <finite>:
 2003a84:	00a00034 	movhi	r2,32768
 2003a88:	10bfffc4 	addi	r2,r2,-1
 2003a8c:	2884703a 	and	r2,r5,r2
 2003a90:	01600434 	movhi	r5,32784
 2003a94:	1145883a 	add	r2,r2,r5
 2003a98:	1004d7fa 	srli	r2,r2,31
 2003a9c:	f800283a 	ret

02003aa0 <__isnand>:
 2003aa0:	200d883a 	mov	r6,r4
 2003aa4:	0109c83a 	sub	r4,zero,r4
 2003aa8:	2188b03a 	or	r4,r4,r6
 2003aac:	2008d7fa 	srli	r4,r4,31
 2003ab0:	00a00034 	movhi	r2,32768
 2003ab4:	10bfffc4 	addi	r2,r2,-1
 2003ab8:	1144703a 	and	r2,r2,r5
 2003abc:	2088b03a 	or	r4,r4,r2
 2003ac0:	009ffc34 	movhi	r2,32752
 2003ac4:	1105c83a 	sub	r2,r2,r4
 2003ac8:	1004d7fa 	srli	r2,r2,31
 2003acc:	f800283a 	ret

02003ad0 <matherr>:
 2003ad0:	0005883a 	mov	r2,zero
 2003ad4:	f800283a 	ret

02003ad8 <nan>:
 2003ad8:	015ffe34 	movhi	r5,32760
 2003adc:	0005883a 	mov	r2,zero
 2003ae0:	2807883a 	mov	r3,r5
 2003ae4:	f800283a 	ret

02003ae8 <rint>:
 2003ae8:	2015883a 	mov	r10,r4
 2003aec:	2809d53a 	srai	r4,r5,20
 2003af0:	defff904 	addi	sp,sp,-28
 2003af4:	034004c4 	movi	r13,19
 2003af8:	2101ffcc 	andi	r4,r4,2047
 2003afc:	227f0044 	addi	r9,r4,-1023
 2003b00:	dc800415 	stw	r18,16(sp)
 2003b04:	dfc00615 	stw	ra,24(sp)
 2003b08:	dcc00515 	stw	r19,20(sp)
 2003b0c:	dc400315 	stw	r17,12(sp)
 2003b10:	dc000215 	stw	r16,8(sp)
 2003b14:	2817883a 	mov	r11,r5
 2003b18:	500d883a 	mov	r6,r10
 2003b1c:	2824d7fa 	srli	r18,r5,31
 2003b20:	6a403016 	blt	r13,r9,2003be4 <rint+0xfc>
 2003b24:	48004916 	blt	r9,zero,2003c4c <rint+0x164>
 2003b28:	00800434 	movhi	r2,16
 2003b2c:	10bfffc4 	addi	r2,r2,-1
 2003b30:	1247d83a 	sra	r3,r2,r9
 2003b34:	2809883a 	mov	r4,r5
 2003b38:	1944703a 	and	r2,r3,r5
 2003b3c:	5084b03a 	or	r2,r10,r2
 2003b40:	10001f26 	beq	r2,zero,2003bc0 <rint+0xd8>
 2003b44:	180ad07a 	srli	r5,r3,1
 2003b48:	5944703a 	and	r2,r11,r5
 2003b4c:	5084b03a 	or	r2,r10,r2
 2003b50:	10000626 	beq	r2,zero,2003b6c <rint+0x84>
 2003b54:	4b406626 	beq	r9,r13,2003cf0 <rint+0x208>
 2003b58:	00c000b4 	movhi	r3,2
 2003b5c:	1a47d83a 	sra	r3,r3,r9
 2003b60:	0144303a 	nor	r2,zero,r5
 2003b64:	5884703a 	and	r2,r11,r2
 2003b68:	10c8b03a 	or	r4,r2,r3
 2003b6c:	900690fa 	slli	r3,r18,3
 2003b70:	00808074 	movhi	r2,513
 2003b74:	10a6f804 	addi	r2,r2,-25632
 2003b78:	200f883a 	mov	r7,r4
 2003b7c:	1887883a 	add	r3,r3,r2
 2003b80:	1c000017 	ldw	r16,0(r3)
 2003b84:	1c400117 	ldw	r17,4(r3)
 2003b88:	8009883a 	mov	r4,r16
 2003b8c:	880b883a 	mov	r5,r17
 2003b90:	200438c0 	call	200438c <__adddf3>
 2003b94:	d8800015 	stw	r2,0(sp)
 2003b98:	d8c00115 	stw	r3,4(sp)
 2003b9c:	d8800017 	ldw	r2,0(sp)
 2003ba0:	d8c00117 	ldw	r3,4(sp)
 2003ba4:	880f883a 	mov	r7,r17
 2003ba8:	800d883a 	mov	r6,r16
 2003bac:	180b883a 	mov	r5,r3
 2003bb0:	1009883a 	mov	r4,r2
 2003bb4:	200430c0 	call	200430c <__subdf3>
 2003bb8:	1015883a 	mov	r10,r2
 2003bbc:	1817883a 	mov	r11,r3
 2003bc0:	5005883a 	mov	r2,r10
 2003bc4:	5807883a 	mov	r3,r11
 2003bc8:	dfc00617 	ldw	ra,24(sp)
 2003bcc:	dcc00517 	ldw	r19,20(sp)
 2003bd0:	dc800417 	ldw	r18,16(sp)
 2003bd4:	dc400317 	ldw	r17,12(sp)
 2003bd8:	dc000217 	ldw	r16,8(sp)
 2003bdc:	dec00704 	addi	sp,sp,28
 2003be0:	f800283a 	ret
 2003be4:	00800cc4 	movi	r2,51
 2003be8:	12400f16 	blt	r2,r9,2003c28 <rint+0x140>
 2003bec:	213efb44 	addi	r4,r4,-1043
 2003bf0:	00bfffc4 	movi	r2,-1
 2003bf4:	1104d83a 	srl	r2,r2,r4
 2003bf8:	5086703a 	and	r3,r10,r2
 2003bfc:	183ff026 	beq	r3,zero,2003bc0 <rint+0xd8>
 2003c00:	100ad07a 	srli	r5,r2,1
 2003c04:	5144703a 	and	r2,r10,r5
 2003c08:	10000526 	beq	r2,zero,2003c20 <rint+0x138>
 2003c0c:	00d00034 	movhi	r3,16384
 2003c10:	1907d83a 	sra	r3,r3,r4
 2003c14:	0144303a 	nor	r2,zero,r5
 2003c18:	5084703a 	and	r2,r10,r2
 2003c1c:	10ccb03a 	or	r6,r2,r3
 2003c20:	5809883a 	mov	r4,r11
 2003c24:	003fd106 	br	2003b6c <rint+0x84>
 2003c28:	00810004 	movi	r2,1024
 2003c2c:	48bfe41e 	bne	r9,r2,2003bc0 <rint+0xd8>
 2003c30:	5009883a 	mov	r4,r10
 2003c34:	500d883a 	mov	r6,r10
 2003c38:	280f883a 	mov	r7,r5
 2003c3c:	200438c0 	call	200438c <__adddf3>
 2003c40:	1015883a 	mov	r10,r2
 2003c44:	1817883a 	mov	r11,r3
 2003c48:	003fdd06 	br	2003bc0 <rint+0xd8>
 2003c4c:	04e00034 	movhi	r19,32768
 2003c50:	9cffffc4 	addi	r19,r19,-1
 2003c54:	2cc4703a 	and	r2,r5,r19
 2003c58:	5084b03a 	or	r2,r10,r2
 2003c5c:	103fd826 	beq	r2,zero,2003bc0 <rint+0xd8>
 2003c60:	00c00434 	movhi	r3,16
 2003c64:	18ffffc4 	addi	r3,r3,-1
 2003c68:	28c6703a 	and	r3,r5,r3
 2003c6c:	50c6b03a 	or	r3,r10,r3
 2003c70:	00cdc83a 	sub	r6,zero,r3
 2003c74:	900a90fa 	slli	r5,r18,3
 2003c78:	1986b03a 	or	r3,r3,r6
 2003c7c:	01008074 	movhi	r4,513
 2003c80:	2126f804 	addi	r4,r4,-25632
 2003c84:	1806d33a 	srli	r3,r3,12
 2003c88:	290b883a 	add	r5,r5,r4
 2003c8c:	2c000017 	ldw	r16,0(r5)
 2003c90:	2c400117 	ldw	r17,4(r5)
 2003c94:	593fffac 	andhi	r4,r11,65534
 2003c98:	18c0022c 	andhi	r3,r3,8
 2003c9c:	1906b03a 	or	r3,r3,r4
 2003ca0:	500d883a 	mov	r6,r10
 2003ca4:	180f883a 	mov	r7,r3
 2003ca8:	8009883a 	mov	r4,r16
 2003cac:	880b883a 	mov	r5,r17
 2003cb0:	200438c0 	call	200438c <__adddf3>
 2003cb4:	d8800015 	stw	r2,0(sp)
 2003cb8:	d8c00115 	stw	r3,4(sp)
 2003cbc:	d8800017 	ldw	r2,0(sp)
 2003cc0:	d8c00117 	ldw	r3,4(sp)
 2003cc4:	880f883a 	mov	r7,r17
 2003cc8:	800d883a 	mov	r6,r16
 2003ccc:	180b883a 	mov	r5,r3
 2003cd0:	1009883a 	mov	r4,r2
 2003cd4:	200430c0 	call	200430c <__subdf3>
 2003cd8:	901297fa 	slli	r9,r18,31
 2003cdc:	98d0703a 	and	r8,r19,r3
 2003ce0:	1015883a 	mov	r10,r2
 2003ce4:	4250b03a 	or	r8,r8,r9
 2003ce8:	4017883a 	mov	r11,r8
 2003cec:	003fb406 	br	2003bc0 <rint+0xd8>
 2003cf0:	01900034 	movhi	r6,16384
 2003cf4:	003f9d06 	br	2003b6c <rint+0x84>

02003cf8 <scalbn>:
 2003cf8:	2011883a 	mov	r8,r4
 2003cfc:	291ffc2c 	andhi	r4,r5,32752
 2003d00:	2009d53a 	srai	r4,r4,20
 2003d04:	defffd04 	addi	sp,sp,-12
 2003d08:	dc000015 	stw	r16,0(sp)
 2003d0c:	dfc00215 	stw	ra,8(sp)
 2003d10:	dc400115 	stw	r17,4(sp)
 2003d14:	2813883a 	mov	r9,r5
 2003d18:	2815883a 	mov	r10,r5
 2003d1c:	3021883a 	mov	r16,r6
 2003d20:	2000281e 	bne	r4,zero,2003dc4 <scalbn+0xcc>
 2003d24:	00a00034 	movhi	r2,32768
 2003d28:	10bfffc4 	addi	r2,r2,-1
 2003d2c:	2884703a 	and	r2,r5,r2
 2003d30:	4084b03a 	or	r2,r8,r2
 2003d34:	10001826 	beq	r2,zero,2003d98 <scalbn+0xa0>
 2003d38:	0005883a 	mov	r2,zero
 2003d3c:	00d0d434 	movhi	r3,17232
 2003d40:	4009883a 	mov	r4,r8
 2003d44:	100d883a 	mov	r6,r2
 2003d48:	180f883a 	mov	r7,r3
 2003d4c:	20044000 	call	2004400 <__muldf3>
 2003d50:	100b883a 	mov	r5,r2
 2003d54:	1011883a 	mov	r8,r2
 2003d58:	00bffff4 	movhi	r2,65535
 2003d5c:	108f2c04 	addi	r2,r2,15536
 2003d60:	180d883a 	mov	r6,r3
 2003d64:	1813883a 	mov	r9,r3
 2003d68:	8080120e 	bge	r16,r2,2003db4 <scalbn+0xbc>
 2003d6c:	00b0be74 	movhi	r2,49913
 2003d70:	10bcd644 	addi	r2,r2,-3239
 2003d74:	00c06974 	movhi	r3,421
 2003d78:	18db87c4 	addi	r3,r3,28191
 2003d7c:	2809883a 	mov	r4,r5
 2003d80:	180f883a 	mov	r7,r3
 2003d84:	300b883a 	mov	r5,r6
 2003d88:	100d883a 	mov	r6,r2
 2003d8c:	20044000 	call	2004400 <__muldf3>
 2003d90:	1011883a 	mov	r8,r2
 2003d94:	1813883a 	mov	r9,r3
 2003d98:	4005883a 	mov	r2,r8
 2003d9c:	4807883a 	mov	r3,r9
 2003da0:	dfc00217 	ldw	ra,8(sp)
 2003da4:	dc400117 	ldw	r17,4(sp)
 2003da8:	dc000017 	ldw	r16,0(sp)
 2003dac:	dec00304 	addi	sp,sp,12
 2003db0:	f800283a 	ret
 2003db4:	189ffc2c 	andhi	r2,r3,32752
 2003db8:	1005d53a 	srai	r2,r2,20
 2003dbc:	1815883a 	mov	r10,r3
 2003dc0:	113ff284 	addi	r4,r2,-54
 2003dc4:	0081ffc4 	movi	r2,2047
 2003dc8:	20801126 	beq	r4,r2,2003e10 <scalbn+0x118>
 2003dcc:	2409883a 	add	r4,r4,r16
 2003dd0:	0081ff84 	movi	r2,2046
 2003dd4:	11001c16 	blt	r2,r4,2003e48 <scalbn+0x150>
 2003dd8:	0100290e 	bge	zero,r4,2003e80 <scalbn+0x188>
 2003ddc:	200a953a 	slli	r5,r4,20
 2003de0:	01200434 	movhi	r4,32784
 2003de4:	213fffc4 	addi	r4,r4,-1
 2003de8:	5108703a 	and	r4,r10,r4
 2003dec:	2148b03a 	or	r4,r4,r5
 2003df0:	2013883a 	mov	r9,r4
 2003df4:	4005883a 	mov	r2,r8
 2003df8:	4807883a 	mov	r3,r9
 2003dfc:	dfc00217 	ldw	ra,8(sp)
 2003e00:	dc400117 	ldw	r17,4(sp)
 2003e04:	dc000017 	ldw	r16,0(sp)
 2003e08:	dec00304 	addi	sp,sp,12
 2003e0c:	f800283a 	ret
 2003e10:	480f883a 	mov	r7,r9
 2003e14:	4009883a 	mov	r4,r8
 2003e18:	480b883a 	mov	r5,r9
 2003e1c:	400d883a 	mov	r6,r8
 2003e20:	200438c0 	call	200438c <__adddf3>
 2003e24:	1011883a 	mov	r8,r2
 2003e28:	1813883a 	mov	r9,r3
 2003e2c:	4005883a 	mov	r2,r8
 2003e30:	4807883a 	mov	r3,r9
 2003e34:	dfc00217 	ldw	ra,8(sp)
 2003e38:	dc400117 	ldw	r17,4(sp)
 2003e3c:	dc000017 	ldw	r16,0(sp)
 2003e40:	dec00304 	addi	sp,sp,12
 2003e44:	f800283a 	ret
 2003e48:	04220034 	movhi	r16,34816
 2003e4c:	841d6704 	addi	r16,r16,30108
 2003e50:	045f8e34 	movhi	r17,32312
 2003e54:	8c790f04 	addi	r17,r17,-7108
 2003e58:	480f883a 	mov	r7,r9
 2003e5c:	400d883a 	mov	r6,r8
 2003e60:	8009883a 	mov	r4,r16
 2003e64:	880b883a 	mov	r5,r17
 2003e68:	2003ed80 	call	2003ed8 <copysign>
 2003e6c:	180b883a 	mov	r5,r3
 2003e70:	800d883a 	mov	r6,r16
 2003e74:	880f883a 	mov	r7,r17
 2003e78:	1009883a 	mov	r4,r2
 2003e7c:	003fc306 	br	2003d8c <scalbn+0x94>
 2003e80:	00bff284 	movi	r2,-54
 2003e84:	11000716 	blt	r2,r4,2003ea4 <scalbn+0x1ac>
 2003e88:	00b0d414 	movui	r2,50000
 2003e8c:	143fee16 	blt	r2,r16,2003e48 <scalbn+0x150>
 2003e90:	0430be74 	movhi	r16,49913
 2003e94:	843cd644 	addi	r16,r16,-3239
 2003e98:	04406974 	movhi	r17,421
 2003e9c:	8c5b87c4 	addi	r17,r17,28191
 2003ea0:	003fed06 	br	2003e58 <scalbn+0x160>
 2003ea4:	21000d84 	addi	r4,r4,54
 2003ea8:	2008953a 	slli	r4,r4,20
 2003eac:	01e00434 	movhi	r7,32784
 2003eb0:	39ffffc4 	addi	r7,r7,-1
 2003eb4:	51ce703a 	and	r7,r10,r7
 2003eb8:	390eb03a 	or	r7,r7,r4
 2003ebc:	024f2434 	movhi	r9,15504
 2003ec0:	4009883a 	mov	r4,r8
 2003ec4:	0011883a 	mov	r8,zero
 2003ec8:	380b883a 	mov	r5,r7
 2003ecc:	400d883a 	mov	r6,r8
 2003ed0:	480f883a 	mov	r7,r9
 2003ed4:	003fad06 	br	2003d8c <scalbn+0x94>

02003ed8 <copysign>:
 2003ed8:	3813883a 	mov	r9,r7
 2003edc:	01e00034 	movhi	r7,32768
 2003ee0:	39ffffc4 	addi	r7,r7,-1
 2003ee4:	394e703a 	and	r7,r7,r5
 2003ee8:	4aa0002c 	andhi	r10,r9,32768
 2003eec:	3a8eb03a 	or	r7,r7,r10
 2003ef0:	2005883a 	mov	r2,r4
 2003ef4:	3807883a 	mov	r3,r7
 2003ef8:	f800283a 	ret

02003efc <_fpadd_parts>:
 2003efc:	defff804 	addi	sp,sp,-32
 2003f00:	dcc00315 	stw	r19,12(sp)
 2003f04:	2027883a 	mov	r19,r4
 2003f08:	21000017 	ldw	r4,0(r4)
 2003f0c:	00c00044 	movi	r3,1
 2003f10:	dd400515 	stw	r21,20(sp)
 2003f14:	dd000415 	stw	r20,16(sp)
 2003f18:	ddc00715 	stw	r23,28(sp)
 2003f1c:	dd800615 	stw	r22,24(sp)
 2003f20:	dc800215 	stw	r18,8(sp)
 2003f24:	dc400115 	stw	r17,4(sp)
 2003f28:	dc000015 	stw	r16,0(sp)
 2003f2c:	282b883a 	mov	r21,r5
 2003f30:	3029883a 	mov	r20,r6
 2003f34:	1900632e 	bgeu	r3,r4,20040c4 <_fpadd_parts+0x1c8>
 2003f38:	28800017 	ldw	r2,0(r5)
 2003f3c:	1880812e 	bgeu	r3,r2,2004144 <_fpadd_parts+0x248>
 2003f40:	00c00104 	movi	r3,4
 2003f44:	20c0dc26 	beq	r4,r3,20042b8 <_fpadd_parts+0x3bc>
 2003f48:	10c07e26 	beq	r2,r3,2004144 <_fpadd_parts+0x248>
 2003f4c:	00c00084 	movi	r3,2
 2003f50:	10c06726 	beq	r2,r3,20040f0 <_fpadd_parts+0x1f4>
 2003f54:	20c07b26 	beq	r4,r3,2004144 <_fpadd_parts+0x248>
 2003f58:	9dc00217 	ldw	r23,8(r19)
 2003f5c:	28c00217 	ldw	r3,8(r5)
 2003f60:	9c400317 	ldw	r17,12(r19)
 2003f64:	2bc00317 	ldw	r15,12(r5)
 2003f68:	b8cdc83a 	sub	r6,r23,r3
 2003f6c:	9c800417 	ldw	r18,16(r19)
 2003f70:	2c000417 	ldw	r16,16(r5)
 2003f74:	3009883a 	mov	r4,r6
 2003f78:	30009716 	blt	r6,zero,20041d8 <_fpadd_parts+0x2dc>
 2003f7c:	00800fc4 	movi	r2,63
 2003f80:	11806b16 	blt	r2,r6,2004130 <_fpadd_parts+0x234>
 2003f84:	0100a40e 	bge	zero,r4,2004218 <_fpadd_parts+0x31c>
 2003f88:	35bff804 	addi	r22,r6,-32
 2003f8c:	b000bc16 	blt	r22,zero,2004280 <_fpadd_parts+0x384>
 2003f90:	8596d83a 	srl	r11,r16,r22
 2003f94:	0019883a 	mov	r12,zero
 2003f98:	0013883a 	mov	r9,zero
 2003f9c:	01000044 	movi	r4,1
 2003fa0:	0015883a 	mov	r10,zero
 2003fa4:	b000be16 	blt	r22,zero,20042a0 <_fpadd_parts+0x3a4>
 2003fa8:	2590983a 	sll	r8,r4,r22
 2003fac:	000f883a 	mov	r7,zero
 2003fb0:	00bfffc4 	movi	r2,-1
 2003fb4:	3889883a 	add	r4,r7,r2
 2003fb8:	408b883a 	add	r5,r8,r2
 2003fbc:	21cd803a 	cmpltu	r6,r4,r7
 2003fc0:	314b883a 	add	r5,r6,r5
 2003fc4:	7904703a 	and	r2,r15,r4
 2003fc8:	8146703a 	and	r3,r16,r5
 2003fcc:	10c4b03a 	or	r2,r2,r3
 2003fd0:	10000226 	beq	r2,zero,2003fdc <_fpadd_parts+0xe0>
 2003fd4:	02400044 	movi	r9,1
 2003fd8:	0015883a 	mov	r10,zero
 2003fdc:	5a5eb03a 	or	r15,r11,r9
 2003fe0:	62a0b03a 	or	r16,r12,r10
 2003fe4:	99400117 	ldw	r5,4(r19)
 2003fe8:	a8800117 	ldw	r2,4(r21)
 2003fec:	28806e26 	beq	r5,r2,20041a8 <_fpadd_parts+0x2ac>
 2003ff0:	28006626 	beq	r5,zero,200418c <_fpadd_parts+0x290>
 2003ff4:	7c45c83a 	sub	r2,r15,r17
 2003ff8:	7889803a 	cmpltu	r4,r15,r2
 2003ffc:	8487c83a 	sub	r3,r16,r18
 2004000:	1909c83a 	sub	r4,r3,r4
 2004004:	100d883a 	mov	r6,r2
 2004008:	200f883a 	mov	r7,r4
 200400c:	38007716 	blt	r7,zero,20041ec <_fpadd_parts+0x2f0>
 2004010:	a5c00215 	stw	r23,8(r20)
 2004014:	a1c00415 	stw	r7,16(r20)
 2004018:	a0000115 	stw	zero,4(r20)
 200401c:	a1800315 	stw	r6,12(r20)
 2004020:	a2000317 	ldw	r8,12(r20)
 2004024:	a2400417 	ldw	r9,16(r20)
 2004028:	00bfffc4 	movi	r2,-1
 200402c:	408b883a 	add	r5,r8,r2
 2004030:	2a09803a 	cmpltu	r4,r5,r8
 2004034:	488d883a 	add	r6,r9,r2
 2004038:	01c40034 	movhi	r7,4096
 200403c:	39ffffc4 	addi	r7,r7,-1
 2004040:	218d883a 	add	r6,r4,r6
 2004044:	39801736 	bltu	r7,r6,20040a4 <_fpadd_parts+0x1a8>
 2004048:	31c06526 	beq	r6,r7,20041e0 <_fpadd_parts+0x2e4>
 200404c:	a3000217 	ldw	r12,8(r20)
 2004050:	4209883a 	add	r4,r8,r8
 2004054:	00bfffc4 	movi	r2,-1
 2004058:	220f803a 	cmpltu	r7,r4,r8
 200405c:	4a4b883a 	add	r5,r9,r9
 2004060:	394f883a 	add	r7,r7,r5
 2004064:	2095883a 	add	r10,r4,r2
 2004068:	3897883a 	add	r11,r7,r2
 200406c:	510d803a 	cmpltu	r6,r10,r4
 2004070:	6099883a 	add	r12,r12,r2
 2004074:	32d7883a 	add	r11,r6,r11
 2004078:	00840034 	movhi	r2,4096
 200407c:	10bfffc4 	addi	r2,r2,-1
 2004080:	2011883a 	mov	r8,r4
 2004084:	3813883a 	mov	r9,r7
 2004088:	a1000315 	stw	r4,12(r20)
 200408c:	a1c00415 	stw	r7,16(r20)
 2004090:	a3000215 	stw	r12,8(r20)
 2004094:	12c00336 	bltu	r2,r11,20040a4 <_fpadd_parts+0x1a8>
 2004098:	58bfed1e 	bne	r11,r2,2004050 <_fpadd_parts+0x154>
 200409c:	00bfff84 	movi	r2,-2
 20040a0:	12bfeb2e 	bgeu	r2,r10,2004050 <_fpadd_parts+0x154>
 20040a4:	a2800417 	ldw	r10,16(r20)
 20040a8:	008000c4 	movi	r2,3
 20040ac:	00c80034 	movhi	r3,8192
 20040b0:	18ffffc4 	addi	r3,r3,-1
 20040b4:	a2400317 	ldw	r9,12(r20)
 20040b8:	a0800015 	stw	r2,0(r20)
 20040bc:	1a802336 	bltu	r3,r10,200414c <_fpadd_parts+0x250>
 20040c0:	a027883a 	mov	r19,r20
 20040c4:	9805883a 	mov	r2,r19
 20040c8:	ddc00717 	ldw	r23,28(sp)
 20040cc:	dd800617 	ldw	r22,24(sp)
 20040d0:	dd400517 	ldw	r21,20(sp)
 20040d4:	dd000417 	ldw	r20,16(sp)
 20040d8:	dcc00317 	ldw	r19,12(sp)
 20040dc:	dc800217 	ldw	r18,8(sp)
 20040e0:	dc400117 	ldw	r17,4(sp)
 20040e4:	dc000017 	ldw	r16,0(sp)
 20040e8:	dec00804 	addi	sp,sp,32
 20040ec:	f800283a 	ret
 20040f0:	20fff41e 	bne	r4,r3,20040c4 <_fpadd_parts+0x1c8>
 20040f4:	31000015 	stw	r4,0(r6)
 20040f8:	98800117 	ldw	r2,4(r19)
 20040fc:	30800115 	stw	r2,4(r6)
 2004100:	98c00217 	ldw	r3,8(r19)
 2004104:	30c00215 	stw	r3,8(r6)
 2004108:	98800317 	ldw	r2,12(r19)
 200410c:	30800315 	stw	r2,12(r6)
 2004110:	98c00417 	ldw	r3,16(r19)
 2004114:	30c00415 	stw	r3,16(r6)
 2004118:	98800117 	ldw	r2,4(r19)
 200411c:	28c00117 	ldw	r3,4(r5)
 2004120:	3027883a 	mov	r19,r6
 2004124:	10c4703a 	and	r2,r2,r3
 2004128:	30800115 	stw	r2,4(r6)
 200412c:	003fe506 	br	20040c4 <_fpadd_parts+0x1c8>
 2004130:	1dc02616 	blt	r3,r23,20041cc <_fpadd_parts+0x2d0>
 2004134:	0023883a 	mov	r17,zero
 2004138:	182f883a 	mov	r23,r3
 200413c:	0025883a 	mov	r18,zero
 2004140:	003fa806 	br	2003fe4 <_fpadd_parts+0xe8>
 2004144:	a827883a 	mov	r19,r21
 2004148:	003fde06 	br	20040c4 <_fpadd_parts+0x1c8>
 200414c:	01800044 	movi	r6,1
 2004150:	500497fa 	slli	r2,r10,31
 2004154:	4808d07a 	srli	r4,r9,1
 2004158:	518ad83a 	srl	r5,r10,r6
 200415c:	a2000217 	ldw	r8,8(r20)
 2004160:	1108b03a 	or	r4,r2,r4
 2004164:	0007883a 	mov	r3,zero
 2004168:	4984703a 	and	r2,r9,r6
 200416c:	208cb03a 	or	r6,r4,r2
 2004170:	28ceb03a 	or	r7,r5,r3
 2004174:	42000044 	addi	r8,r8,1
 2004178:	a027883a 	mov	r19,r20
 200417c:	a1c00415 	stw	r7,16(r20)
 2004180:	a2000215 	stw	r8,8(r20)
 2004184:	a1800315 	stw	r6,12(r20)
 2004188:	003fce06 	br	20040c4 <_fpadd_parts+0x1c8>
 200418c:	8bc5c83a 	sub	r2,r17,r15
 2004190:	8889803a 	cmpltu	r4,r17,r2
 2004194:	9407c83a 	sub	r3,r18,r16
 2004198:	1909c83a 	sub	r4,r3,r4
 200419c:	100d883a 	mov	r6,r2
 20041a0:	200f883a 	mov	r7,r4
 20041a4:	003f9906 	br	200400c <_fpadd_parts+0x110>
 20041a8:	8bc5883a 	add	r2,r17,r15
 20041ac:	1449803a 	cmpltu	r4,r2,r17
 20041b0:	9407883a 	add	r3,r18,r16
 20041b4:	20c9883a 	add	r4,r4,r3
 20041b8:	a1400115 	stw	r5,4(r20)
 20041bc:	a5c00215 	stw	r23,8(r20)
 20041c0:	a0800315 	stw	r2,12(r20)
 20041c4:	a1000415 	stw	r4,16(r20)
 20041c8:	003fb606 	br	20040a4 <_fpadd_parts+0x1a8>
 20041cc:	001f883a 	mov	r15,zero
 20041d0:	0021883a 	mov	r16,zero
 20041d4:	003f8306 	br	2003fe4 <_fpadd_parts+0xe8>
 20041d8:	018dc83a 	sub	r6,zero,r6
 20041dc:	003f6706 	br	2003f7c <_fpadd_parts+0x80>
 20041e0:	00bfff84 	movi	r2,-2
 20041e4:	117faf36 	bltu	r2,r5,20040a4 <_fpadd_parts+0x1a8>
 20041e8:	003f9806 	br	200404c <_fpadd_parts+0x150>
 20041ec:	0005883a 	mov	r2,zero
 20041f0:	1189c83a 	sub	r4,r2,r6
 20041f4:	1105803a 	cmpltu	r2,r2,r4
 20041f8:	01cbc83a 	sub	r5,zero,r7
 20041fc:	2885c83a 	sub	r2,r5,r2
 2004200:	01800044 	movi	r6,1
 2004204:	a1800115 	stw	r6,4(r20)
 2004208:	a5c00215 	stw	r23,8(r20)
 200420c:	a1000315 	stw	r4,12(r20)
 2004210:	a0800415 	stw	r2,16(r20)
 2004214:	003f8206 	br	2004020 <_fpadd_parts+0x124>
 2004218:	203f7226 	beq	r4,zero,2003fe4 <_fpadd_parts+0xe8>
 200421c:	35bff804 	addi	r22,r6,-32
 2004220:	b9af883a 	add	r23,r23,r6
 2004224:	b0003116 	blt	r22,zero,20042ec <_fpadd_parts+0x3f0>
 2004228:	959ad83a 	srl	r13,r18,r22
 200422c:	001d883a 	mov	r14,zero
 2004230:	000f883a 	mov	r7,zero
 2004234:	01000044 	movi	r4,1
 2004238:	0011883a 	mov	r8,zero
 200423c:	b0002516 	blt	r22,zero,20042d4 <_fpadd_parts+0x3d8>
 2004240:	2594983a 	sll	r10,r4,r22
 2004244:	0013883a 	mov	r9,zero
 2004248:	00bfffc4 	movi	r2,-1
 200424c:	4889883a 	add	r4,r9,r2
 2004250:	508b883a 	add	r5,r10,r2
 2004254:	224d803a 	cmpltu	r6,r4,r9
 2004258:	314b883a 	add	r5,r6,r5
 200425c:	8904703a 	and	r2,r17,r4
 2004260:	9146703a 	and	r3,r18,r5
 2004264:	10c4b03a 	or	r2,r2,r3
 2004268:	10000226 	beq	r2,zero,2004274 <_fpadd_parts+0x378>
 200426c:	01c00044 	movi	r7,1
 2004270:	0011883a 	mov	r8,zero
 2004274:	69e2b03a 	or	r17,r13,r7
 2004278:	7224b03a 	or	r18,r14,r8
 200427c:	003f5906 	br	2003fe4 <_fpadd_parts+0xe8>
 2004280:	8407883a 	add	r3,r16,r16
 2004284:	008007c4 	movi	r2,31
 2004288:	1185c83a 	sub	r2,r2,r6
 200428c:	1886983a 	sll	r3,r3,r2
 2004290:	7996d83a 	srl	r11,r15,r6
 2004294:	8198d83a 	srl	r12,r16,r6
 2004298:	1ad6b03a 	or	r11,r3,r11
 200429c:	003f3e06 	br	2003f98 <_fpadd_parts+0x9c>
 20042a0:	2006d07a 	srli	r3,r4,1
 20042a4:	008007c4 	movi	r2,31
 20042a8:	1185c83a 	sub	r2,r2,r6
 20042ac:	1890d83a 	srl	r8,r3,r2
 20042b0:	218e983a 	sll	r7,r4,r6
 20042b4:	003f3e06 	br	2003fb0 <_fpadd_parts+0xb4>
 20042b8:	113f821e 	bne	r2,r4,20040c4 <_fpadd_parts+0x1c8>
 20042bc:	28c00117 	ldw	r3,4(r5)
 20042c0:	98800117 	ldw	r2,4(r19)
 20042c4:	10ff7f26 	beq	r2,r3,20040c4 <_fpadd_parts+0x1c8>
 20042c8:	04c08074 	movhi	r19,513
 20042cc:	9ce6fc04 	addi	r19,r19,-25616
 20042d0:	003f7c06 	br	20040c4 <_fpadd_parts+0x1c8>
 20042d4:	2006d07a 	srli	r3,r4,1
 20042d8:	008007c4 	movi	r2,31
 20042dc:	1185c83a 	sub	r2,r2,r6
 20042e0:	1894d83a 	srl	r10,r3,r2
 20042e4:	2192983a 	sll	r9,r4,r6
 20042e8:	003fd706 	br	2004248 <_fpadd_parts+0x34c>
 20042ec:	9487883a 	add	r3,r18,r18
 20042f0:	008007c4 	movi	r2,31
 20042f4:	1185c83a 	sub	r2,r2,r6
 20042f8:	1886983a 	sll	r3,r3,r2
 20042fc:	899ad83a 	srl	r13,r17,r6
 2004300:	919cd83a 	srl	r14,r18,r6
 2004304:	1b5ab03a 	or	r13,r3,r13
 2004308:	003fc906 	br	2004230 <_fpadd_parts+0x334>

0200430c <__subdf3>:
 200430c:	deffea04 	addi	sp,sp,-88
 2004310:	dcc01415 	stw	r19,80(sp)
 2004314:	dcc00404 	addi	r19,sp,16
 2004318:	2011883a 	mov	r8,r4
 200431c:	2813883a 	mov	r9,r5
 2004320:	dc401315 	stw	r17,76(sp)
 2004324:	d809883a 	mov	r4,sp
 2004328:	980b883a 	mov	r5,r19
 200432c:	dc400904 	addi	r17,sp,36
 2004330:	dfc01515 	stw	ra,84(sp)
 2004334:	da400115 	stw	r9,4(sp)
 2004338:	d9c00315 	stw	r7,12(sp)
 200433c:	da000015 	stw	r8,0(sp)
 2004340:	d9800215 	stw	r6,8(sp)
 2004344:	20055a00 	call	20055a0 <__unpack_d>
 2004348:	d9000204 	addi	r4,sp,8
 200434c:	880b883a 	mov	r5,r17
 2004350:	20055a00 	call	20055a0 <__unpack_d>
 2004354:	d8800a17 	ldw	r2,40(sp)
 2004358:	880b883a 	mov	r5,r17
 200435c:	9809883a 	mov	r4,r19
 2004360:	d9800e04 	addi	r6,sp,56
 2004364:	1080005c 	xori	r2,r2,1
 2004368:	d8800a15 	stw	r2,40(sp)
 200436c:	2003efc0 	call	2003efc <_fpadd_parts>
 2004370:	1009883a 	mov	r4,r2
 2004374:	200528c0 	call	200528c <__pack_d>
 2004378:	dfc01517 	ldw	ra,84(sp)
 200437c:	dcc01417 	ldw	r19,80(sp)
 2004380:	dc401317 	ldw	r17,76(sp)
 2004384:	dec01604 	addi	sp,sp,88
 2004388:	f800283a 	ret

0200438c <__adddf3>:
 200438c:	deffea04 	addi	sp,sp,-88
 2004390:	dcc01415 	stw	r19,80(sp)
 2004394:	dcc00404 	addi	r19,sp,16
 2004398:	2011883a 	mov	r8,r4
 200439c:	2813883a 	mov	r9,r5
 20043a0:	dc401315 	stw	r17,76(sp)
 20043a4:	d809883a 	mov	r4,sp
 20043a8:	980b883a 	mov	r5,r19
 20043ac:	dc400904 	addi	r17,sp,36
 20043b0:	dfc01515 	stw	ra,84(sp)
 20043b4:	da400115 	stw	r9,4(sp)
 20043b8:	d9c00315 	stw	r7,12(sp)
 20043bc:	da000015 	stw	r8,0(sp)
 20043c0:	d9800215 	stw	r6,8(sp)
 20043c4:	20055a00 	call	20055a0 <__unpack_d>
 20043c8:	d9000204 	addi	r4,sp,8
 20043cc:	880b883a 	mov	r5,r17
 20043d0:	20055a00 	call	20055a0 <__unpack_d>
 20043d4:	d9800e04 	addi	r6,sp,56
 20043d8:	9809883a 	mov	r4,r19
 20043dc:	880b883a 	mov	r5,r17
 20043e0:	2003efc0 	call	2003efc <_fpadd_parts>
 20043e4:	1009883a 	mov	r4,r2
 20043e8:	200528c0 	call	200528c <__pack_d>
 20043ec:	dfc01517 	ldw	ra,84(sp)
 20043f0:	dcc01417 	ldw	r19,80(sp)
 20043f4:	dc401317 	ldw	r17,76(sp)
 20043f8:	dec01604 	addi	sp,sp,88
 20043fc:	f800283a 	ret

02004400 <__muldf3>:
 2004400:	deffe004 	addi	sp,sp,-128
 2004404:	dc401815 	stw	r17,96(sp)
 2004408:	dc400404 	addi	r17,sp,16
 200440c:	2011883a 	mov	r8,r4
 2004410:	2813883a 	mov	r9,r5
 2004414:	dc001715 	stw	r16,92(sp)
 2004418:	d809883a 	mov	r4,sp
 200441c:	880b883a 	mov	r5,r17
 2004420:	dc000904 	addi	r16,sp,36
 2004424:	dfc01f15 	stw	ra,124(sp)
 2004428:	da400115 	stw	r9,4(sp)
 200442c:	d9c00315 	stw	r7,12(sp)
 2004430:	da000015 	stw	r8,0(sp)
 2004434:	d9800215 	stw	r6,8(sp)
 2004438:	ddc01e15 	stw	r23,120(sp)
 200443c:	dd801d15 	stw	r22,116(sp)
 2004440:	dd401c15 	stw	r21,112(sp)
 2004444:	dd001b15 	stw	r20,108(sp)
 2004448:	dcc01a15 	stw	r19,104(sp)
 200444c:	dc801915 	stw	r18,100(sp)
 2004450:	20055a00 	call	20055a0 <__unpack_d>
 2004454:	d9000204 	addi	r4,sp,8
 2004458:	800b883a 	mov	r5,r16
 200445c:	20055a00 	call	20055a0 <__unpack_d>
 2004460:	d9000417 	ldw	r4,16(sp)
 2004464:	00800044 	movi	r2,1
 2004468:	1100102e 	bgeu	r2,r4,20044ac <__muldf3+0xac>
 200446c:	d8c00917 	ldw	r3,36(sp)
 2004470:	10c0062e 	bgeu	r2,r3,200448c <__muldf3+0x8c>
 2004474:	00800104 	movi	r2,4
 2004478:	20800a26 	beq	r4,r2,20044a4 <__muldf3+0xa4>
 200447c:	1880cc26 	beq	r3,r2,20047b0 <__muldf3+0x3b0>
 2004480:	00800084 	movi	r2,2
 2004484:	20800926 	beq	r4,r2,20044ac <__muldf3+0xac>
 2004488:	1880191e 	bne	r3,r2,20044f0 <__muldf3+0xf0>
 200448c:	d8c00a17 	ldw	r3,40(sp)
 2004490:	d8800517 	ldw	r2,20(sp)
 2004494:	8009883a 	mov	r4,r16
 2004498:	10c4c03a 	cmpne	r2,r2,r3
 200449c:	d8800a15 	stw	r2,40(sp)
 20044a0:	00000706 	br	20044c0 <__muldf3+0xc0>
 20044a4:	00800084 	movi	r2,2
 20044a8:	1880c326 	beq	r3,r2,20047b8 <__muldf3+0x3b8>
 20044ac:	d8800517 	ldw	r2,20(sp)
 20044b0:	d8c00a17 	ldw	r3,40(sp)
 20044b4:	8809883a 	mov	r4,r17
 20044b8:	10c4c03a 	cmpne	r2,r2,r3
 20044bc:	d8800515 	stw	r2,20(sp)
 20044c0:	200528c0 	call	200528c <__pack_d>
 20044c4:	dfc01f17 	ldw	ra,124(sp)
 20044c8:	ddc01e17 	ldw	r23,120(sp)
 20044cc:	dd801d17 	ldw	r22,116(sp)
 20044d0:	dd401c17 	ldw	r21,112(sp)
 20044d4:	dd001b17 	ldw	r20,108(sp)
 20044d8:	dcc01a17 	ldw	r19,104(sp)
 20044dc:	dc801917 	ldw	r18,100(sp)
 20044e0:	dc401817 	ldw	r17,96(sp)
 20044e4:	dc001717 	ldw	r16,92(sp)
 20044e8:	dec02004 	addi	sp,sp,128
 20044ec:	f800283a 	ret
 20044f0:	dd800717 	ldw	r22,28(sp)
 20044f4:	dc800c17 	ldw	r18,48(sp)
 20044f8:	002b883a 	mov	r21,zero
 20044fc:	0023883a 	mov	r17,zero
 2004500:	a80b883a 	mov	r5,r21
 2004504:	b00d883a 	mov	r6,r22
 2004508:	880f883a 	mov	r7,r17
 200450c:	ddc00817 	ldw	r23,32(sp)
 2004510:	dcc00d17 	ldw	r19,52(sp)
 2004514:	9009883a 	mov	r4,r18
 2004518:	20051740 	call	2005174 <__muldi3>
 200451c:	001b883a 	mov	r13,zero
 2004520:	680f883a 	mov	r7,r13
 2004524:	b009883a 	mov	r4,r22
 2004528:	000b883a 	mov	r5,zero
 200452c:	980d883a 	mov	r6,r19
 2004530:	b82d883a 	mov	r22,r23
 2004534:	002f883a 	mov	r23,zero
 2004538:	db401615 	stw	r13,88(sp)
 200453c:	d8801315 	stw	r2,76(sp)
 2004540:	d8c01415 	stw	r3,80(sp)
 2004544:	dcc01515 	stw	r19,84(sp)
 2004548:	20051740 	call	2005174 <__muldi3>
 200454c:	b00d883a 	mov	r6,r22
 2004550:	000b883a 	mov	r5,zero
 2004554:	9009883a 	mov	r4,r18
 2004558:	b80f883a 	mov	r7,r23
 200455c:	1021883a 	mov	r16,r2
 2004560:	1823883a 	mov	r17,r3
 2004564:	20051740 	call	2005174 <__muldi3>
 2004568:	8085883a 	add	r2,r16,r2
 200456c:	140d803a 	cmpltu	r6,r2,r16
 2004570:	88c7883a 	add	r3,r17,r3
 2004574:	30cd883a 	add	r6,r6,r3
 2004578:	1029883a 	mov	r20,r2
 200457c:	302b883a 	mov	r21,r6
 2004580:	da801317 	ldw	r10,76(sp)
 2004584:	dac01417 	ldw	r11,80(sp)
 2004588:	db001517 	ldw	r12,84(sp)
 200458c:	db401617 	ldw	r13,88(sp)
 2004590:	3440612e 	bgeu	r6,r17,2004718 <__muldf3+0x318>
 2004594:	0009883a 	mov	r4,zero
 2004598:	5105883a 	add	r2,r10,r4
 200459c:	128d803a 	cmpltu	r6,r2,r10
 20045a0:	5d07883a 	add	r3,r11,r20
 20045a4:	30cd883a 	add	r6,r6,r3
 20045a8:	0021883a 	mov	r16,zero
 20045ac:	04400044 	movi	r17,1
 20045b0:	1025883a 	mov	r18,r2
 20045b4:	3027883a 	mov	r19,r6
 20045b8:	32c06236 	bltu	r6,r11,2004744 <__muldf3+0x344>
 20045bc:	59807a26 	beq	r11,r6,20047a8 <__muldf3+0x3a8>
 20045c0:	680b883a 	mov	r5,r13
 20045c4:	b80f883a 	mov	r7,r23
 20045c8:	6009883a 	mov	r4,r12
 20045cc:	b00d883a 	mov	r6,r22
 20045d0:	20051740 	call	2005174 <__muldi3>
 20045d4:	1009883a 	mov	r4,r2
 20045d8:	000f883a 	mov	r7,zero
 20045dc:	1545883a 	add	r2,r2,r21
 20045e0:	1111803a 	cmpltu	r8,r2,r4
 20045e4:	19c7883a 	add	r3,r3,r7
 20045e8:	40c7883a 	add	r3,r8,r3
 20045ec:	88cb883a 	add	r5,r17,r3
 20045f0:	d8c00617 	ldw	r3,24(sp)
 20045f4:	8089883a 	add	r4,r16,r2
 20045f8:	d8800b17 	ldw	r2,44(sp)
 20045fc:	18c00104 	addi	r3,r3,4
 2004600:	240d803a 	cmpltu	r6,r4,r16
 2004604:	10c7883a 	add	r3,r2,r3
 2004608:	2013883a 	mov	r9,r4
 200460c:	d8800a17 	ldw	r2,40(sp)
 2004610:	d9000517 	ldw	r4,20(sp)
 2004614:	314d883a 	add	r6,r6,r5
 2004618:	3015883a 	mov	r10,r6
 200461c:	2088c03a 	cmpne	r4,r4,r2
 2004620:	00880034 	movhi	r2,8192
 2004624:	10bfffc4 	addi	r2,r2,-1
 2004628:	d9000f15 	stw	r4,60(sp)
 200462c:	d8c01015 	stw	r3,64(sp)
 2004630:	1180162e 	bgeu	r2,r6,200468c <__muldf3+0x28c>
 2004634:	1811883a 	mov	r8,r3
 2004638:	101f883a 	mov	r15,r2
 200463c:	980497fa 	slli	r2,r19,31
 2004640:	9016d07a 	srli	r11,r18,1
 2004644:	500697fa 	slli	r3,r10,31
 2004648:	480cd07a 	srli	r6,r9,1
 200464c:	500ed07a 	srli	r7,r10,1
 2004650:	12d6b03a 	or	r11,r2,r11
 2004654:	00800044 	movi	r2,1
 2004658:	198cb03a 	or	r6,r3,r6
 200465c:	4888703a 	and	r4,r9,r2
 2004660:	9818d07a 	srli	r12,r19,1
 2004664:	001b883a 	mov	r13,zero
 2004668:	03a00034 	movhi	r14,32768
 200466c:	3013883a 	mov	r9,r6
 2004670:	3815883a 	mov	r10,r7
 2004674:	4091883a 	add	r8,r8,r2
 2004678:	20000226 	beq	r4,zero,2004684 <__muldf3+0x284>
 200467c:	5b64b03a 	or	r18,r11,r13
 2004680:	63a6b03a 	or	r19,r12,r14
 2004684:	7abfed36 	bltu	r15,r10,200463c <__muldf3+0x23c>
 2004688:	da001015 	stw	r8,64(sp)
 200468c:	00840034 	movhi	r2,4096
 2004690:	10bfffc4 	addi	r2,r2,-1
 2004694:	12801436 	bltu	r2,r10,20046e8 <__muldf3+0x2e8>
 2004698:	da001017 	ldw	r8,64(sp)
 200469c:	101f883a 	mov	r15,r2
 20046a0:	4a45883a 	add	r2,r9,r9
 20046a4:	124d803a 	cmpltu	r6,r2,r9
 20046a8:	5287883a 	add	r3,r10,r10
 20046ac:	9497883a 	add	r11,r18,r18
 20046b0:	5c8f803a 	cmpltu	r7,r11,r18
 20046b4:	9cd9883a 	add	r12,r19,r19
 20046b8:	01000044 	movi	r4,1
 20046bc:	30cd883a 	add	r6,r6,r3
 20046c0:	3b0f883a 	add	r7,r7,r12
 20046c4:	423fffc4 	addi	r8,r8,-1
 20046c8:	1013883a 	mov	r9,r2
 20046cc:	3015883a 	mov	r10,r6
 20046d0:	111ab03a 	or	r13,r2,r4
 20046d4:	98003016 	blt	r19,zero,2004798 <__muldf3+0x398>
 20046d8:	5825883a 	mov	r18,r11
 20046dc:	3827883a 	mov	r19,r7
 20046e0:	7abfef2e 	bgeu	r15,r10,20046a0 <__muldf3+0x2a0>
 20046e4:	da001015 	stw	r8,64(sp)
 20046e8:	00803fc4 	movi	r2,255
 20046ec:	488e703a 	and	r7,r9,r2
 20046f0:	00802004 	movi	r2,128
 20046f4:	0007883a 	mov	r3,zero
 20046f8:	0011883a 	mov	r8,zero
 20046fc:	38801826 	beq	r7,r2,2004760 <__muldf3+0x360>
 2004700:	008000c4 	movi	r2,3
 2004704:	d9000e04 	addi	r4,sp,56
 2004708:	da801215 	stw	r10,72(sp)
 200470c:	d8800e15 	stw	r2,56(sp)
 2004710:	da401115 	stw	r9,68(sp)
 2004714:	003f6a06 	br	20044c0 <__muldf3+0xc0>
 2004718:	89802126 	beq	r17,r6,20047a0 <__muldf3+0x3a0>
 200471c:	0009883a 	mov	r4,zero
 2004720:	5105883a 	add	r2,r10,r4
 2004724:	128d803a 	cmpltu	r6,r2,r10
 2004728:	5d07883a 	add	r3,r11,r20
 200472c:	30cd883a 	add	r6,r6,r3
 2004730:	0021883a 	mov	r16,zero
 2004734:	0023883a 	mov	r17,zero
 2004738:	1025883a 	mov	r18,r2
 200473c:	3027883a 	mov	r19,r6
 2004740:	32ff9e2e 	bgeu	r6,r11,20045bc <__muldf3+0x1bc>
 2004744:	00800044 	movi	r2,1
 2004748:	8089883a 	add	r4,r16,r2
 200474c:	240d803a 	cmpltu	r6,r4,r16
 2004750:	344d883a 	add	r6,r6,r17
 2004754:	2021883a 	mov	r16,r4
 2004758:	3023883a 	mov	r17,r6
 200475c:	003f9806 	br	20045c0 <__muldf3+0x1c0>
 2004760:	403fe71e 	bne	r8,zero,2004700 <__muldf3+0x300>
 2004764:	01004004 	movi	r4,256
 2004768:	4904703a 	and	r2,r9,r4
 200476c:	10c4b03a 	or	r2,r2,r3
 2004770:	103fe31e 	bne	r2,zero,2004700 <__muldf3+0x300>
 2004774:	94c4b03a 	or	r2,r18,r19
 2004778:	103fe126 	beq	r2,zero,2004700 <__muldf3+0x300>
 200477c:	49c5883a 	add	r2,r9,r7
 2004780:	1251803a 	cmpltu	r8,r2,r9
 2004784:	4291883a 	add	r8,r8,r10
 2004788:	013fc004 	movi	r4,-256
 200478c:	1112703a 	and	r9,r2,r4
 2004790:	4015883a 	mov	r10,r8
 2004794:	003fda06 	br	2004700 <__muldf3+0x300>
 2004798:	6813883a 	mov	r9,r13
 200479c:	003fce06 	br	20046d8 <__muldf3+0x2d8>
 20047a0:	143f7c36 	bltu	r2,r16,2004594 <__muldf3+0x194>
 20047a4:	003fdd06 	br	200471c <__muldf3+0x31c>
 20047a8:	12bf852e 	bgeu	r2,r10,20045c0 <__muldf3+0x1c0>
 20047ac:	003fe506 	br	2004744 <__muldf3+0x344>
 20047b0:	00800084 	movi	r2,2
 20047b4:	20bf351e 	bne	r4,r2,200448c <__muldf3+0x8c>
 20047b8:	01008074 	movhi	r4,513
 20047bc:	2126fc04 	addi	r4,r4,-25616
 20047c0:	003f3f06 	br	20044c0 <__muldf3+0xc0>

020047c4 <__divdf3>:
 20047c4:	deffed04 	addi	sp,sp,-76
 20047c8:	dcc01115 	stw	r19,68(sp)
 20047cc:	dcc00404 	addi	r19,sp,16
 20047d0:	2011883a 	mov	r8,r4
 20047d4:	2813883a 	mov	r9,r5
 20047d8:	dc000e15 	stw	r16,56(sp)
 20047dc:	d809883a 	mov	r4,sp
 20047e0:	980b883a 	mov	r5,r19
 20047e4:	dc000904 	addi	r16,sp,36
 20047e8:	dfc01215 	stw	ra,72(sp)
 20047ec:	da400115 	stw	r9,4(sp)
 20047f0:	d9c00315 	stw	r7,12(sp)
 20047f4:	da000015 	stw	r8,0(sp)
 20047f8:	d9800215 	stw	r6,8(sp)
 20047fc:	dc801015 	stw	r18,64(sp)
 2004800:	dc400f15 	stw	r17,60(sp)
 2004804:	20055a00 	call	20055a0 <__unpack_d>
 2004808:	d9000204 	addi	r4,sp,8
 200480c:	800b883a 	mov	r5,r16
 2004810:	20055a00 	call	20055a0 <__unpack_d>
 2004814:	d9000417 	ldw	r4,16(sp)
 2004818:	00800044 	movi	r2,1
 200481c:	11000b2e 	bgeu	r2,r4,200484c <__divdf3+0x88>
 2004820:	d9400917 	ldw	r5,36(sp)
 2004824:	1140762e 	bgeu	r2,r5,2004a00 <__divdf3+0x23c>
 2004828:	d8800517 	ldw	r2,20(sp)
 200482c:	d8c00a17 	ldw	r3,40(sp)
 2004830:	01800104 	movi	r6,4
 2004834:	10c4f03a 	xor	r2,r2,r3
 2004838:	d8800515 	stw	r2,20(sp)
 200483c:	21800226 	beq	r4,r6,2004848 <__divdf3+0x84>
 2004840:	00800084 	movi	r2,2
 2004844:	2080141e 	bne	r4,r2,2004898 <__divdf3+0xd4>
 2004848:	29000926 	beq	r5,r4,2004870 <__divdf3+0xac>
 200484c:	9809883a 	mov	r4,r19
 2004850:	200528c0 	call	200528c <__pack_d>
 2004854:	dfc01217 	ldw	ra,72(sp)
 2004858:	dcc01117 	ldw	r19,68(sp)
 200485c:	dc801017 	ldw	r18,64(sp)
 2004860:	dc400f17 	ldw	r17,60(sp)
 2004864:	dc000e17 	ldw	r16,56(sp)
 2004868:	dec01304 	addi	sp,sp,76
 200486c:	f800283a 	ret
 2004870:	01008074 	movhi	r4,513
 2004874:	2126fc04 	addi	r4,r4,-25616
 2004878:	200528c0 	call	200528c <__pack_d>
 200487c:	dfc01217 	ldw	ra,72(sp)
 2004880:	dcc01117 	ldw	r19,68(sp)
 2004884:	dc801017 	ldw	r18,64(sp)
 2004888:	dc400f17 	ldw	r17,60(sp)
 200488c:	dc000e17 	ldw	r16,56(sp)
 2004890:	dec01304 	addi	sp,sp,76
 2004894:	f800283a 	ret
 2004898:	29805b26 	beq	r5,r6,2004a08 <__divdf3+0x244>
 200489c:	28802d26 	beq	r5,r2,2004954 <__divdf3+0x190>
 20048a0:	d8c00617 	ldw	r3,24(sp)
 20048a4:	d8800b17 	ldw	r2,44(sp)
 20048a8:	d9c00817 	ldw	r7,32(sp)
 20048ac:	dc400d17 	ldw	r17,52(sp)
 20048b0:	188bc83a 	sub	r5,r3,r2
 20048b4:	d9800717 	ldw	r6,28(sp)
 20048b8:	dc000c17 	ldw	r16,48(sp)
 20048bc:	d9400615 	stw	r5,24(sp)
 20048c0:	3c403836 	bltu	r7,r17,20049a4 <__divdf3+0x1e0>
 20048c4:	89c03626 	beq	r17,r7,20049a0 <__divdf3+0x1dc>
 20048c8:	0015883a 	mov	r10,zero
 20048cc:	001d883a 	mov	r14,zero
 20048d0:	02c40034 	movhi	r11,4096
 20048d4:	001f883a 	mov	r15,zero
 20048d8:	003f883a 	mov	ra,zero
 20048dc:	04800f44 	movi	r18,61
 20048e0:	00000f06 	br	2004920 <__divdf3+0x15c>
 20048e4:	601d883a 	mov	r14,r12
 20048e8:	681f883a 	mov	r15,r13
 20048ec:	400d883a 	mov	r6,r8
 20048f0:	100f883a 	mov	r7,r2
 20048f4:	3191883a 	add	r8,r6,r6
 20048f8:	5808d07a 	srli	r4,r11,1
 20048fc:	4185803a 	cmpltu	r2,r8,r6
 2004900:	39d3883a 	add	r9,r7,r7
 2004904:	28c6b03a 	or	r3,r5,r3
 2004908:	1245883a 	add	r2,r2,r9
 200490c:	1815883a 	mov	r10,r3
 2004910:	2017883a 	mov	r11,r4
 2004914:	400d883a 	mov	r6,r8
 2004918:	100f883a 	mov	r7,r2
 200491c:	fc801726 	beq	ra,r18,200497c <__divdf3+0x1b8>
 2004920:	580a97fa 	slli	r5,r11,31
 2004924:	5006d07a 	srli	r3,r10,1
 2004928:	ffc00044 	addi	ra,ra,1
 200492c:	3c7ff136 	bltu	r7,r17,20048f4 <__divdf3+0x130>
 2004930:	3411c83a 	sub	r8,r6,r16
 2004934:	3205803a 	cmpltu	r2,r6,r8
 2004938:	3c53c83a 	sub	r9,r7,r17
 200493c:	7298b03a 	or	r12,r14,r10
 2004940:	7adab03a 	or	r13,r15,r11
 2004944:	4885c83a 	sub	r2,r9,r2
 2004948:	89ffe61e 	bne	r17,r7,20048e4 <__divdf3+0x120>
 200494c:	343fe936 	bltu	r6,r16,20048f4 <__divdf3+0x130>
 2004950:	003fe406 	br	20048e4 <__divdf3+0x120>
 2004954:	9809883a 	mov	r4,r19
 2004958:	d9800415 	stw	r6,16(sp)
 200495c:	200528c0 	call	200528c <__pack_d>
 2004960:	dfc01217 	ldw	ra,72(sp)
 2004964:	dcc01117 	ldw	r19,68(sp)
 2004968:	dc801017 	ldw	r18,64(sp)
 200496c:	dc400f17 	ldw	r17,60(sp)
 2004970:	dc000e17 	ldw	r16,56(sp)
 2004974:	dec01304 	addi	sp,sp,76
 2004978:	f800283a 	ret
 200497c:	00803fc4 	movi	r2,255
 2004980:	7090703a 	and	r8,r14,r2
 2004984:	00802004 	movi	r2,128
 2004988:	0007883a 	mov	r3,zero
 200498c:	0013883a 	mov	r9,zero
 2004990:	40800d26 	beq	r8,r2,20049c8 <__divdf3+0x204>
 2004994:	dbc00815 	stw	r15,32(sp)
 2004998:	db800715 	stw	r14,28(sp)
 200499c:	003fab06 	br	200484c <__divdf3+0x88>
 20049a0:	343fc92e 	bgeu	r6,r16,20048c8 <__divdf3+0x104>
 20049a4:	3185883a 	add	r2,r6,r6
 20049a8:	1189803a 	cmpltu	r4,r2,r6
 20049ac:	39c7883a 	add	r3,r7,r7
 20049b0:	20c9883a 	add	r4,r4,r3
 20049b4:	297fffc4 	addi	r5,r5,-1
 20049b8:	100d883a 	mov	r6,r2
 20049bc:	200f883a 	mov	r7,r4
 20049c0:	d9400615 	stw	r5,24(sp)
 20049c4:	003fc006 	br	20048c8 <__divdf3+0x104>
 20049c8:	483ff21e 	bne	r9,zero,2004994 <__divdf3+0x1d0>
 20049cc:	01004004 	movi	r4,256
 20049d0:	7104703a 	and	r2,r14,r4
 20049d4:	10c4b03a 	or	r2,r2,r3
 20049d8:	103fee1e 	bne	r2,zero,2004994 <__divdf3+0x1d0>
 20049dc:	31c4b03a 	or	r2,r6,r7
 20049e0:	103fec26 	beq	r2,zero,2004994 <__divdf3+0x1d0>
 20049e4:	7205883a 	add	r2,r14,r8
 20049e8:	1391803a 	cmpltu	r8,r2,r14
 20049ec:	43d1883a 	add	r8,r8,r15
 20049f0:	013fc004 	movi	r4,-256
 20049f4:	111c703a 	and	r14,r2,r4
 20049f8:	401f883a 	mov	r15,r8
 20049fc:	003fe506 	br	2004994 <__divdf3+0x1d0>
 2004a00:	8009883a 	mov	r4,r16
 2004a04:	003f9206 	br	2004850 <__divdf3+0x8c>
 2004a08:	9809883a 	mov	r4,r19
 2004a0c:	d8000715 	stw	zero,28(sp)
 2004a10:	d8000815 	stw	zero,32(sp)
 2004a14:	d8000615 	stw	zero,24(sp)
 2004a18:	003f8d06 	br	2004850 <__divdf3+0x8c>

02004a1c <__eqdf2>:
 2004a1c:	deffef04 	addi	sp,sp,-68
 2004a20:	dc400f15 	stw	r17,60(sp)
 2004a24:	dc400404 	addi	r17,sp,16
 2004a28:	2005883a 	mov	r2,r4
 2004a2c:	2807883a 	mov	r3,r5
 2004a30:	dc000e15 	stw	r16,56(sp)
 2004a34:	d809883a 	mov	r4,sp
 2004a38:	880b883a 	mov	r5,r17
 2004a3c:	dc000904 	addi	r16,sp,36
 2004a40:	d8c00115 	stw	r3,4(sp)
 2004a44:	d8800015 	stw	r2,0(sp)
 2004a48:	d9800215 	stw	r6,8(sp)
 2004a4c:	dfc01015 	stw	ra,64(sp)
 2004a50:	d9c00315 	stw	r7,12(sp)
 2004a54:	20055a00 	call	20055a0 <__unpack_d>
 2004a58:	d9000204 	addi	r4,sp,8
 2004a5c:	800b883a 	mov	r5,r16
 2004a60:	20055a00 	call	20055a0 <__unpack_d>
 2004a64:	d8800417 	ldw	r2,16(sp)
 2004a68:	00c00044 	movi	r3,1
 2004a6c:	180d883a 	mov	r6,r3
 2004a70:	1880062e 	bgeu	r3,r2,2004a8c <__eqdf2+0x70>
 2004a74:	d8800917 	ldw	r2,36(sp)
 2004a78:	8809883a 	mov	r4,r17
 2004a7c:	800b883a 	mov	r5,r16
 2004a80:	1880022e 	bgeu	r3,r2,2004a8c <__eqdf2+0x70>
 2004a84:	20056d80 	call	20056d8 <__fpcmp_parts_d>
 2004a88:	100d883a 	mov	r6,r2
 2004a8c:	3005883a 	mov	r2,r6
 2004a90:	dfc01017 	ldw	ra,64(sp)
 2004a94:	dc400f17 	ldw	r17,60(sp)
 2004a98:	dc000e17 	ldw	r16,56(sp)
 2004a9c:	dec01104 	addi	sp,sp,68
 2004aa0:	f800283a 	ret

02004aa4 <__nedf2>:
 2004aa4:	deffef04 	addi	sp,sp,-68
 2004aa8:	dc400f15 	stw	r17,60(sp)
 2004aac:	dc400404 	addi	r17,sp,16
 2004ab0:	2005883a 	mov	r2,r4
 2004ab4:	2807883a 	mov	r3,r5
 2004ab8:	dc000e15 	stw	r16,56(sp)
 2004abc:	d809883a 	mov	r4,sp
 2004ac0:	880b883a 	mov	r5,r17
 2004ac4:	dc000904 	addi	r16,sp,36
 2004ac8:	d8c00115 	stw	r3,4(sp)
 2004acc:	d8800015 	stw	r2,0(sp)
 2004ad0:	d9800215 	stw	r6,8(sp)
 2004ad4:	dfc01015 	stw	ra,64(sp)
 2004ad8:	d9c00315 	stw	r7,12(sp)
 2004adc:	20055a00 	call	20055a0 <__unpack_d>
 2004ae0:	d9000204 	addi	r4,sp,8
 2004ae4:	800b883a 	mov	r5,r16
 2004ae8:	20055a00 	call	20055a0 <__unpack_d>
 2004aec:	d8800417 	ldw	r2,16(sp)
 2004af0:	00c00044 	movi	r3,1
 2004af4:	180d883a 	mov	r6,r3
 2004af8:	1880062e 	bgeu	r3,r2,2004b14 <__nedf2+0x70>
 2004afc:	d8800917 	ldw	r2,36(sp)
 2004b00:	8809883a 	mov	r4,r17
 2004b04:	800b883a 	mov	r5,r16
 2004b08:	1880022e 	bgeu	r3,r2,2004b14 <__nedf2+0x70>
 2004b0c:	20056d80 	call	20056d8 <__fpcmp_parts_d>
 2004b10:	100d883a 	mov	r6,r2
 2004b14:	3005883a 	mov	r2,r6
 2004b18:	dfc01017 	ldw	ra,64(sp)
 2004b1c:	dc400f17 	ldw	r17,60(sp)
 2004b20:	dc000e17 	ldw	r16,56(sp)
 2004b24:	dec01104 	addi	sp,sp,68
 2004b28:	f800283a 	ret

02004b2c <__gtdf2>:
 2004b2c:	deffef04 	addi	sp,sp,-68
 2004b30:	dc400f15 	stw	r17,60(sp)
 2004b34:	dc400404 	addi	r17,sp,16
 2004b38:	2005883a 	mov	r2,r4
 2004b3c:	2807883a 	mov	r3,r5
 2004b40:	dc000e15 	stw	r16,56(sp)
 2004b44:	d809883a 	mov	r4,sp
 2004b48:	880b883a 	mov	r5,r17
 2004b4c:	dc000904 	addi	r16,sp,36
 2004b50:	d8c00115 	stw	r3,4(sp)
 2004b54:	d8800015 	stw	r2,0(sp)
 2004b58:	d9800215 	stw	r6,8(sp)
 2004b5c:	dfc01015 	stw	ra,64(sp)
 2004b60:	d9c00315 	stw	r7,12(sp)
 2004b64:	20055a00 	call	20055a0 <__unpack_d>
 2004b68:	d9000204 	addi	r4,sp,8
 2004b6c:	800b883a 	mov	r5,r16
 2004b70:	20055a00 	call	20055a0 <__unpack_d>
 2004b74:	d8800417 	ldw	r2,16(sp)
 2004b78:	00c00044 	movi	r3,1
 2004b7c:	01bfffc4 	movi	r6,-1
 2004b80:	1880062e 	bgeu	r3,r2,2004b9c <__gtdf2+0x70>
 2004b84:	d8800917 	ldw	r2,36(sp)
 2004b88:	8809883a 	mov	r4,r17
 2004b8c:	800b883a 	mov	r5,r16
 2004b90:	1880022e 	bgeu	r3,r2,2004b9c <__gtdf2+0x70>
 2004b94:	20056d80 	call	20056d8 <__fpcmp_parts_d>
 2004b98:	100d883a 	mov	r6,r2
 2004b9c:	3005883a 	mov	r2,r6
 2004ba0:	dfc01017 	ldw	ra,64(sp)
 2004ba4:	dc400f17 	ldw	r17,60(sp)
 2004ba8:	dc000e17 	ldw	r16,56(sp)
 2004bac:	dec01104 	addi	sp,sp,68
 2004bb0:	f800283a 	ret

02004bb4 <__ltdf2>:
 2004bb4:	deffef04 	addi	sp,sp,-68
 2004bb8:	dc400f15 	stw	r17,60(sp)
 2004bbc:	dc400404 	addi	r17,sp,16
 2004bc0:	2005883a 	mov	r2,r4
 2004bc4:	2807883a 	mov	r3,r5
 2004bc8:	dc000e15 	stw	r16,56(sp)
 2004bcc:	d809883a 	mov	r4,sp
 2004bd0:	880b883a 	mov	r5,r17
 2004bd4:	dc000904 	addi	r16,sp,36
 2004bd8:	d8c00115 	stw	r3,4(sp)
 2004bdc:	d8800015 	stw	r2,0(sp)
 2004be0:	d9800215 	stw	r6,8(sp)
 2004be4:	dfc01015 	stw	ra,64(sp)
 2004be8:	d9c00315 	stw	r7,12(sp)
 2004bec:	20055a00 	call	20055a0 <__unpack_d>
 2004bf0:	d9000204 	addi	r4,sp,8
 2004bf4:	800b883a 	mov	r5,r16
 2004bf8:	20055a00 	call	20055a0 <__unpack_d>
 2004bfc:	d8800417 	ldw	r2,16(sp)
 2004c00:	00c00044 	movi	r3,1
 2004c04:	180d883a 	mov	r6,r3
 2004c08:	1880062e 	bgeu	r3,r2,2004c24 <__ltdf2+0x70>
 2004c0c:	d8800917 	ldw	r2,36(sp)
 2004c10:	8809883a 	mov	r4,r17
 2004c14:	800b883a 	mov	r5,r16
 2004c18:	1880022e 	bgeu	r3,r2,2004c24 <__ltdf2+0x70>
 2004c1c:	20056d80 	call	20056d8 <__fpcmp_parts_d>
 2004c20:	100d883a 	mov	r6,r2
 2004c24:	3005883a 	mov	r2,r6
 2004c28:	dfc01017 	ldw	ra,64(sp)
 2004c2c:	dc400f17 	ldw	r17,60(sp)
 2004c30:	dc000e17 	ldw	r16,56(sp)
 2004c34:	dec01104 	addi	sp,sp,68
 2004c38:	f800283a 	ret

02004c3c <__ledf2>:
 2004c3c:	deffef04 	addi	sp,sp,-68
 2004c40:	dc400f15 	stw	r17,60(sp)
 2004c44:	dc400404 	addi	r17,sp,16
 2004c48:	2005883a 	mov	r2,r4
 2004c4c:	2807883a 	mov	r3,r5
 2004c50:	dc000e15 	stw	r16,56(sp)
 2004c54:	d809883a 	mov	r4,sp
 2004c58:	880b883a 	mov	r5,r17
 2004c5c:	dc000904 	addi	r16,sp,36
 2004c60:	d8c00115 	stw	r3,4(sp)
 2004c64:	d8800015 	stw	r2,0(sp)
 2004c68:	d9800215 	stw	r6,8(sp)
 2004c6c:	dfc01015 	stw	ra,64(sp)
 2004c70:	d9c00315 	stw	r7,12(sp)
 2004c74:	20055a00 	call	20055a0 <__unpack_d>
 2004c78:	d9000204 	addi	r4,sp,8
 2004c7c:	800b883a 	mov	r5,r16
 2004c80:	20055a00 	call	20055a0 <__unpack_d>
 2004c84:	d8800417 	ldw	r2,16(sp)
 2004c88:	00c00044 	movi	r3,1
 2004c8c:	180d883a 	mov	r6,r3
 2004c90:	1880062e 	bgeu	r3,r2,2004cac <__ledf2+0x70>
 2004c94:	d8800917 	ldw	r2,36(sp)
 2004c98:	8809883a 	mov	r4,r17
 2004c9c:	800b883a 	mov	r5,r16
 2004ca0:	1880022e 	bgeu	r3,r2,2004cac <__ledf2+0x70>
 2004ca4:	20056d80 	call	20056d8 <__fpcmp_parts_d>
 2004ca8:	100d883a 	mov	r6,r2
 2004cac:	3005883a 	mov	r2,r6
 2004cb0:	dfc01017 	ldw	ra,64(sp)
 2004cb4:	dc400f17 	ldw	r17,60(sp)
 2004cb8:	dc000e17 	ldw	r16,56(sp)
 2004cbc:	dec01104 	addi	sp,sp,68
 2004cc0:	f800283a 	ret

02004cc4 <__floatsidf>:
 2004cc4:	2006d7fa 	srli	r3,r4,31
 2004cc8:	defff604 	addi	sp,sp,-40
 2004ccc:	008000c4 	movi	r2,3
 2004cd0:	dfc00915 	stw	ra,36(sp)
 2004cd4:	dcc00815 	stw	r19,32(sp)
 2004cd8:	dc800715 	stw	r18,28(sp)
 2004cdc:	dc400615 	stw	r17,24(sp)
 2004ce0:	dc000515 	stw	r16,20(sp)
 2004ce4:	d8800015 	stw	r2,0(sp)
 2004ce8:	d8c00115 	stw	r3,4(sp)
 2004cec:	20000f1e 	bne	r4,zero,2004d2c <__floatsidf+0x68>
 2004cf0:	00800084 	movi	r2,2
 2004cf4:	d8800015 	stw	r2,0(sp)
 2004cf8:	d809883a 	mov	r4,sp
 2004cfc:	200528c0 	call	200528c <__pack_d>
 2004d00:	1009883a 	mov	r4,r2
 2004d04:	180b883a 	mov	r5,r3
 2004d08:	2005883a 	mov	r2,r4
 2004d0c:	2807883a 	mov	r3,r5
 2004d10:	dfc00917 	ldw	ra,36(sp)
 2004d14:	dcc00817 	ldw	r19,32(sp)
 2004d18:	dc800717 	ldw	r18,28(sp)
 2004d1c:	dc400617 	ldw	r17,24(sp)
 2004d20:	dc000517 	ldw	r16,20(sp)
 2004d24:	dec00a04 	addi	sp,sp,40
 2004d28:	f800283a 	ret
 2004d2c:	00800f04 	movi	r2,60
 2004d30:	1807003a 	cmpeq	r3,r3,zero
 2004d34:	d8800215 	stw	r2,8(sp)
 2004d38:	18001126 	beq	r3,zero,2004d80 <__floatsidf+0xbc>
 2004d3c:	0027883a 	mov	r19,zero
 2004d40:	2025883a 	mov	r18,r4
 2004d44:	d9000315 	stw	r4,12(sp)
 2004d48:	dcc00415 	stw	r19,16(sp)
 2004d4c:	200520c0 	call	200520c <__clzsi2>
 2004d50:	11000744 	addi	r4,r2,29
 2004d54:	013fe80e 	bge	zero,r4,2004cf8 <__floatsidf+0x34>
 2004d58:	10bfff44 	addi	r2,r2,-3
 2004d5c:	10000c16 	blt	r2,zero,2004d90 <__floatsidf+0xcc>
 2004d60:	90a2983a 	sll	r17,r18,r2
 2004d64:	0021883a 	mov	r16,zero
 2004d68:	d8800217 	ldw	r2,8(sp)
 2004d6c:	dc400415 	stw	r17,16(sp)
 2004d70:	dc000315 	stw	r16,12(sp)
 2004d74:	1105c83a 	sub	r2,r2,r4
 2004d78:	d8800215 	stw	r2,8(sp)
 2004d7c:	003fde06 	br	2004cf8 <__floatsidf+0x34>
 2004d80:	00a00034 	movhi	r2,32768
 2004d84:	20800a26 	beq	r4,r2,2004db0 <__floatsidf+0xec>
 2004d88:	0109c83a 	sub	r4,zero,r4
 2004d8c:	003feb06 	br	2004d3c <__floatsidf+0x78>
 2004d90:	9006d07a 	srli	r3,r18,1
 2004d94:	008007c4 	movi	r2,31
 2004d98:	1105c83a 	sub	r2,r2,r4
 2004d9c:	1886d83a 	srl	r3,r3,r2
 2004da0:	9922983a 	sll	r17,r19,r4
 2004da4:	9120983a 	sll	r16,r18,r4
 2004da8:	1c62b03a 	or	r17,r3,r17
 2004dac:	003fee06 	br	2004d68 <__floatsidf+0xa4>
 2004db0:	0009883a 	mov	r4,zero
 2004db4:	01707834 	movhi	r5,49632
 2004db8:	003fd306 	br	2004d08 <__floatsidf+0x44>

02004dbc <__fixdfsi>:
 2004dbc:	defff804 	addi	sp,sp,-32
 2004dc0:	2005883a 	mov	r2,r4
 2004dc4:	2807883a 	mov	r3,r5
 2004dc8:	d809883a 	mov	r4,sp
 2004dcc:	d9400204 	addi	r5,sp,8
 2004dd0:	d8c00115 	stw	r3,4(sp)
 2004dd4:	d8800015 	stw	r2,0(sp)
 2004dd8:	dfc00715 	stw	ra,28(sp)
 2004ddc:	20055a00 	call	20055a0 <__unpack_d>
 2004de0:	d8c00217 	ldw	r3,8(sp)
 2004de4:	00800084 	movi	r2,2
 2004de8:	1880051e 	bne	r3,r2,2004e00 <__fixdfsi+0x44>
 2004dec:	0007883a 	mov	r3,zero
 2004df0:	1805883a 	mov	r2,r3
 2004df4:	dfc00717 	ldw	ra,28(sp)
 2004df8:	dec00804 	addi	sp,sp,32
 2004dfc:	f800283a 	ret
 2004e00:	00800044 	movi	r2,1
 2004e04:	10fff92e 	bgeu	r2,r3,2004dec <__fixdfsi+0x30>
 2004e08:	00800104 	movi	r2,4
 2004e0c:	18800426 	beq	r3,r2,2004e20 <__fixdfsi+0x64>
 2004e10:	d8c00417 	ldw	r3,16(sp)
 2004e14:	183ff516 	blt	r3,zero,2004dec <__fixdfsi+0x30>
 2004e18:	00800784 	movi	r2,30
 2004e1c:	10c0080e 	bge	r2,r3,2004e40 <__fixdfsi+0x84>
 2004e20:	d8800317 	ldw	r2,12(sp)
 2004e24:	1000121e 	bne	r2,zero,2004e70 <__fixdfsi+0xb4>
 2004e28:	00e00034 	movhi	r3,32768
 2004e2c:	18ffffc4 	addi	r3,r3,-1
 2004e30:	1805883a 	mov	r2,r3
 2004e34:	dfc00717 	ldw	ra,28(sp)
 2004e38:	dec00804 	addi	sp,sp,32
 2004e3c:	f800283a 	ret
 2004e40:	00800f04 	movi	r2,60
 2004e44:	10d1c83a 	sub	r8,r2,r3
 2004e48:	40bff804 	addi	r2,r8,-32
 2004e4c:	d9800517 	ldw	r6,20(sp)
 2004e50:	d9c00617 	ldw	r7,24(sp)
 2004e54:	10000816 	blt	r2,zero,2004e78 <__fixdfsi+0xbc>
 2004e58:	3888d83a 	srl	r4,r7,r2
 2004e5c:	d8800317 	ldw	r2,12(sp)
 2004e60:	2007883a 	mov	r3,r4
 2004e64:	103fe226 	beq	r2,zero,2004df0 <__fixdfsi+0x34>
 2004e68:	0107c83a 	sub	r3,zero,r4
 2004e6c:	003fe006 	br	2004df0 <__fixdfsi+0x34>
 2004e70:	00e00034 	movhi	r3,32768
 2004e74:	003fde06 	br	2004df0 <__fixdfsi+0x34>
 2004e78:	39c7883a 	add	r3,r7,r7
 2004e7c:	008007c4 	movi	r2,31
 2004e80:	1205c83a 	sub	r2,r2,r8
 2004e84:	1886983a 	sll	r3,r3,r2
 2004e88:	3208d83a 	srl	r4,r6,r8
 2004e8c:	1908b03a 	or	r4,r3,r4
 2004e90:	003ff206 	br	2004e5c <__fixdfsi+0xa0>

02004e94 <__floatunsidf>:
 2004e94:	defff204 	addi	sp,sp,-56
 2004e98:	dfc00d15 	stw	ra,52(sp)
 2004e9c:	ddc00c15 	stw	r23,48(sp)
 2004ea0:	dd800b15 	stw	r22,44(sp)
 2004ea4:	dd400a15 	stw	r21,40(sp)
 2004ea8:	dd000915 	stw	r20,36(sp)
 2004eac:	dcc00815 	stw	r19,32(sp)
 2004eb0:	dc800715 	stw	r18,28(sp)
 2004eb4:	dc400615 	stw	r17,24(sp)
 2004eb8:	dc000515 	stw	r16,20(sp)
 2004ebc:	d8000115 	stw	zero,4(sp)
 2004ec0:	20000f1e 	bne	r4,zero,2004f00 <__floatunsidf+0x6c>
 2004ec4:	00800084 	movi	r2,2
 2004ec8:	d8800015 	stw	r2,0(sp)
 2004ecc:	d809883a 	mov	r4,sp
 2004ed0:	200528c0 	call	200528c <__pack_d>
 2004ed4:	dfc00d17 	ldw	ra,52(sp)
 2004ed8:	ddc00c17 	ldw	r23,48(sp)
 2004edc:	dd800b17 	ldw	r22,44(sp)
 2004ee0:	dd400a17 	ldw	r21,40(sp)
 2004ee4:	dd000917 	ldw	r20,36(sp)
 2004ee8:	dcc00817 	ldw	r19,32(sp)
 2004eec:	dc800717 	ldw	r18,28(sp)
 2004ef0:	dc400617 	ldw	r17,24(sp)
 2004ef4:	dc000517 	ldw	r16,20(sp)
 2004ef8:	dec00e04 	addi	sp,sp,56
 2004efc:	f800283a 	ret
 2004f00:	008000c4 	movi	r2,3
 2004f04:	00c00f04 	movi	r3,60
 2004f08:	002f883a 	mov	r23,zero
 2004f0c:	202d883a 	mov	r22,r4
 2004f10:	d8800015 	stw	r2,0(sp)
 2004f14:	d8c00215 	stw	r3,8(sp)
 2004f18:	d9000315 	stw	r4,12(sp)
 2004f1c:	ddc00415 	stw	r23,16(sp)
 2004f20:	200520c0 	call	200520c <__clzsi2>
 2004f24:	12400744 	addi	r9,r2,29
 2004f28:	48000b16 	blt	r9,zero,2004f58 <__floatunsidf+0xc4>
 2004f2c:	483fe726 	beq	r9,zero,2004ecc <__floatunsidf+0x38>
 2004f30:	10bfff44 	addi	r2,r2,-3
 2004f34:	10002e16 	blt	r2,zero,2004ff0 <__floatunsidf+0x15c>
 2004f38:	b0a2983a 	sll	r17,r22,r2
 2004f3c:	0021883a 	mov	r16,zero
 2004f40:	d8800217 	ldw	r2,8(sp)
 2004f44:	dc400415 	stw	r17,16(sp)
 2004f48:	dc000315 	stw	r16,12(sp)
 2004f4c:	1245c83a 	sub	r2,r2,r9
 2004f50:	d8800215 	stw	r2,8(sp)
 2004f54:	003fdd06 	br	2004ecc <__floatunsidf+0x38>
 2004f58:	0255c83a 	sub	r10,zero,r9
 2004f5c:	51bff804 	addi	r6,r10,-32
 2004f60:	30001b16 	blt	r6,zero,2004fd0 <__floatunsidf+0x13c>
 2004f64:	b9a8d83a 	srl	r20,r23,r6
 2004f68:	002b883a 	mov	r21,zero
 2004f6c:	000f883a 	mov	r7,zero
 2004f70:	01000044 	movi	r4,1
 2004f74:	0011883a 	mov	r8,zero
 2004f78:	30002516 	blt	r6,zero,2005010 <__floatunsidf+0x17c>
 2004f7c:	21a6983a 	sll	r19,r4,r6
 2004f80:	0025883a 	mov	r18,zero
 2004f84:	00bfffc4 	movi	r2,-1
 2004f88:	9089883a 	add	r4,r18,r2
 2004f8c:	988b883a 	add	r5,r19,r2
 2004f90:	248d803a 	cmpltu	r6,r4,r18
 2004f94:	314b883a 	add	r5,r6,r5
 2004f98:	b104703a 	and	r2,r22,r4
 2004f9c:	b946703a 	and	r3,r23,r5
 2004fa0:	10c4b03a 	or	r2,r2,r3
 2004fa4:	10000226 	beq	r2,zero,2004fb0 <__floatunsidf+0x11c>
 2004fa8:	01c00044 	movi	r7,1
 2004fac:	0011883a 	mov	r8,zero
 2004fb0:	d9000217 	ldw	r4,8(sp)
 2004fb4:	a1c4b03a 	or	r2,r20,r7
 2004fb8:	aa06b03a 	or	r3,r21,r8
 2004fbc:	2249c83a 	sub	r4,r4,r9
 2004fc0:	d8c00415 	stw	r3,16(sp)
 2004fc4:	d9000215 	stw	r4,8(sp)
 2004fc8:	d8800315 	stw	r2,12(sp)
 2004fcc:	003fbf06 	br	2004ecc <__floatunsidf+0x38>
 2004fd0:	bdc7883a 	add	r3,r23,r23
 2004fd4:	008007c4 	movi	r2,31
 2004fd8:	1285c83a 	sub	r2,r2,r10
 2004fdc:	1886983a 	sll	r3,r3,r2
 2004fe0:	b2a8d83a 	srl	r20,r22,r10
 2004fe4:	baaad83a 	srl	r21,r23,r10
 2004fe8:	1d28b03a 	or	r20,r3,r20
 2004fec:	003fdf06 	br	2004f6c <__floatunsidf+0xd8>
 2004ff0:	b006d07a 	srli	r3,r22,1
 2004ff4:	008007c4 	movi	r2,31
 2004ff8:	1245c83a 	sub	r2,r2,r9
 2004ffc:	1886d83a 	srl	r3,r3,r2
 2005000:	ba62983a 	sll	r17,r23,r9
 2005004:	b260983a 	sll	r16,r22,r9
 2005008:	1c62b03a 	or	r17,r3,r17
 200500c:	003fcc06 	br	2004f40 <__floatunsidf+0xac>
 2005010:	2006d07a 	srli	r3,r4,1
 2005014:	008007c4 	movi	r2,31
 2005018:	1285c83a 	sub	r2,r2,r10
 200501c:	18a6d83a 	srl	r19,r3,r2
 2005020:	22a4983a 	sll	r18,r4,r10
 2005024:	003fd706 	br	2004f84 <__floatunsidf+0xf0>

02005028 <udivmodsi4>:
 2005028:	29001b2e 	bgeu	r5,r4,2005098 <udivmodsi4+0x70>
 200502c:	28001a16 	blt	r5,zero,2005098 <udivmodsi4+0x70>
 2005030:	00800044 	movi	r2,1
 2005034:	0007883a 	mov	r3,zero
 2005038:	01c007c4 	movi	r7,31
 200503c:	00000306 	br	200504c <udivmodsi4+0x24>
 2005040:	19c01326 	beq	r3,r7,2005090 <udivmodsi4+0x68>
 2005044:	18c00044 	addi	r3,r3,1
 2005048:	28000416 	blt	r5,zero,200505c <udivmodsi4+0x34>
 200504c:	294b883a 	add	r5,r5,r5
 2005050:	1085883a 	add	r2,r2,r2
 2005054:	293ffa36 	bltu	r5,r4,2005040 <udivmodsi4+0x18>
 2005058:	10000d26 	beq	r2,zero,2005090 <udivmodsi4+0x68>
 200505c:	0007883a 	mov	r3,zero
 2005060:	21400236 	bltu	r4,r5,200506c <udivmodsi4+0x44>
 2005064:	2149c83a 	sub	r4,r4,r5
 2005068:	1886b03a 	or	r3,r3,r2
 200506c:	1004d07a 	srli	r2,r2,1
 2005070:	280ad07a 	srli	r5,r5,1
 2005074:	103ffa1e 	bne	r2,zero,2005060 <udivmodsi4+0x38>
 2005078:	30000226 	beq	r6,zero,2005084 <udivmodsi4+0x5c>
 200507c:	2005883a 	mov	r2,r4
 2005080:	f800283a 	ret
 2005084:	1809883a 	mov	r4,r3
 2005088:	2005883a 	mov	r2,r4
 200508c:	f800283a 	ret
 2005090:	0007883a 	mov	r3,zero
 2005094:	003ff806 	br	2005078 <udivmodsi4+0x50>
 2005098:	00800044 	movi	r2,1
 200509c:	0007883a 	mov	r3,zero
 20050a0:	003fef06 	br	2005060 <udivmodsi4+0x38>

020050a4 <__divsi3>:
 20050a4:	defffe04 	addi	sp,sp,-8
 20050a8:	dc000015 	stw	r16,0(sp)
 20050ac:	dfc00115 	stw	ra,4(sp)
 20050b0:	0021883a 	mov	r16,zero
 20050b4:	20000c16 	blt	r4,zero,20050e8 <__divsi3+0x44>
 20050b8:	000d883a 	mov	r6,zero
 20050bc:	28000e16 	blt	r5,zero,20050f8 <__divsi3+0x54>
 20050c0:	20050280 	call	2005028 <udivmodsi4>
 20050c4:	1007883a 	mov	r3,r2
 20050c8:	8005003a 	cmpeq	r2,r16,zero
 20050cc:	1000011e 	bne	r2,zero,20050d4 <__divsi3+0x30>
 20050d0:	00c7c83a 	sub	r3,zero,r3
 20050d4:	1805883a 	mov	r2,r3
 20050d8:	dfc00117 	ldw	ra,4(sp)
 20050dc:	dc000017 	ldw	r16,0(sp)
 20050e0:	dec00204 	addi	sp,sp,8
 20050e4:	f800283a 	ret
 20050e8:	0109c83a 	sub	r4,zero,r4
 20050ec:	04000044 	movi	r16,1
 20050f0:	000d883a 	mov	r6,zero
 20050f4:	283ff20e 	bge	r5,zero,20050c0 <__divsi3+0x1c>
 20050f8:	014bc83a 	sub	r5,zero,r5
 20050fc:	8021003a 	cmpeq	r16,r16,zero
 2005100:	003fef06 	br	20050c0 <__divsi3+0x1c>

02005104 <__modsi3>:
 2005104:	deffff04 	addi	sp,sp,-4
 2005108:	dfc00015 	stw	ra,0(sp)
 200510c:	01800044 	movi	r6,1
 2005110:	2807883a 	mov	r3,r5
 2005114:	20000416 	blt	r4,zero,2005128 <__modsi3+0x24>
 2005118:	28000c16 	blt	r5,zero,200514c <__modsi3+0x48>
 200511c:	dfc00017 	ldw	ra,0(sp)
 2005120:	dec00104 	addi	sp,sp,4
 2005124:	20050281 	jmpi	2005028 <udivmodsi4>
 2005128:	0109c83a 	sub	r4,zero,r4
 200512c:	28000b16 	blt	r5,zero,200515c <__modsi3+0x58>
 2005130:	180b883a 	mov	r5,r3
 2005134:	01800044 	movi	r6,1
 2005138:	20050280 	call	2005028 <udivmodsi4>
 200513c:	0085c83a 	sub	r2,zero,r2
 2005140:	dfc00017 	ldw	ra,0(sp)
 2005144:	dec00104 	addi	sp,sp,4
 2005148:	f800283a 	ret
 200514c:	014bc83a 	sub	r5,zero,r5
 2005150:	dfc00017 	ldw	ra,0(sp)
 2005154:	dec00104 	addi	sp,sp,4
 2005158:	20050281 	jmpi	2005028 <udivmodsi4>
 200515c:	0147c83a 	sub	r3,zero,r5
 2005160:	003ff306 	br	2005130 <__modsi3+0x2c>

02005164 <__udivsi3>:
 2005164:	000d883a 	mov	r6,zero
 2005168:	20050281 	jmpi	2005028 <udivmodsi4>

0200516c <__umodsi3>:
 200516c:	01800044 	movi	r6,1
 2005170:	20050281 	jmpi	2005028 <udivmodsi4>

02005174 <__muldi3>:
 2005174:	2011883a 	mov	r8,r4
 2005178:	427fffcc 	andi	r9,r8,65535
 200517c:	4018d43a 	srli	r12,r8,16
 2005180:	32bfffcc 	andi	r10,r6,65535
 2005184:	3016d43a 	srli	r11,r6,16
 2005188:	4a85383a 	mul	r2,r9,r10
 200518c:	6295383a 	mul	r10,r12,r10
 2005190:	4ad3383a 	mul	r9,r9,r11
 2005194:	113fffcc 	andi	r4,r2,65535
 2005198:	1004d43a 	srli	r2,r2,16
 200519c:	4a93883a 	add	r9,r9,r10
 20051a0:	3807883a 	mov	r3,r7
 20051a4:	1245883a 	add	r2,r2,r9
 20051a8:	280f883a 	mov	r7,r5
 20051ac:	180b883a 	mov	r5,r3
 20051b0:	1006943a 	slli	r3,r2,16
 20051b4:	defffd04 	addi	sp,sp,-12
 20051b8:	dc800215 	stw	r18,8(sp)
 20051bc:	1907883a 	add	r3,r3,r4
 20051c0:	dc400115 	stw	r17,4(sp)
 20051c4:	dc000015 	stw	r16,0(sp)
 20051c8:	4165383a 	mul	r18,r8,r5
 20051cc:	31e3383a 	mul	r17,r6,r7
 20051d0:	1012d43a 	srli	r9,r2,16
 20051d4:	62d9383a 	mul	r12,r12,r11
 20051d8:	181f883a 	mov	r15,r3
 20051dc:	1280022e 	bgeu	r2,r10,20051e8 <__muldi3+0x74>
 20051e0:	00800074 	movhi	r2,1
 20051e4:	6099883a 	add	r12,r12,r2
 20051e8:	624d883a 	add	r6,r12,r9
 20051ec:	9187883a 	add	r3,r18,r6
 20051f0:	88c7883a 	add	r3,r17,r3
 20051f4:	7805883a 	mov	r2,r15
 20051f8:	dc800217 	ldw	r18,8(sp)
 20051fc:	dc400117 	ldw	r17,4(sp)
 2005200:	dc000017 	ldw	r16,0(sp)
 2005204:	dec00304 	addi	sp,sp,12
 2005208:	f800283a 	ret

0200520c <__clzsi2>:
 200520c:	00bfffd4 	movui	r2,65535
 2005210:	11000e36 	bltu	r2,r4,200524c <__clzsi2+0x40>
 2005214:	00803fc4 	movi	r2,255
 2005218:	01400204 	movi	r5,8
 200521c:	0007883a 	mov	r3,zero
 2005220:	11001036 	bltu	r2,r4,2005264 <__clzsi2+0x58>
 2005224:	000b883a 	mov	r5,zero
 2005228:	20c6d83a 	srl	r3,r4,r3
 200522c:	00808074 	movhi	r2,513
 2005230:	10a70104 	addi	r2,r2,-25596
 2005234:	1887883a 	add	r3,r3,r2
 2005238:	18800003 	ldbu	r2,0(r3)
 200523c:	00c00804 	movi	r3,32
 2005240:	2885883a 	add	r2,r5,r2
 2005244:	1885c83a 	sub	r2,r3,r2
 2005248:	f800283a 	ret
 200524c:	01400404 	movi	r5,16
 2005250:	00804034 	movhi	r2,256
 2005254:	10bfffc4 	addi	r2,r2,-1
 2005258:	2807883a 	mov	r3,r5
 200525c:	113ff22e 	bgeu	r2,r4,2005228 <__clzsi2+0x1c>
 2005260:	01400604 	movi	r5,24
 2005264:	2807883a 	mov	r3,r5
 2005268:	20c6d83a 	srl	r3,r4,r3
 200526c:	00808074 	movhi	r2,513
 2005270:	10a70104 	addi	r2,r2,-25596
 2005274:	1887883a 	add	r3,r3,r2
 2005278:	18800003 	ldbu	r2,0(r3)
 200527c:	00c00804 	movi	r3,32
 2005280:	2885883a 	add	r2,r5,r2
 2005284:	1885c83a 	sub	r2,r3,r2
 2005288:	f800283a 	ret

0200528c <__pack_d>:
 200528c:	20c00017 	ldw	r3,0(r4)
 2005290:	defffd04 	addi	sp,sp,-12
 2005294:	dc000015 	stw	r16,0(sp)
 2005298:	dc800215 	stw	r18,8(sp)
 200529c:	dc400115 	stw	r17,4(sp)
 20052a0:	00800044 	movi	r2,1
 20052a4:	22000317 	ldw	r8,12(r4)
 20052a8:	001f883a 	mov	r15,zero
 20052ac:	22400417 	ldw	r9,16(r4)
 20052b0:	24000117 	ldw	r16,4(r4)
 20052b4:	10c0552e 	bgeu	r2,r3,200540c <__pack_d+0x180>
 20052b8:	00800104 	movi	r2,4
 20052bc:	18804f26 	beq	r3,r2,20053fc <__pack_d+0x170>
 20052c0:	00800084 	movi	r2,2
 20052c4:	18800226 	beq	r3,r2,20052d0 <__pack_d+0x44>
 20052c8:	4244b03a 	or	r2,r8,r9
 20052cc:	10001a1e 	bne	r2,zero,2005338 <__pack_d+0xac>
 20052d0:	000d883a 	mov	r6,zero
 20052d4:	000f883a 	mov	r7,zero
 20052d8:	0011883a 	mov	r8,zero
 20052dc:	00800434 	movhi	r2,16
 20052e0:	10bfffc4 	addi	r2,r2,-1
 20052e4:	301d883a 	mov	r14,r6
 20052e8:	3884703a 	and	r2,r7,r2
 20052ec:	400a953a 	slli	r5,r8,20
 20052f0:	79bffc2c 	andhi	r6,r15,65520
 20052f4:	308cb03a 	or	r6,r6,r2
 20052f8:	00e00434 	movhi	r3,32784
 20052fc:	18ffffc4 	addi	r3,r3,-1
 2005300:	800497fa 	slli	r2,r16,31
 2005304:	30c6703a 	and	r3,r6,r3
 2005308:	1946b03a 	or	r3,r3,r5
 200530c:	01600034 	movhi	r5,32768
 2005310:	297fffc4 	addi	r5,r5,-1
 2005314:	194a703a 	and	r5,r3,r5
 2005318:	288ab03a 	or	r5,r5,r2
 200531c:	2807883a 	mov	r3,r5
 2005320:	7005883a 	mov	r2,r14
 2005324:	dc800217 	ldw	r18,8(sp)
 2005328:	dc400117 	ldw	r17,4(sp)
 200532c:	dc000017 	ldw	r16,0(sp)
 2005330:	dec00304 	addi	sp,sp,12
 2005334:	f800283a 	ret
 2005338:	21000217 	ldw	r4,8(r4)
 200533c:	00bf0084 	movi	r2,-1022
 2005340:	20803f16 	blt	r4,r2,2005440 <__pack_d+0x1b4>
 2005344:	0080ffc4 	movi	r2,1023
 2005348:	11002c16 	blt	r2,r4,20053fc <__pack_d+0x170>
 200534c:	00803fc4 	movi	r2,255
 2005350:	408c703a 	and	r6,r8,r2
 2005354:	00802004 	movi	r2,128
 2005358:	0007883a 	mov	r3,zero
 200535c:	000f883a 	mov	r7,zero
 2005360:	2280ffc4 	addi	r10,r4,1023
 2005364:	30801e26 	beq	r6,r2,20053e0 <__pack_d+0x154>
 2005368:	00801fc4 	movi	r2,127
 200536c:	4089883a 	add	r4,r8,r2
 2005370:	220d803a 	cmpltu	r6,r4,r8
 2005374:	324d883a 	add	r6,r6,r9
 2005378:	2011883a 	mov	r8,r4
 200537c:	3013883a 	mov	r9,r6
 2005380:	00880034 	movhi	r2,8192
 2005384:	10bfffc4 	addi	r2,r2,-1
 2005388:	12400d36 	bltu	r2,r9,20053c0 <__pack_d+0x134>
 200538c:	4804963a 	slli	r2,r9,24
 2005390:	400cd23a 	srli	r6,r8,8
 2005394:	480ed23a 	srli	r7,r9,8
 2005398:	013fffc4 	movi	r4,-1
 200539c:	118cb03a 	or	r6,r2,r6
 20053a0:	01400434 	movhi	r5,16
 20053a4:	297fffc4 	addi	r5,r5,-1
 20053a8:	3104703a 	and	r2,r6,r4
 20053ac:	3946703a 	and	r3,r7,r5
 20053b0:	5201ffcc 	andi	r8,r10,2047
 20053b4:	100d883a 	mov	r6,r2
 20053b8:	180f883a 	mov	r7,r3
 20053bc:	003fc706 	br	20052dc <__pack_d+0x50>
 20053c0:	480897fa 	slli	r4,r9,31
 20053c4:	4004d07a 	srli	r2,r8,1
 20053c8:	4806d07a 	srli	r3,r9,1
 20053cc:	52800044 	addi	r10,r10,1
 20053d0:	2084b03a 	or	r2,r4,r2
 20053d4:	1011883a 	mov	r8,r2
 20053d8:	1813883a 	mov	r9,r3
 20053dc:	003feb06 	br	200538c <__pack_d+0x100>
 20053e0:	383fe11e 	bne	r7,zero,2005368 <__pack_d+0xdc>
 20053e4:	01004004 	movi	r4,256
 20053e8:	4104703a 	and	r2,r8,r4
 20053ec:	10c4b03a 	or	r2,r2,r3
 20053f0:	103fe326 	beq	r2,zero,2005380 <__pack_d+0xf4>
 20053f4:	3005883a 	mov	r2,r6
 20053f8:	003fdc06 	br	200536c <__pack_d+0xe0>
 20053fc:	000d883a 	mov	r6,zero
 2005400:	000f883a 	mov	r7,zero
 2005404:	0201ffc4 	movi	r8,2047
 2005408:	003fb406 	br	20052dc <__pack_d+0x50>
 200540c:	0005883a 	mov	r2,zero
 2005410:	00c00234 	movhi	r3,8
 2005414:	408cb03a 	or	r6,r8,r2
 2005418:	48ceb03a 	or	r7,r9,r3
 200541c:	013fffc4 	movi	r4,-1
 2005420:	01400434 	movhi	r5,16
 2005424:	297fffc4 	addi	r5,r5,-1
 2005428:	3104703a 	and	r2,r6,r4
 200542c:	3946703a 	and	r3,r7,r5
 2005430:	100d883a 	mov	r6,r2
 2005434:	180f883a 	mov	r7,r3
 2005438:	0201ffc4 	movi	r8,2047
 200543c:	003fa706 	br	20052dc <__pack_d+0x50>
 2005440:	1109c83a 	sub	r4,r2,r4
 2005444:	00800e04 	movi	r2,56
 2005448:	11004316 	blt	r2,r4,2005558 <__pack_d+0x2cc>
 200544c:	21fff804 	addi	r7,r4,-32
 2005450:	38004516 	blt	r7,zero,2005568 <__pack_d+0x2dc>
 2005454:	49d8d83a 	srl	r12,r9,r7
 2005458:	001b883a 	mov	r13,zero
 200545c:	0023883a 	mov	r17,zero
 2005460:	01400044 	movi	r5,1
 2005464:	0025883a 	mov	r18,zero
 2005468:	38004716 	blt	r7,zero,2005588 <__pack_d+0x2fc>
 200546c:	29d6983a 	sll	r11,r5,r7
 2005470:	0015883a 	mov	r10,zero
 2005474:	00bfffc4 	movi	r2,-1
 2005478:	5089883a 	add	r4,r10,r2
 200547c:	588b883a 	add	r5,r11,r2
 2005480:	228d803a 	cmpltu	r6,r4,r10
 2005484:	314b883a 	add	r5,r6,r5
 2005488:	4104703a 	and	r2,r8,r4
 200548c:	4946703a 	and	r3,r9,r5
 2005490:	10c4b03a 	or	r2,r2,r3
 2005494:	10000226 	beq	r2,zero,20054a0 <__pack_d+0x214>
 2005498:	04400044 	movi	r17,1
 200549c:	0025883a 	mov	r18,zero
 20054a0:	00803fc4 	movi	r2,255
 20054a4:	644eb03a 	or	r7,r12,r17
 20054a8:	3892703a 	and	r9,r7,r2
 20054ac:	00802004 	movi	r2,128
 20054b0:	6c90b03a 	or	r8,r13,r18
 20054b4:	0015883a 	mov	r10,zero
 20054b8:	48801626 	beq	r9,r2,2005514 <__pack_d+0x288>
 20054bc:	01001fc4 	movi	r4,127
 20054c0:	3905883a 	add	r2,r7,r4
 20054c4:	11cd803a 	cmpltu	r6,r2,r7
 20054c8:	320d883a 	add	r6,r6,r8
 20054cc:	100f883a 	mov	r7,r2
 20054d0:	00840034 	movhi	r2,4096
 20054d4:	10bfffc4 	addi	r2,r2,-1
 20054d8:	3011883a 	mov	r8,r6
 20054dc:	0007883a 	mov	r3,zero
 20054e0:	11801b36 	bltu	r2,r6,2005550 <__pack_d+0x2c4>
 20054e4:	4004963a 	slli	r2,r8,24
 20054e8:	3808d23a 	srli	r4,r7,8
 20054ec:	400ad23a 	srli	r5,r8,8
 20054f0:	1813883a 	mov	r9,r3
 20054f4:	1108b03a 	or	r4,r2,r4
 20054f8:	00bfffc4 	movi	r2,-1
 20054fc:	00c00434 	movhi	r3,16
 2005500:	18ffffc4 	addi	r3,r3,-1
 2005504:	208c703a 	and	r6,r4,r2
 2005508:	28ce703a 	and	r7,r5,r3
 200550c:	4a01ffcc 	andi	r8,r9,2047
 2005510:	003f7206 	br	20052dc <__pack_d+0x50>
 2005514:	503fe91e 	bne	r10,zero,20054bc <__pack_d+0x230>
 2005518:	01004004 	movi	r4,256
 200551c:	3904703a 	and	r2,r7,r4
 2005520:	0007883a 	mov	r3,zero
 2005524:	10c4b03a 	or	r2,r2,r3
 2005528:	10000626 	beq	r2,zero,2005544 <__pack_d+0x2b8>
 200552c:	3a45883a 	add	r2,r7,r9
 2005530:	11cd803a 	cmpltu	r6,r2,r7
 2005534:	320d883a 	add	r6,r6,r8
 2005538:	100f883a 	mov	r7,r2
 200553c:	3011883a 	mov	r8,r6
 2005540:	0007883a 	mov	r3,zero
 2005544:	00840034 	movhi	r2,4096
 2005548:	10bfffc4 	addi	r2,r2,-1
 200554c:	123fe52e 	bgeu	r2,r8,20054e4 <__pack_d+0x258>
 2005550:	00c00044 	movi	r3,1
 2005554:	003fe306 	br	20054e4 <__pack_d+0x258>
 2005558:	0009883a 	mov	r4,zero
 200555c:	0013883a 	mov	r9,zero
 2005560:	000b883a 	mov	r5,zero
 2005564:	003fe406 	br	20054f8 <__pack_d+0x26c>
 2005568:	4a47883a 	add	r3,r9,r9
 200556c:	008007c4 	movi	r2,31
 2005570:	1105c83a 	sub	r2,r2,r4
 2005574:	1886983a 	sll	r3,r3,r2
 2005578:	4118d83a 	srl	r12,r8,r4
 200557c:	491ad83a 	srl	r13,r9,r4
 2005580:	1b18b03a 	or	r12,r3,r12
 2005584:	003fb506 	br	200545c <__pack_d+0x1d0>
 2005588:	2806d07a 	srli	r3,r5,1
 200558c:	008007c4 	movi	r2,31
 2005590:	1105c83a 	sub	r2,r2,r4
 2005594:	1896d83a 	srl	r11,r3,r2
 2005598:	2914983a 	sll	r10,r5,r4
 200559c:	003fb506 	br	2005474 <__pack_d+0x1e8>

020055a0 <__unpack_d>:
 20055a0:	20c00117 	ldw	r3,4(r4)
 20055a4:	22400017 	ldw	r9,0(r4)
 20055a8:	00800434 	movhi	r2,16
 20055ac:	10bfffc4 	addi	r2,r2,-1
 20055b0:	1808d53a 	srli	r4,r3,20
 20055b4:	180cd7fa 	srli	r6,r3,31
 20055b8:	1894703a 	and	r10,r3,r2
 20055bc:	2201ffcc 	andi	r8,r4,2047
 20055c0:	281b883a 	mov	r13,r5
 20055c4:	4817883a 	mov	r11,r9
 20055c8:	29800115 	stw	r6,4(r5)
 20055cc:	5019883a 	mov	r12,r10
 20055d0:	40001e1e 	bne	r8,zero,200564c <__unpack_d+0xac>
 20055d4:	4a84b03a 	or	r2,r9,r10
 20055d8:	10001926 	beq	r2,zero,2005640 <__unpack_d+0xa0>
 20055dc:	4804d63a 	srli	r2,r9,24
 20055e0:	500c923a 	slli	r6,r10,8
 20055e4:	013f0084 	movi	r4,-1022
 20055e8:	00c40034 	movhi	r3,4096
 20055ec:	18ffffc4 	addi	r3,r3,-1
 20055f0:	118cb03a 	or	r6,r2,r6
 20055f4:	008000c4 	movi	r2,3
 20055f8:	480a923a 	slli	r5,r9,8
 20055fc:	68800015 	stw	r2,0(r13)
 2005600:	69000215 	stw	r4,8(r13)
 2005604:	19800b36 	bltu	r3,r6,2005634 <__unpack_d+0x94>
 2005608:	200f883a 	mov	r7,r4
 200560c:	1811883a 	mov	r8,r3
 2005610:	2945883a 	add	r2,r5,r5
 2005614:	1149803a 	cmpltu	r4,r2,r5
 2005618:	3187883a 	add	r3,r6,r6
 200561c:	20c9883a 	add	r4,r4,r3
 2005620:	100b883a 	mov	r5,r2
 2005624:	200d883a 	mov	r6,r4
 2005628:	39ffffc4 	addi	r7,r7,-1
 200562c:	413ff82e 	bgeu	r8,r4,2005610 <__unpack_d+0x70>
 2005630:	69c00215 	stw	r7,8(r13)
 2005634:	69800415 	stw	r6,16(r13)
 2005638:	69400315 	stw	r5,12(r13)
 200563c:	f800283a 	ret
 2005640:	00800084 	movi	r2,2
 2005644:	28800015 	stw	r2,0(r5)
 2005648:	f800283a 	ret
 200564c:	0081ffc4 	movi	r2,2047
 2005650:	40800f26 	beq	r8,r2,2005690 <__unpack_d+0xf0>
 2005654:	480cd63a 	srli	r6,r9,24
 2005658:	5006923a 	slli	r3,r10,8
 200565c:	4804923a 	slli	r2,r9,8
 2005660:	0009883a 	mov	r4,zero
 2005664:	30c6b03a 	or	r3,r6,r3
 2005668:	01440034 	movhi	r5,4096
 200566c:	110cb03a 	or	r6,r2,r4
 2005670:	423f0044 	addi	r8,r8,-1023
 2005674:	194eb03a 	or	r7,r3,r5
 2005678:	008000c4 	movi	r2,3
 200567c:	69c00415 	stw	r7,16(r13)
 2005680:	6a000215 	stw	r8,8(r13)
 2005684:	68800015 	stw	r2,0(r13)
 2005688:	69800315 	stw	r6,12(r13)
 200568c:	f800283a 	ret
 2005690:	4a84b03a 	or	r2,r9,r10
 2005694:	1000031e 	bne	r2,zero,20056a4 <__unpack_d+0x104>
 2005698:	00800104 	movi	r2,4
 200569c:	28800015 	stw	r2,0(r5)
 20056a0:	f800283a 	ret
 20056a4:	0009883a 	mov	r4,zero
 20056a8:	01400234 	movhi	r5,8
 20056ac:	4904703a 	and	r2,r9,r4
 20056b0:	5146703a 	and	r3,r10,r5
 20056b4:	10c4b03a 	or	r2,r2,r3
 20056b8:	10000526 	beq	r2,zero,20056d0 <__unpack_d+0x130>
 20056bc:	00800044 	movi	r2,1
 20056c0:	68800015 	stw	r2,0(r13)
 20056c4:	6b000415 	stw	r12,16(r13)
 20056c8:	6ac00315 	stw	r11,12(r13)
 20056cc:	f800283a 	ret
 20056d0:	68000015 	stw	zero,0(r13)
 20056d4:	003ffb06 	br	20056c4 <__unpack_d+0x124>

020056d8 <__fpcmp_parts_d>:
 20056d8:	21800017 	ldw	r6,0(r4)
 20056dc:	00c00044 	movi	r3,1
 20056e0:	19800a2e 	bgeu	r3,r6,200570c <__fpcmp_parts_d+0x34>
 20056e4:	28800017 	ldw	r2,0(r5)
 20056e8:	1880082e 	bgeu	r3,r2,200570c <__fpcmp_parts_d+0x34>
 20056ec:	00c00104 	movi	r3,4
 20056f0:	30c02626 	beq	r6,r3,200578c <__fpcmp_parts_d+0xb4>
 20056f4:	10c02226 	beq	r2,r3,2005780 <__fpcmp_parts_d+0xa8>
 20056f8:	00c00084 	movi	r3,2
 20056fc:	30c00526 	beq	r6,r3,2005714 <__fpcmp_parts_d+0x3c>
 2005700:	10c0071e 	bne	r2,r3,2005720 <__fpcmp_parts_d+0x48>
 2005704:	20800117 	ldw	r2,4(r4)
 2005708:	1000091e 	bne	r2,zero,2005730 <__fpcmp_parts_d+0x58>
 200570c:	00800044 	movi	r2,1
 2005710:	f800283a 	ret
 2005714:	10c01a1e 	bne	r2,r3,2005780 <__fpcmp_parts_d+0xa8>
 2005718:	0005883a 	mov	r2,zero
 200571c:	f800283a 	ret
 2005720:	22000117 	ldw	r8,4(r4)
 2005724:	28800117 	ldw	r2,4(r5)
 2005728:	40800326 	beq	r8,r2,2005738 <__fpcmp_parts_d+0x60>
 200572c:	403ff726 	beq	r8,zero,200570c <__fpcmp_parts_d+0x34>
 2005730:	00bfffc4 	movi	r2,-1
 2005734:	f800283a 	ret
 2005738:	20c00217 	ldw	r3,8(r4)
 200573c:	28800217 	ldw	r2,8(r5)
 2005740:	10fffa16 	blt	r2,r3,200572c <__fpcmp_parts_d+0x54>
 2005744:	18800916 	blt	r3,r2,200576c <__fpcmp_parts_d+0x94>
 2005748:	21c00417 	ldw	r7,16(r4)
 200574c:	28c00417 	ldw	r3,16(r5)
 2005750:	21800317 	ldw	r6,12(r4)
 2005754:	28800317 	ldw	r2,12(r5)
 2005758:	19fff436 	bltu	r3,r7,200572c <__fpcmp_parts_d+0x54>
 200575c:	38c00526 	beq	r7,r3,2005774 <__fpcmp_parts_d+0x9c>
 2005760:	38c00236 	bltu	r7,r3,200576c <__fpcmp_parts_d+0x94>
 2005764:	19ffec1e 	bne	r3,r7,2005718 <__fpcmp_parts_d+0x40>
 2005768:	30bfeb2e 	bgeu	r6,r2,2005718 <__fpcmp_parts_d+0x40>
 200576c:	403fe71e 	bne	r8,zero,200570c <__fpcmp_parts_d+0x34>
 2005770:	003fef06 	br	2005730 <__fpcmp_parts_d+0x58>
 2005774:	11bffa2e 	bgeu	r2,r6,2005760 <__fpcmp_parts_d+0x88>
 2005778:	403fe426 	beq	r8,zero,200570c <__fpcmp_parts_d+0x34>
 200577c:	003fec06 	br	2005730 <__fpcmp_parts_d+0x58>
 2005780:	28800117 	ldw	r2,4(r5)
 2005784:	103fe11e 	bne	r2,zero,200570c <__fpcmp_parts_d+0x34>
 2005788:	003fe906 	br	2005730 <__fpcmp_parts_d+0x58>
 200578c:	11bfdd1e 	bne	r2,r6,2005704 <__fpcmp_parts_d+0x2c>
 2005790:	28c00117 	ldw	r3,4(r5)
 2005794:	20800117 	ldw	r2,4(r4)
 2005798:	1885c83a 	sub	r2,r3,r2
 200579c:	f800283a 	ret

020057a0 <__errno>:
 20057a0:	00c08074 	movhi	r3,513
 20057a4:	18ed6b04 	addi	r3,r3,-19028
 20057a8:	18800017 	ldw	r2,0(r3)
 20057ac:	f800283a 	ret

020057b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20057b0:	defffd04 	addi	sp,sp,-12
 20057b4:	dfc00215 	stw	ra,8(sp)
 20057b8:	df000115 	stw	fp,4(sp)
 20057bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20057c0:	0009883a 	mov	r4,zero
 20057c4:	200581c0 	call	200581c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20057c8:	200585c0 	call	200585c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20057cc:	01008074 	movhi	r4,513
 20057d0:	21274204 	addi	r4,r4,-25336
 20057d4:	01408074 	movhi	r5,513
 20057d8:	29674204 	addi	r5,r5,-25336
 20057dc:	01808074 	movhi	r6,513
 20057e0:	31a74204 	addi	r6,r6,-25336
 20057e4:	20087200 	call	2008720 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 20057e8:	20084c40 	call	20084c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 20057ec:	01008074 	movhi	r4,513
 20057f0:	21214a04 	addi	r4,r4,-31448
 20057f4:	20091300 	call	2009130 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 20057f8:	d1200f17 	ldw	r4,-32708(gp)
 20057fc:	d1601017 	ldw	r5,-32704(gp)
 2005800:	d1a01117 	ldw	r6,-32700(gp)
 2005804:	20000900 	call	2000090 <main>
 2005808:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200580c:	01000044 	movi	r4,1
 2005810:	20082280 	call	2008228 <close>
  exit (result);
 2005814:	e13fff17 	ldw	r4,-4(fp)
 2005818:	20091440 	call	2009144 <exit>

0200581c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200581c:	defffd04 	addi	sp,sp,-12
 2005820:	dfc00215 	stw	ra,8(sp)
 2005824:	df000115 	stw	fp,4(sp)
 2005828:	df000104 	addi	fp,sp,4
 200582c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
 2005830:	01008074 	movhi	r4,513
 2005834:	21285f04 	addi	r4,r4,-24196
 2005838:	20079780 	call	2007978 <alt_vic_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200583c:	00802034 	movhi	r2,128
 2005840:	10800044 	addi	r2,r2,1
 2005844:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2005848:	e037883a 	mov	sp,fp
 200584c:	dfc00117 	ldw	ra,4(sp)
 2005850:	df000017 	ldw	fp,0(sp)
 2005854:	dec00204 	addi	sp,sp,8
 2005858:	f800283a 	ret

0200585c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200585c:	defffe04 	addi	sp,sp,-8
 2005860:	dfc00115 	stw	ra,4(sp)
 2005864:	df000015 	stw	fp,0(sp)
 2005868:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 200586c:	01010034 	movhi	r4,1024
 2005870:	21151004 	addi	r4,r4,21568
 2005874:	000b883a 	mov	r5,zero
 2005878:	018000c4 	movi	r6,3
 200587c:	01c01904 	movi	r7,100
 2005880:	2006df00 	call	2006df0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
 2005884:	01008074 	movhi	r4,513
 2005888:	21288604 	addi	r4,r4,-24040
 200588c:	200591c0 	call	200591c <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2005890:	01008074 	movhi	r4,513
 2005894:	2128c104 	addi	r4,r4,-23804
 2005898:	000b883a 	mov	r5,zero
 200589c:	000d883a 	mov	r6,zero
 20058a0:	20063980 	call	2006398 <altera_avalon_jtag_uart_init>
 20058a4:	01008074 	movhi	r4,513
 20058a8:	2128b704 	addi	r4,r4,-23844
 20058ac:	20058e40 	call	20058e4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_AVALON_UART_INIT ( UART, uart);
 20058b0:	01008074 	movhi	r4,513
 20058b4:	212cd904 	addi	r4,r4,-19612
 20058b8:	000b883a 	mov	r5,zero
 20058bc:	01800084 	movi	r6,2
 20058c0:	2006f780 	call	2006f78 <altera_avalon_uart_init>
 20058c4:	01008074 	movhi	r4,513
 20058c8:	212ccf04 	addi	r4,r4,-19652
 20058cc:	20058e40 	call	20058e4 <alt_dev_reg>
}
 20058d0:	e037883a 	mov	sp,fp
 20058d4:	dfc00117 	ldw	ra,4(sp)
 20058d8:	df000017 	ldw	fp,0(sp)
 20058dc:	dec00204 	addi	sp,sp,8
 20058e0:	f800283a 	ret

020058e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20058e4:	defffd04 	addi	sp,sp,-12
 20058e8:	dfc00215 	stw	ra,8(sp)
 20058ec:	df000115 	stw	fp,4(sp)
 20058f0:	df000104 	addi	fp,sp,4
 20058f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20058f8:	e13fff17 	ldw	r4,-4(fp)
 20058fc:	01408074 	movhi	r5,513
 2005900:	296d6f04 	addi	r5,r5,-19012
 2005904:	20083b00 	call	20083b0 <alt_dev_llist_insert>
}
 2005908:	e037883a 	mov	sp,fp
 200590c:	dfc00117 	ldw	ra,4(sp)
 2005910:	df000017 	ldw	fp,0(sp)
 2005914:	dec00204 	addi	sp,sp,8
 2005918:	f800283a 	ret

0200591c <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 200591c:	defffc04 	addi	sp,sp,-16
 2005920:	dfc00315 	stw	ra,12(sp)
 2005924:	df000215 	stw	fp,8(sp)
 2005928:	df000204 	addi	fp,sp,8
 200592c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2005930:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 2005934:	e13fff17 	ldw	r4,-4(fp)
 2005938:	20059a80 	call	20059a8 <alt_epcs_flash_query>
 200593c:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 2005940:	e0bffe17 	ldw	r2,-8(fp)
 2005944:	1004c03a 	cmpne	r2,r2,zero
 2005948:	1000031e 	bne	r2,zero,2005958 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 200594c:	e13fff17 	ldw	r4,-4(fp)
 2005950:	20059700 	call	2005970 <alt_flash_device_register>
 2005954:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 2005958:	e0bffe17 	ldw	r2,-8(fp)
}
 200595c:	e037883a 	mov	sp,fp
 2005960:	dfc00117 	ldw	ra,4(sp)
 2005964:	df000017 	ldw	fp,0(sp)
 2005968:	dec00204 	addi	sp,sp,8
 200596c:	f800283a 	ret

02005970 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 2005970:	defffd04 	addi	sp,sp,-12
 2005974:	dfc00215 	stw	ra,8(sp)
 2005978:	df000115 	stw	fp,4(sp)
 200597c:	df000104 	addi	fp,sp,4
 2005980:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2005984:	e13fff17 	ldw	r4,-4(fp)
 2005988:	01408074 	movhi	r5,513
 200598c:	296d7304 	addi	r5,r5,-18996
 2005990:	20083b00 	call	20083b0 <alt_dev_llist_insert>
}
 2005994:	e037883a 	mov	sp,fp
 2005998:	dfc00117 	ldw	ra,4(sp)
 200599c:	df000017 	ldw	fp,0(sp)
 20059a0:	dec00204 	addi	sp,sp,8
 20059a4:	f800283a 	ret

020059a8 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 20059a8:	defffc04 	addi	sp,sp,-16
 20059ac:	dfc00315 	stw	ra,12(sp)
 20059b0:	df000215 	stw	fp,8(sp)
 20059b4:	df000204 	addi	fp,sp,8
 20059b8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20059bc:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */

  /* Send the RES command sequence */
  flash->silicon_id =
 20059c0:	e0bfff17 	ldw	r2,-4(fp)
 20059c4:	11002d17 	ldw	r4,180(r2)
 20059c8:	2007fd40 	call	2007fd4 <epcs_read_electronic_signature>
 20059cc:	10c03fcc 	andi	r3,r2,255
 20059d0:	e0bfff17 	ldw	r2,-4(fp)
 20059d4:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 20059d8:	e0bfff17 	ldw	r2,-4(fp)
 20059dc:	10802f17 	ldw	r2,188(r2)
 20059e0:	10800598 	cmpnei	r2,r2,22
 20059e4:	10000a1e 	bne	r2,zero,2005a10 <alt_epcs_flash_query+0x68>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 20059e8:	e0ffff17 	ldw	r3,-4(fp)
 20059ec:	00802034 	movhi	r2,128
 20059f0:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 20059f4:	e0ffff17 	ldw	r3,-4(fp)
 20059f8:	00802004 	movi	r2,128
 20059fc:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2005a00:	e0ffff17 	ldw	r3,-4(fp)
 2005a04:	00800074 	movhi	r2,1
 2005a08:	18801015 	stw	r2,64(r3)
 2005a0c:	00004e06 	br	2005b48 <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2005a10:	e0bfff17 	ldw	r2,-4(fp)
 2005a14:	10802f17 	ldw	r2,188(r2)
 2005a18:	10800518 	cmpnei	r2,r2,20
 2005a1c:	10000a1e 	bne	r2,zero,2005a48 <alt_epcs_flash_query+0xa0>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2005a20:	e0ffff17 	ldw	r3,-4(fp)
 2005a24:	00800834 	movhi	r2,32
 2005a28:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 2005a2c:	e0ffff17 	ldw	r3,-4(fp)
 2005a30:	00800804 	movi	r2,32
 2005a34:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2005a38:	e0ffff17 	ldw	r3,-4(fp)
 2005a3c:	00800074 	movhi	r2,1
 2005a40:	18801015 	stw	r2,64(r3)
 2005a44:	00004006 	br	2005b48 <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2005a48:	e0bfff17 	ldw	r2,-4(fp)
 2005a4c:	10802f17 	ldw	r2,188(r2)
 2005a50:	108004d8 	cmpnei	r2,r2,19
 2005a54:	10000a1e 	bne	r2,zero,2005a80 <alt_epcs_flash_query+0xd8>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 2005a58:	e0ffff17 	ldw	r3,-4(fp)
 2005a5c:	00800434 	movhi	r2,16
 2005a60:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 2005a64:	e0ffff17 	ldw	r3,-4(fp)
 2005a68:	00800404 	movi	r2,16
 2005a6c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2005a70:	e0ffff17 	ldw	r3,-4(fp)
 2005a74:	00800074 	movhi	r2,1
 2005a78:	18801015 	stw	r2,64(r3)
 2005a7c:	00003206 	br	2005b48 <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 2005a80:	e0bfff17 	ldw	r2,-4(fp)
 2005a84:	10802f17 	ldw	r2,188(r2)
 2005a88:	10800498 	cmpnei	r2,r2,18
 2005a8c:	10000a1e 	bne	r2,zero,2005ab8 <alt_epcs_flash_query+0x110>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 2005a90:	e0ffff17 	ldw	r3,-4(fp)
 2005a94:	00800234 	movhi	r2,8
 2005a98:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 2005a9c:	e0ffff17 	ldw	r3,-4(fp)
 2005aa0:	00800204 	movi	r2,8
 2005aa4:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2005aa8:	e0ffff17 	ldw	r3,-4(fp)
 2005aac:	00800074 	movhi	r2,1
 2005ab0:	18801015 	stw	r2,64(r3)
 2005ab4:	00002406 	br	2005b48 <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2005ab8:	e0bfff17 	ldw	r2,-4(fp)
 2005abc:	10802f17 	ldw	r2,188(r2)
 2005ac0:	10800418 	cmpnei	r2,r2,16
 2005ac4:	10000a1e 	bne	r2,zero,2005af0 <alt_epcs_flash_query+0x148>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2005ac8:	e0ffff17 	ldw	r3,-4(fp)
 2005acc:	008000b4 	movhi	r2,2
 2005ad0:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 2005ad4:	e0ffff17 	ldw	r3,-4(fp)
 2005ad8:	00800104 	movi	r2,4
 2005adc:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 2005ae0:	e0ffff17 	ldw	r3,-4(fp)
 2005ae4:	00a00014 	movui	r2,32768
 2005ae8:	18801015 	stw	r2,64(r3)
 2005aec:	00001606 	br	2005b48 <alt_epcs_flash_query+0x1a0>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2005af0:	e0bfff17 	ldw	r2,-4(fp)
 2005af4:	11002d17 	ldw	r4,180(r2)
 2005af8:	20080400 	call	2008040 <epcs_read_device_id>
 2005afc:	10c03fcc 	andi	r3,r2,255
 2005b00:	e0bfff17 	ldw	r2,-4(fp)
 2005b04:	10c02f15 	stw	r3,188(r2)
    
    if(flash->silicon_id == 0x18) /* EPCS128 */
 2005b08:	e0bfff17 	ldw	r2,-4(fp)
 2005b0c:	10802f17 	ldw	r2,188(r2)
 2005b10:	10800618 	cmpnei	r2,r2,24
 2005b14:	10000a1e 	bne	r2,zero,2005b40 <alt_epcs_flash_query+0x198>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2005b18:	e0ffff17 	ldw	r3,-4(fp)
 2005b1c:	00804034 	movhi	r2,256
 2005b20:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 2005b24:	e0ffff17 	ldw	r3,-4(fp)
 2005b28:	00801004 	movi	r2,64
 2005b2c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;     
 2005b30:	e0ffff17 	ldw	r3,-4(fp)
 2005b34:	00800134 	movhi	r2,4
 2005b38:	18801015 	stw	r2,64(r3)
 2005b3c:	00000206 	br	2005b48 <alt_epcs_flash_query+0x1a0>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 2005b40:	00bffb44 	movi	r2,-19
 2005b44:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 2005b48:	e0bfff17 	ldw	r2,-4(fp)
 2005b4c:	10800e17 	ldw	r2,56(r2)
 2005b50:	1007883a 	mov	r3,r2
 2005b54:	e0bfff17 	ldw	r2,-4(fp)
 2005b58:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 2005b5c:	e0ffff17 	ldw	r3,-4(fp)
 2005b60:	00800044 	movi	r2,1
 2005b64:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 2005b68:	e0bfff17 	ldw	r2,-4(fp)
 2005b6c:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2005b70:	e0ffff17 	ldw	r3,-4(fp)
 2005b74:	00804004 	movi	r2,256
 2005b78:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2005b7c:	e0bffe17 	ldw	r2,-8(fp)
}
 2005b80:	e037883a 	mov	sp,fp
 2005b84:	dfc00117 	ldw	ra,4(sp)
 2005b88:	df000017 	ldw	fp,0(sp)
 2005b8c:	dec00204 	addi	sp,sp,8
 2005b90:	f800283a 	ret

02005b94 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2005b94:	deffeb04 	addi	sp,sp,-84
 2005b98:	dfc01415 	stw	ra,80(sp)
 2005b9c:	df001315 	stw	fp,76(sp)
 2005ba0:	df001304 	addi	fp,sp,76
 2005ba4:	e13ff915 	stw	r4,-28(fp)
 2005ba8:	e17ffa15 	stw	r5,-24(fp)
 2005bac:	e1bffb15 	stw	r6,-20(fp)
 2005bb0:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2005bb4:	00800804 	movi	r2,32
 2005bb8:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 2005bbc:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 2005bc0:	00002c06 	br	2005c74 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2005bc4:	e0bff017 	ldw	r2,-64(fp)
 2005bc8:	e0bfff15 	stw	r2,-4(fp)
 2005bcc:	e0fffc17 	ldw	r3,-16(fp)
 2005bd0:	e0fffe15 	stw	r3,-8(fp)
 2005bd4:	e0bfff17 	ldw	r2,-4(fp)
 2005bd8:	e0fffe17 	ldw	r3,-8(fp)
 2005bdc:	10c0022e 	bgeu	r2,r3,2005be8 <alt_epcs_flash_memcmp+0x54>
 2005be0:	e0bfff17 	ldw	r2,-4(fp)
 2005be4:	e0bffe15 	stw	r2,-8(fp)
 2005be8:	e0fffe17 	ldw	r3,-8(fp)
 2005bec:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2005bf0:	e0fffb17 	ldw	r3,-20(fp)
 2005bf4:	e0bfef17 	ldw	r2,-68(fp)
 2005bf8:	188b883a 	add	r5,r3,r2
 2005bfc:	e1bff104 	addi	r6,fp,-60
 2005c00:	e13ff917 	ldw	r4,-28(fp)
 2005c04:	e1ffee17 	ldw	r7,-72(fp)
 2005c08:	20061c40 	call	20061c4 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2005c0c:	1004403a 	cmpge	r2,r2,zero
 2005c10:	1000031e 	bne	r2,zero,2005c20 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2005c14:	00bfffc4 	movi	r2,-1
 2005c18:	e0bffd15 	stw	r2,-12(fp)
 2005c1c:	00001906 	br	2005c84 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2005c20:	e0fffa17 	ldw	r3,-24(fp)
 2005c24:	e0bfef17 	ldw	r2,-68(fp)
 2005c28:	1889883a 	add	r4,r3,r2
 2005c2c:	e1bfee17 	ldw	r6,-72(fp)
 2005c30:	e17ff104 	addi	r5,fp,-60
 2005c34:	200917c0 	call	200917c <memcmp>
 2005c38:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 2005c3c:	e0bfed17 	ldw	r2,-76(fp)
 2005c40:	1005003a 	cmpeq	r2,r2,zero
 2005c44:	1000031e 	bne	r2,zero,2005c54 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 2005c48:	e0ffed17 	ldw	r3,-76(fp)
 2005c4c:	e0fffd15 	stw	r3,-12(fp)
 2005c50:	00000c06 	br	2005c84 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 2005c54:	e0ffee17 	ldw	r3,-72(fp)
 2005c58:	e0bffc17 	ldw	r2,-16(fp)
 2005c5c:	10c5c83a 	sub	r2,r2,r3
 2005c60:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 2005c64:	e0ffef17 	ldw	r3,-68(fp)
 2005c68:	e0bfee17 	ldw	r2,-72(fp)
 2005c6c:	1885883a 	add	r2,r3,r2
 2005c70:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2005c74:	e0bffc17 	ldw	r2,-16(fp)
 2005c78:	1004c03a 	cmpne	r2,r2,zero
 2005c7c:	103fd11e 	bne	r2,zero,2005bc4 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2005c80:	e03ffd15 	stw	zero,-12(fp)
 2005c84:	e0bffd17 	ldw	r2,-12(fp)
}
 2005c88:	e037883a 	mov	sp,fp
 2005c8c:	dfc00117 	ldw	ra,4(sp)
 2005c90:	df000017 	ldw	fp,0(sp)
 2005c94:	dec00204 	addi	sp,sp,8
 2005c98:	f800283a 	ret

02005c9c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2005c9c:	defff204 	addi	sp,sp,-56
 2005ca0:	dfc00d15 	stw	ra,52(sp)
 2005ca4:	df000c15 	stw	fp,48(sp)
 2005ca8:	df000c04 	addi	fp,sp,48
 2005cac:	e13ffa15 	stw	r4,-24(fp)
 2005cb0:	e17ffb15 	stw	r5,-20(fp)
 2005cb4:	e1bffc15 	stw	r6,-16(fp)
 2005cb8:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 2005cbc:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2005cc0:	e03ff815 	stw	zero,-32(fp)
 2005cc4:	00008b06 	br	2005ef4 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2005cc8:	e0bff817 	ldw	r2,-32(fp)
 2005ccc:	e0fffa17 	ldw	r3,-24(fp)
 2005cd0:	1004913a 	slli	r2,r2,4
 2005cd4:	10c5883a 	add	r2,r2,r3
 2005cd8:	10800d04 	addi	r2,r2,52
 2005cdc:	10c00017 	ldw	r3,0(r2)
 2005ce0:	e0bffb17 	ldw	r2,-20(fp)
 2005ce4:	10c08016 	blt	r2,r3,2005ee8 <alt_epcs_flash_write+0x24c>
 2005ce8:	e0bff817 	ldw	r2,-32(fp)
 2005cec:	e0fffa17 	ldw	r3,-24(fp)
 2005cf0:	1004913a 	slli	r2,r2,4
 2005cf4:	10c5883a 	add	r2,r2,r3
 2005cf8:	10800d04 	addi	r2,r2,52
 2005cfc:	11000017 	ldw	r4,0(r2)
 2005d00:	e0bff817 	ldw	r2,-32(fp)
 2005d04:	e0fffa17 	ldw	r3,-24(fp)
 2005d08:	1004913a 	slli	r2,r2,4
 2005d0c:	10c5883a 	add	r2,r2,r3
 2005d10:	10800e04 	addi	r2,r2,56
 2005d14:	10800017 	ldw	r2,0(r2)
 2005d18:	2087883a 	add	r3,r4,r2
 2005d1c:	e0bffb17 	ldw	r2,-20(fp)
 2005d20:	10c0710e 	bge	r2,r3,2005ee8 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2005d24:	e0bff817 	ldw	r2,-32(fp)
 2005d28:	e0fffa17 	ldw	r3,-24(fp)
 2005d2c:	1004913a 	slli	r2,r2,4
 2005d30:	10c5883a 	add	r2,r2,r3
 2005d34:	10800d04 	addi	r2,r2,52
 2005d38:	10800017 	ldw	r2,0(r2)
 2005d3c:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2005d40:	e03ff715 	stw	zero,-36(fp)
 2005d44:	00006006 	br	2005ec8 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 2005d48:	e0fffb17 	ldw	r3,-20(fp)
 2005d4c:	e0bff517 	ldw	r2,-44(fp)
 2005d50:	18805116 	blt	r3,r2,2005e98 <alt_epcs_flash_write+0x1fc>
 2005d54:	e0bff817 	ldw	r2,-32(fp)
 2005d58:	e0fffa17 	ldw	r3,-24(fp)
 2005d5c:	1004913a 	slli	r2,r2,4
 2005d60:	10c5883a 	add	r2,r2,r3
 2005d64:	10801004 	addi	r2,r2,64
 2005d68:	10c00017 	ldw	r3,0(r2)
 2005d6c:	e0bff517 	ldw	r2,-44(fp)
 2005d70:	1887883a 	add	r3,r3,r2
 2005d74:	e0bffb17 	ldw	r2,-20(fp)
 2005d78:	10c0470e 	bge	r2,r3,2005e98 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2005d7c:	e0bff817 	ldw	r2,-32(fp)
 2005d80:	e0fffa17 	ldw	r3,-24(fp)
 2005d84:	1004913a 	slli	r2,r2,4
 2005d88:	10c5883a 	add	r2,r2,r3
 2005d8c:	10801004 	addi	r2,r2,64
 2005d90:	10c00017 	ldw	r3,0(r2)
 2005d94:	e0bff517 	ldw	r2,-44(fp)
 2005d98:	1887883a 	add	r3,r3,r2
 2005d9c:	e0bffb17 	ldw	r2,-20(fp)
 2005da0:	1885c83a 	sub	r2,r3,r2
 2005da4:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2005da8:	e0bff617 	ldw	r2,-40(fp)
 2005dac:	e0bfff15 	stw	r2,-4(fp)
 2005db0:	e0fffd17 	ldw	r3,-12(fp)
 2005db4:	e0fffe15 	stw	r3,-8(fp)
 2005db8:	e0bfff17 	ldw	r2,-4(fp)
 2005dbc:	e0fffe17 	ldw	r3,-8(fp)
 2005dc0:	10c0020e 	bge	r2,r3,2005dcc <alt_epcs_flash_write+0x130>
 2005dc4:	e0bfff17 	ldw	r2,-4(fp)
 2005dc8:	e0bffe15 	stw	r2,-8(fp)
 2005dcc:	e0fffe17 	ldw	r3,-8(fp)
 2005dd0:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2005dd4:	e1fff617 	ldw	r7,-40(fp)
 2005dd8:	e13ffa17 	ldw	r4,-24(fp)
 2005ddc:	e17ffc17 	ldw	r5,-16(fp)
 2005de0:	e1bffb17 	ldw	r6,-20(fp)
 2005de4:	2005b940 	call	2005b94 <alt_epcs_flash_memcmp>
 2005de8:	1005003a 	cmpeq	r2,r2,zero
 2005dec:	1000131e 	bne	r2,zero,2005e3c <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2005df0:	e0bffa17 	ldw	r2,-24(fp)
 2005df4:	10800817 	ldw	r2,32(r2)
 2005df8:	e13ffa17 	ldw	r4,-24(fp)
 2005dfc:	e17ff517 	ldw	r5,-44(fp)
 2005e00:	103ee83a 	callr	r2
 2005e04:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 2005e08:	e0bff917 	ldw	r2,-28(fp)
 2005e0c:	1004c03a 	cmpne	r2,r2,zero
 2005e10:	10000a1e 	bne	r2,zero,2005e3c <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 2005e14:	e0bffa17 	ldw	r2,-24(fp)
 2005e18:	10c00917 	ldw	r3,36(r2)
 2005e1c:	e0bff617 	ldw	r2,-40(fp)
 2005e20:	d8800015 	stw	r2,0(sp)
 2005e24:	e13ffa17 	ldw	r4,-24(fp)
 2005e28:	e17ff517 	ldw	r5,-44(fp)
 2005e2c:	e1bffb17 	ldw	r6,-20(fp)
 2005e30:	e1fffc17 	ldw	r7,-16(fp)
 2005e34:	183ee83a 	callr	r3
 2005e38:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2005e3c:	e0fffd17 	ldw	r3,-12(fp)
 2005e40:	e0bff617 	ldw	r2,-40(fp)
 2005e44:	18802f26 	beq	r3,r2,2005f04 <alt_epcs_flash_write+0x268>
 2005e48:	e0bff917 	ldw	r2,-28(fp)
 2005e4c:	1004c03a 	cmpne	r2,r2,zero
 2005e50:	10002c1e 	bne	r2,zero,2005f04 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 2005e54:	e0fffd17 	ldw	r3,-12(fp)
 2005e58:	e0bff617 	ldw	r2,-40(fp)
 2005e5c:	1885c83a 	sub	r2,r3,r2
 2005e60:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2005e64:	e0bff817 	ldw	r2,-32(fp)
 2005e68:	e0fffa17 	ldw	r3,-24(fp)
 2005e6c:	1004913a 	slli	r2,r2,4
 2005e70:	10c5883a 	add	r2,r2,r3
 2005e74:	10801004 	addi	r2,r2,64
 2005e78:	10c00017 	ldw	r3,0(r2)
 2005e7c:	e0bff517 	ldw	r2,-44(fp)
 2005e80:	1885883a 	add	r2,r3,r2
 2005e84:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2005e88:	e0fffc17 	ldw	r3,-16(fp)
 2005e8c:	e0bff617 	ldw	r2,-40(fp)
 2005e90:	1885883a 	add	r2,r3,r2
 2005e94:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2005e98:	e0bff817 	ldw	r2,-32(fp)
 2005e9c:	e0fffa17 	ldw	r3,-24(fp)
 2005ea0:	1004913a 	slli	r2,r2,4
 2005ea4:	10c5883a 	add	r2,r2,r3
 2005ea8:	10801004 	addi	r2,r2,64
 2005eac:	10c00017 	ldw	r3,0(r2)
 2005eb0:	e0bff517 	ldw	r2,-44(fp)
 2005eb4:	10c5883a 	add	r2,r2,r3
 2005eb8:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2005ebc:	e0bff717 	ldw	r2,-36(fp)
 2005ec0:	10800044 	addi	r2,r2,1
 2005ec4:	e0bff715 	stw	r2,-36(fp)
 2005ec8:	e0bff817 	ldw	r2,-32(fp)
 2005ecc:	e0fffa17 	ldw	r3,-24(fp)
 2005ed0:	1004913a 	slli	r2,r2,4
 2005ed4:	10c5883a 	add	r2,r2,r3
 2005ed8:	10800f04 	addi	r2,r2,60
 2005edc:	10c00017 	ldw	r3,0(r2)
 2005ee0:	e0bff717 	ldw	r2,-36(fp)
 2005ee4:	10ff9816 	blt	r2,r3,2005d48 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2005ee8:	e0bff817 	ldw	r2,-32(fp)
 2005eec:	10800044 	addi	r2,r2,1
 2005ef0:	e0bff815 	stw	r2,-32(fp)
 2005ef4:	e0bffa17 	ldw	r2,-24(fp)
 2005ef8:	10c00c17 	ldw	r3,48(r2)
 2005efc:	e0bff817 	ldw	r2,-32(fp)
 2005f00:	10ff7116 	blt	r2,r3,2005cc8 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 2005f04:	e0bff917 	ldw	r2,-28(fp)
}
 2005f08:	e037883a 	mov	sp,fp
 2005f0c:	dfc00117 	ldw	ra,4(sp)
 2005f10:	df000017 	ldw	fp,0(sp)
 2005f14:	dec00204 	addi	sp,sp,8
 2005f18:	f800283a 	ret

02005f1c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2005f1c:	defffa04 	addi	sp,sp,-24
 2005f20:	df000515 	stw	fp,20(sp)
 2005f24:	df000504 	addi	fp,sp,20
 2005f28:	e13ffd15 	stw	r4,-12(fp)
 2005f2c:	e17ffe15 	stw	r5,-8(fp)
 2005f30:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2005f34:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2005f38:	e0bffd17 	ldw	r2,-12(fp)
 2005f3c:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 2005f40:	e0bffb17 	ldw	r2,-20(fp)
 2005f44:	10c00c17 	ldw	r3,48(r2)
 2005f48:	e0bfff17 	ldw	r2,-4(fp)
 2005f4c:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2005f50:	e0bffb17 	ldw	r2,-20(fp)
 2005f54:	10800c17 	ldw	r2,48(r2)
 2005f58:	1004c03a 	cmpne	r2,r2,zero
 2005f5c:	1000031e 	bne	r2,zero,2005f6c <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 2005f60:	00bffec4 	movi	r2,-5
 2005f64:	e0bffc15 	stw	r2,-16(fp)
 2005f68:	00000b06 	br	2005f98 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2005f6c:	e0bffb17 	ldw	r2,-20(fp)
 2005f70:	10800c17 	ldw	r2,48(r2)
 2005f74:	10800250 	cmplti	r2,r2,9
 2005f78:	1000031e 	bne	r2,zero,2005f88 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 2005f7c:	00bffd04 	movi	r2,-12
 2005f80:	e0bffc15 	stw	r2,-16(fp)
 2005f84:	00000406 	br	2005f98 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 2005f88:	e0bffb17 	ldw	r2,-20(fp)
 2005f8c:	10c00d04 	addi	r3,r2,52
 2005f90:	e0bffe17 	ldw	r2,-8(fp)
 2005f94:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2005f98:	e0bffc17 	ldw	r2,-16(fp)
}
 2005f9c:	e037883a 	mov	sp,fp
 2005fa0:	df000017 	ldw	fp,0(sp)
 2005fa4:	dec00104 	addi	sp,sp,4
 2005fa8:	f800283a 	ret

02005fac <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2005fac:	defffa04 	addi	sp,sp,-24
 2005fb0:	dfc00515 	stw	ra,20(sp)
 2005fb4:	df000415 	stw	fp,16(sp)
 2005fb8:	df000404 	addi	fp,sp,16
 2005fbc:	e13ffe15 	stw	r4,-8(fp)
 2005fc0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2005fc4:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2005fc8:	e0bffe17 	ldw	r2,-8(fp)
 2005fcc:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2005fd0:	e13ffe17 	ldw	r4,-8(fp)
 2005fd4:	e17fff17 	ldw	r5,-4(fp)
 2005fd8:	20060200 	call	2006020 <alt_epcs_test_address>
 2005fdc:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 2005fe0:	e0bffd17 	ldw	r2,-12(fp)
 2005fe4:	1004803a 	cmplt	r2,r2,zero
 2005fe8:	1000071e 	bne	r2,zero,2006008 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Execute a WREN instruction */
    epcs_write_enable(f->register_base);
 2005fec:	e0bffc17 	ldw	r2,-16(fp)
 2005ff0:	11002d17 	ldw	r4,180(r2)
 2005ff4:	2007e480 	call	2007e48 <epcs_write_enable>

    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset);
 2005ff8:	e0bffc17 	ldw	r2,-16(fp)
 2005ffc:	11002d17 	ldw	r4,180(r2)
 2006000:	e17fff17 	ldw	r5,-4(fp)
 2006004:	2007ca80 	call	2007ca8 <epcs_sector_erase>
  }
  return ret_code;
 2006008:	e0bffd17 	ldw	r2,-12(fp)
}
 200600c:	e037883a 	mov	sp,fp
 2006010:	dfc00117 	ldw	ra,4(sp)
 2006014:	df000017 	ldw	fp,0(sp)
 2006018:	dec00204 	addi	sp,sp,8
 200601c:	f800283a 	ret

02006020 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2006020:	defff904 	addi	sp,sp,-28
 2006024:	df000615 	stw	fp,24(sp)
 2006028:	df000604 	addi	fp,sp,24
 200602c:	e13ffe15 	stw	r4,-8(fp)
 2006030:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2006034:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2006038:	e0bffe17 	ldw	r2,-8(fp)
 200603c:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2006040:	e0bffc17 	ldw	r2,-16(fp)
 2006044:	10800c17 	ldw	r2,48(r2)
 2006048:	10bfffc4 	addi	r2,r2,-1
 200604c:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2006050:	e0bffb17 	ldw	r2,-20(fp)
 2006054:	e0fffc17 	ldw	r3,-16(fp)
 2006058:	1004913a 	slli	r2,r2,4
 200605c:	10c5883a 	add	r2,r2,r3
 2006060:	10800d04 	addi	r2,r2,52
 2006064:	11000017 	ldw	r4,0(r2)
 2006068:	e0bffb17 	ldw	r2,-20(fp)
 200606c:	e0fffc17 	ldw	r3,-16(fp)
 2006070:	1004913a 	slli	r2,r2,4
 2006074:	10c5883a 	add	r2,r2,r3
 2006078:	10800e04 	addi	r2,r2,56
 200607c:	10800017 	ldw	r2,0(r2)
 2006080:	2085883a 	add	r2,r4,r2
 2006084:	10bfffc4 	addi	r2,r2,-1
 2006088:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 200608c:	e0ffff17 	ldw	r3,-4(fp)
 2006090:	e0bffa17 	ldw	r2,-24(fp)
 2006094:	10c0022e 	bgeu	r2,r3,20060a0 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2006098:	00bffec4 	movi	r2,-5
 200609c:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 20060a0:	e0bffd17 	ldw	r2,-12(fp)
}
 20060a4:	e037883a 	mov	sp,fp
 20060a8:	df000017 	ldw	fp,0(sp)
 20060ac:	dec00104 	addi	sp,sp,4
 20060b0:	f800283a 	ret

020060b4 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 20060b4:	defff304 	addi	sp,sp,-52
 20060b8:	dfc00c15 	stw	ra,48(sp)
 20060bc:	df000b15 	stw	fp,44(sp)
 20060c0:	df000b04 	addi	fp,sp,44
 20060c4:	e13ffa15 	stw	r4,-24(fp)
 20060c8:	e17ffb15 	stw	r5,-20(fp)
 20060cc:	e1bffc15 	stw	r6,-16(fp)
 20060d0:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20060d4:	e0bffa17 	ldw	r2,-24(fp)
 20060d8:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 20060dc:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 20060e0:	e13ffa17 	ldw	r4,-24(fp)
 20060e4:	e17ffc17 	ldw	r5,-16(fp)
 20060e8:	20060200 	call	2006020 <alt_epcs_test_address>
 20060ec:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 20060f0:	e0bff917 	ldw	r2,-28(fp)
 20060f4:	1004803a 	cmplt	r2,r2,zero
 20060f8:	10002c1e 	bne	r2,zero,20061ac <alt_epcs_flash_write_block+0xf8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 20060fc:	00002806 	br	20061a0 <alt_epcs_flash_write_block+0xec>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2006100:	e0bff817 	ldw	r2,-32(fp)
 2006104:	10c03017 	ldw	r3,192(r2)
 2006108:	e0bffc17 	ldw	r2,-16(fp)
 200610c:	1887883a 	add	r3,r3,r2
 2006110:	e0bff817 	ldw	r2,-32(fp)
 2006114:	10803017 	ldw	r2,192(r2)
 2006118:	0085c83a 	sub	r2,zero,r2
 200611c:	1884703a 	and	r2,r3,r2
 2006120:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2006124:	e0fff517 	ldw	r3,-44(fp)
 2006128:	e0bffc17 	ldw	r2,-16(fp)
 200612c:	1885c83a 	sub	r2,r3,r2
 2006130:	e0c00217 	ldw	r3,8(fp)
 2006134:	e0ffff15 	stw	r3,-4(fp)
 2006138:	e0bffe15 	stw	r2,-8(fp)
 200613c:	e0bfff17 	ldw	r2,-4(fp)
 2006140:	e0fffe17 	ldw	r3,-8(fp)
 2006144:	10c0020e 	bge	r2,r3,2006150 <alt_epcs_flash_write_block+0x9c>
 2006148:	e0bfff17 	ldw	r2,-4(fp)
 200614c:	e0bffe15 	stw	r2,-8(fp)
 2006150:	e0fffe17 	ldw	r3,-8(fp)
 2006154:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write);
 2006158:	e0bff817 	ldw	r2,-32(fp)
 200615c:	11002d17 	ldw	r4,180(r2)
 2006160:	e0fffd17 	ldw	r3,-12(fp)
 2006164:	e0bff717 	ldw	r2,-36(fp)
 2006168:	188d883a 	add	r6,r3,r2
 200616c:	e17ffc17 	ldw	r5,-16(fp)
 2006170:	e1fff617 	ldw	r7,-40(fp)
 2006174:	2007efc0 	call	2007efc <epcs_write_buffer>

      length -= length_of_current_write;
 2006178:	e0c00217 	ldw	r3,8(fp)
 200617c:	e0bff617 	ldw	r2,-40(fp)
 2006180:	1885c83a 	sub	r2,r3,r2
 2006184:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2006188:	e0fff717 	ldw	r3,-36(fp)
 200618c:	e0bff617 	ldw	r2,-40(fp)
 2006190:	1885883a 	add	r2,r3,r2
 2006194:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2006198:	e0bff517 	ldw	r2,-44(fp)
 200619c:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 20061a0:	e0800217 	ldw	r2,8(fp)
 20061a4:	1004c03a 	cmpne	r2,r2,zero
 20061a8:	103fd51e 	bne	r2,zero,2006100 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 20061ac:	e0bff917 	ldw	r2,-28(fp)
}
 20061b0:	e037883a 	mov	sp,fp
 20061b4:	dfc00117 	ldw	ra,4(sp)
 20061b8:	df000017 	ldw	fp,0(sp)
 20061bc:	dec00204 	addi	sp,sp,8
 20061c0:	f800283a 	ret

020061c4 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 20061c4:	defff804 	addi	sp,sp,-32
 20061c8:	dfc00715 	stw	ra,28(sp)
 20061cc:	df000615 	stw	fp,24(sp)
 20061d0:	df000604 	addi	fp,sp,24
 20061d4:	e13ffc15 	stw	r4,-16(fp)
 20061d8:	e17ffd15 	stw	r5,-12(fp)
 20061dc:	e1bffe15 	stw	r6,-8(fp)
 20061e0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 20061e4:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20061e8:	e0bffc17 	ldw	r2,-16(fp)
 20061ec:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 20061f0:	e13ffc17 	ldw	r4,-16(fp)
 20061f4:	e17ffd17 	ldw	r5,-12(fp)
 20061f8:	20060200 	call	2006020 <alt_epcs_test_address>
 20061fc:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 2006200:	e0bffb17 	ldw	r2,-20(fp)
 2006204:	1004803a 	cmplt	r2,r2,zero
 2006208:	10000b1e 	bne	r2,zero,2006238 <alt_epcs_flash_read+0x74>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length);
 200620c:	e0bffa17 	ldw	r2,-24(fp)
 2006210:	11002d17 	ldw	r4,180(r2)
 2006214:	e1bffe17 	ldw	r6,-8(fp)
 2006218:	e17ffd17 	ldw	r5,-12(fp)
 200621c:	e1ffff17 	ldw	r7,-4(fp)
 2006220:	2007d940 	call	2007d94 <epcs_read_buffer>
 2006224:	e0bffb15 	stw	r2,-20(fp)

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 2006228:	e0fffb17 	ldw	r3,-20(fp)
 200622c:	e0bfff17 	ldw	r2,-4(fp)
 2006230:	1880011e 	bne	r3,r2,2006238 <alt_epcs_flash_read+0x74>
    {
      ret_code = 0;
 2006234:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 2006238:	e0bffb17 	ldw	r2,-20(fp)
}
 200623c:	e037883a 	mov	sp,fp
 2006240:	dfc00117 	ldw	ra,4(sp)
 2006244:	df000017 	ldw	fp,0(sp)
 2006248:	dec00204 	addi	sp,sp,8
 200624c:	f800283a 	ret

02006250 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2006250:	defffa04 	addi	sp,sp,-24
 2006254:	dfc00515 	stw	ra,20(sp)
 2006258:	df000415 	stw	fp,16(sp)
 200625c:	df000404 	addi	fp,sp,16
 2006260:	e13ffd15 	stw	r4,-12(fp)
 2006264:	e17ffe15 	stw	r5,-8(fp)
 2006268:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200626c:	e0bffd17 	ldw	r2,-12(fp)
 2006270:	10800017 	ldw	r2,0(r2)
 2006274:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2006278:	e0bffc17 	ldw	r2,-16(fp)
 200627c:	11000a04 	addi	r4,r2,40
 2006280:	e0bffd17 	ldw	r2,-12(fp)
 2006284:	11c00217 	ldw	r7,8(r2)
 2006288:	e17ffe17 	ldw	r5,-8(fp)
 200628c:	e1bfff17 	ldw	r6,-4(fp)
 2006290:	20068980 	call	2006898 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2006294:	e037883a 	mov	sp,fp
 2006298:	dfc00117 	ldw	ra,4(sp)
 200629c:	df000017 	ldw	fp,0(sp)
 20062a0:	dec00204 	addi	sp,sp,8
 20062a4:	f800283a 	ret

020062a8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20062a8:	defffa04 	addi	sp,sp,-24
 20062ac:	dfc00515 	stw	ra,20(sp)
 20062b0:	df000415 	stw	fp,16(sp)
 20062b4:	df000404 	addi	fp,sp,16
 20062b8:	e13ffd15 	stw	r4,-12(fp)
 20062bc:	e17ffe15 	stw	r5,-8(fp)
 20062c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20062c4:	e0bffd17 	ldw	r2,-12(fp)
 20062c8:	10800017 	ldw	r2,0(r2)
 20062cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20062d0:	e0bffc17 	ldw	r2,-16(fp)
 20062d4:	11000a04 	addi	r4,r2,40
 20062d8:	e0bffd17 	ldw	r2,-12(fp)
 20062dc:	11c00217 	ldw	r7,8(r2)
 20062e0:	e17ffe17 	ldw	r5,-8(fp)
 20062e4:	e1bfff17 	ldw	r6,-4(fp)
 20062e8:	2006ae80 	call	2006ae8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 20062ec:	e037883a 	mov	sp,fp
 20062f0:	dfc00117 	ldw	ra,4(sp)
 20062f4:	df000017 	ldw	fp,0(sp)
 20062f8:	dec00204 	addi	sp,sp,8
 20062fc:	f800283a 	ret

02006300 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2006300:	defffc04 	addi	sp,sp,-16
 2006304:	dfc00315 	stw	ra,12(sp)
 2006308:	df000215 	stw	fp,8(sp)
 200630c:	df000204 	addi	fp,sp,8
 2006310:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2006314:	e0bfff17 	ldw	r2,-4(fp)
 2006318:	10800017 	ldw	r2,0(r2)
 200631c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2006320:	e0bffe17 	ldw	r2,-8(fp)
 2006324:	11000a04 	addi	r4,r2,40
 2006328:	e0bfff17 	ldw	r2,-4(fp)
 200632c:	11400217 	ldw	r5,8(r2)
 2006330:	20067300 	call	2006730 <altera_avalon_jtag_uart_close>
}
 2006334:	e037883a 	mov	sp,fp
 2006338:	dfc00117 	ldw	ra,4(sp)
 200633c:	df000017 	ldw	fp,0(sp)
 2006340:	dec00204 	addi	sp,sp,8
 2006344:	f800283a 	ret

02006348 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2006348:	defffa04 	addi	sp,sp,-24
 200634c:	dfc00515 	stw	ra,20(sp)
 2006350:	df000415 	stw	fp,16(sp)
 2006354:	df000404 	addi	fp,sp,16
 2006358:	e13ffd15 	stw	r4,-12(fp)
 200635c:	e17ffe15 	stw	r5,-8(fp)
 2006360:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2006364:	e0bffd17 	ldw	r2,-12(fp)
 2006368:	10800017 	ldw	r2,0(r2)
 200636c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2006370:	e0bffc17 	ldw	r2,-16(fp)
 2006374:	11000a04 	addi	r4,r2,40
 2006378:	e17ffe17 	ldw	r5,-8(fp)
 200637c:	e1bfff17 	ldw	r6,-4(fp)
 2006380:	20067a40 	call	20067a4 <altera_avalon_jtag_uart_ioctl>
}
 2006384:	e037883a 	mov	sp,fp
 2006388:	dfc00117 	ldw	ra,4(sp)
 200638c:	df000017 	ldw	fp,0(sp)
 2006390:	dec00204 	addi	sp,sp,8
 2006394:	f800283a 	ret

02006398 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2006398:	defffa04 	addi	sp,sp,-24
 200639c:	dfc00515 	stw	ra,20(sp)
 20063a0:	df000415 	stw	fp,16(sp)
 20063a4:	df000404 	addi	fp,sp,16
 20063a8:	e13ffd15 	stw	r4,-12(fp)
 20063ac:	e17ffe15 	stw	r5,-8(fp)
 20063b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20063b4:	e0fffd17 	ldw	r3,-12(fp)
 20063b8:	00800044 	movi	r2,1
 20063bc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 20063c0:	e0bffd17 	ldw	r2,-12(fp)
 20063c4:	10800017 	ldw	r2,0(r2)
 20063c8:	11000104 	addi	r4,r2,4
 20063cc:	e0bffd17 	ldw	r2,-12(fp)
 20063d0:	10800817 	ldw	r2,32(r2)
 20063d4:	1007883a 	mov	r3,r2
 20063d8:	2005883a 	mov	r2,r4
 20063dc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 20063e0:	e13ffe17 	ldw	r4,-8(fp)
 20063e4:	e17fff17 	ldw	r5,-4(fp)
 20063e8:	d8000015 	stw	zero,0(sp)
 20063ec:	01808034 	movhi	r6,512
 20063f0:	31991604 	addi	r6,r6,25688
 20063f4:	e1fffd17 	ldw	r7,-12(fp)
 20063f8:	2007ad40 	call	2007ad4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 20063fc:	e0bffd17 	ldw	r2,-12(fp)
 2006400:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2006404:	e0bffd17 	ldw	r2,-12(fp)
 2006408:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200640c:	00808074 	movhi	r2,513
 2006410:	10ad7d04 	addi	r2,r2,-18956
 2006414:	10800017 	ldw	r2,0(r2)
 2006418:	100b883a 	mov	r5,r2
 200641c:	01808034 	movhi	r6,512
 2006420:	3199a004 	addi	r6,r6,26240
 2006424:	e1fffd17 	ldw	r7,-12(fp)
 2006428:	20080a80 	call	20080a8 <alt_alarm_start>
 200642c:	1004403a 	cmpge	r2,r2,zero
 2006430:	1000041e 	bne	r2,zero,2006444 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2006434:	e0fffd17 	ldw	r3,-12(fp)
 2006438:	00a00034 	movhi	r2,32768
 200643c:	10bfffc4 	addi	r2,r2,-1
 2006440:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2006444:	e037883a 	mov	sp,fp
 2006448:	dfc00117 	ldw	ra,4(sp)
 200644c:	df000017 	ldw	fp,0(sp)
 2006450:	dec00204 	addi	sp,sp,8
 2006454:	f800283a 	ret

02006458 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2006458:	defff804 	addi	sp,sp,-32
 200645c:	df000715 	stw	fp,28(sp)
 2006460:	df000704 	addi	fp,sp,28
 2006464:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2006468:	e0bfff17 	ldw	r2,-4(fp)
 200646c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 2006470:	e0bffe17 	ldw	r2,-8(fp)
 2006474:	10800017 	ldw	r2,0(r2)
 2006478:	e0bffd15 	stw	r2,-12(fp)
 200647c:	00000006 	br	2006480 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2006480:	e0bffd17 	ldw	r2,-12(fp)
 2006484:	10800104 	addi	r2,r2,4
 2006488:	10800037 	ldwio	r2,0(r2)
 200648c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2006490:	e0bffc17 	ldw	r2,-16(fp)
 2006494:	1080c00c 	andi	r2,r2,768
 2006498:	1005003a 	cmpeq	r2,r2,zero
 200649c:	1000741e 	bne	r2,zero,2006670 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 20064a0:	e0bffc17 	ldw	r2,-16(fp)
 20064a4:	1080400c 	andi	r2,r2,256
 20064a8:	1005003a 	cmpeq	r2,r2,zero
 20064ac:	1000351e 	bne	r2,zero,2006584 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 20064b0:	00800074 	movhi	r2,1
 20064b4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20064b8:	e0bffe17 	ldw	r2,-8(fp)
 20064bc:	10800a17 	ldw	r2,40(r2)
 20064c0:	10800044 	addi	r2,r2,1
 20064c4:	1081ffcc 	andi	r2,r2,2047
 20064c8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 20064cc:	e0bffe17 	ldw	r2,-8(fp)
 20064d0:	10c00b17 	ldw	r3,44(r2)
 20064d4:	e0bffa17 	ldw	r2,-24(fp)
 20064d8:	18801626 	beq	r3,r2,2006534 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 20064dc:	e0bffd17 	ldw	r2,-12(fp)
 20064e0:	10800037 	ldwio	r2,0(r2)
 20064e4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 20064e8:	e0bffb17 	ldw	r2,-20(fp)
 20064ec:	10a0000c 	andi	r2,r2,32768
 20064f0:	1005003a 	cmpeq	r2,r2,zero
 20064f4:	10000f1e 	bne	r2,zero,2006534 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 20064f8:	e0bffe17 	ldw	r2,-8(fp)
 20064fc:	10c00a17 	ldw	r3,40(r2)
 2006500:	e0bffb17 	ldw	r2,-20(fp)
 2006504:	1009883a 	mov	r4,r2
 2006508:	e0bffe17 	ldw	r2,-8(fp)
 200650c:	1885883a 	add	r2,r3,r2
 2006510:	10800e04 	addi	r2,r2,56
 2006514:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2006518:	e0bffe17 	ldw	r2,-8(fp)
 200651c:	10800a17 	ldw	r2,40(r2)
 2006520:	10800044 	addi	r2,r2,1
 2006524:	10c1ffcc 	andi	r3,r2,2047
 2006528:	e0bffe17 	ldw	r2,-8(fp)
 200652c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2006530:	003fe106 	br	20064b8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2006534:	e0bffb17 	ldw	r2,-20(fp)
 2006538:	10bfffec 	andhi	r2,r2,65535
 200653c:	1005003a 	cmpeq	r2,r2,zero
 2006540:	1000101e 	bne	r2,zero,2006584 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2006544:	e0bffe17 	ldw	r2,-8(fp)
 2006548:	10c00817 	ldw	r3,32(r2)
 200654c:	00bfff84 	movi	r2,-2
 2006550:	1886703a 	and	r3,r3,r2
 2006554:	e0bffe17 	ldw	r2,-8(fp)
 2006558:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200655c:	e0bffd17 	ldw	r2,-12(fp)
 2006560:	11000104 	addi	r4,r2,4
 2006564:	e0bffe17 	ldw	r2,-8(fp)
 2006568:	10800817 	ldw	r2,32(r2)
 200656c:	1007883a 	mov	r3,r2
 2006570:	2005883a 	mov	r2,r4
 2006574:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2006578:	e0bffd17 	ldw	r2,-12(fp)
 200657c:	10800104 	addi	r2,r2,4
 2006580:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2006584:	e0bffc17 	ldw	r2,-16(fp)
 2006588:	1080800c 	andi	r2,r2,512
 200658c:	1005003a 	cmpeq	r2,r2,zero
 2006590:	103fbb1e 	bne	r2,zero,2006480 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2006594:	e0bffc17 	ldw	r2,-16(fp)
 2006598:	10bfffec 	andhi	r2,r2,65535
 200659c:	1004d43a 	srli	r2,r2,16
 20065a0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20065a4:	00001506 	br	20065fc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20065a8:	e13ffd17 	ldw	r4,-12(fp)
 20065ac:	e0bffe17 	ldw	r2,-8(fp)
 20065b0:	10c00d17 	ldw	r3,52(r2)
 20065b4:	e0bffe17 	ldw	r2,-8(fp)
 20065b8:	1885883a 	add	r2,r3,r2
 20065bc:	10820e04 	addi	r2,r2,2104
 20065c0:	10800003 	ldbu	r2,0(r2)
 20065c4:	10c03fcc 	andi	r3,r2,255
 20065c8:	18c0201c 	xori	r3,r3,128
 20065cc:	18ffe004 	addi	r3,r3,-128
 20065d0:	2005883a 	mov	r2,r4
 20065d4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20065d8:	e0bffe17 	ldw	r2,-8(fp)
 20065dc:	10800d17 	ldw	r2,52(r2)
 20065e0:	10800044 	addi	r2,r2,1
 20065e4:	10c1ffcc 	andi	r3,r2,2047
 20065e8:	e0bffe17 	ldw	r2,-8(fp)
 20065ec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 20065f0:	e0bff917 	ldw	r2,-28(fp)
 20065f4:	10bfffc4 	addi	r2,r2,-1
 20065f8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 20065fc:	e0bff917 	ldw	r2,-28(fp)
 2006600:	1005003a 	cmpeq	r2,r2,zero
 2006604:	1000051e 	bne	r2,zero,200661c <altera_avalon_jtag_uart_irq+0x1c4>
 2006608:	e0bffe17 	ldw	r2,-8(fp)
 200660c:	10c00d17 	ldw	r3,52(r2)
 2006610:	e0bffe17 	ldw	r2,-8(fp)
 2006614:	10800c17 	ldw	r2,48(r2)
 2006618:	18bfe31e 	bne	r3,r2,20065a8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200661c:	e0bff917 	ldw	r2,-28(fp)
 2006620:	1005003a 	cmpeq	r2,r2,zero
 2006624:	103f961e 	bne	r2,zero,2006480 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2006628:	e0bffe17 	ldw	r2,-8(fp)
 200662c:	10c00817 	ldw	r3,32(r2)
 2006630:	00bfff44 	movi	r2,-3
 2006634:	1886703a 	and	r3,r3,r2
 2006638:	e0bffe17 	ldw	r2,-8(fp)
 200663c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2006640:	e0bffe17 	ldw	r2,-8(fp)
 2006644:	10800017 	ldw	r2,0(r2)
 2006648:	11000104 	addi	r4,r2,4
 200664c:	e0bffe17 	ldw	r2,-8(fp)
 2006650:	10800817 	ldw	r2,32(r2)
 2006654:	1007883a 	mov	r3,r2
 2006658:	2005883a 	mov	r2,r4
 200665c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2006660:	e0bffd17 	ldw	r2,-12(fp)
 2006664:	10800104 	addi	r2,r2,4
 2006668:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200666c:	003f8406 	br	2006480 <altera_avalon_jtag_uart_irq+0x28>
}
 2006670:	e037883a 	mov	sp,fp
 2006674:	df000017 	ldw	fp,0(sp)
 2006678:	dec00104 	addi	sp,sp,4
 200667c:	f800283a 	ret

02006680 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2006680:	defffc04 	addi	sp,sp,-16
 2006684:	df000315 	stw	fp,12(sp)
 2006688:	df000304 	addi	fp,sp,12
 200668c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2006690:	e0bfff17 	ldw	r2,-4(fp)
 2006694:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2006698:	e0bffe17 	ldw	r2,-8(fp)
 200669c:	10800017 	ldw	r2,0(r2)
 20066a0:	10800104 	addi	r2,r2,4
 20066a4:	10800037 	ldwio	r2,0(r2)
 20066a8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 20066ac:	e0bffd17 	ldw	r2,-12(fp)
 20066b0:	1081000c 	andi	r2,r2,1024
 20066b4:	1005003a 	cmpeq	r2,r2,zero
 20066b8:	10000c1e 	bne	r2,zero,20066ec <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20066bc:	e0bffe17 	ldw	r2,-8(fp)
 20066c0:	10800017 	ldw	r2,0(r2)
 20066c4:	11000104 	addi	r4,r2,4
 20066c8:	e0bffe17 	ldw	r2,-8(fp)
 20066cc:	10800817 	ldw	r2,32(r2)
 20066d0:	10810014 	ori	r2,r2,1024
 20066d4:	1007883a 	mov	r3,r2
 20066d8:	2005883a 	mov	r2,r4
 20066dc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 20066e0:	e0bffe17 	ldw	r2,-8(fp)
 20066e4:	10000915 	stw	zero,36(r2)
 20066e8:	00000a06 	br	2006714 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 20066ec:	e0bffe17 	ldw	r2,-8(fp)
 20066f0:	10c00917 	ldw	r3,36(r2)
 20066f4:	00a00034 	movhi	r2,32768
 20066f8:	10bfff04 	addi	r2,r2,-4
 20066fc:	10c00536 	bltu	r2,r3,2006714 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2006700:	e0bffe17 	ldw	r2,-8(fp)
 2006704:	10800917 	ldw	r2,36(r2)
 2006708:	10c00044 	addi	r3,r2,1
 200670c:	e0bffe17 	ldw	r2,-8(fp)
 2006710:	10c00915 	stw	r3,36(r2)
 2006714:	00808074 	movhi	r2,513
 2006718:	10ad7d04 	addi	r2,r2,-18956
 200671c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2006720:	e037883a 	mov	sp,fp
 2006724:	df000017 	ldw	fp,0(sp)
 2006728:	dec00104 	addi	sp,sp,4
 200672c:	f800283a 	ret

02006730 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2006730:	defffc04 	addi	sp,sp,-16
 2006734:	df000315 	stw	fp,12(sp)
 2006738:	df000304 	addi	fp,sp,12
 200673c:	e13ffd15 	stw	r4,-12(fp)
 2006740:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2006744:	00000706 	br	2006764 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2006748:	e0bffe17 	ldw	r2,-8(fp)
 200674c:	1090000c 	andi	r2,r2,16384
 2006750:	1005003a 	cmpeq	r2,r2,zero
 2006754:	1000031e 	bne	r2,zero,2006764 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 2006758:	00bffd44 	movi	r2,-11
 200675c:	e0bfff15 	stw	r2,-4(fp)
 2006760:	00000b06 	br	2006790 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2006764:	e0bffd17 	ldw	r2,-12(fp)
 2006768:	10c00d17 	ldw	r3,52(r2)
 200676c:	e0bffd17 	ldw	r2,-12(fp)
 2006770:	10800c17 	ldw	r2,48(r2)
 2006774:	18800526 	beq	r3,r2,200678c <altera_avalon_jtag_uart_close+0x5c>
 2006778:	e0bffd17 	ldw	r2,-12(fp)
 200677c:	10c00917 	ldw	r3,36(r2)
 2006780:	e0bffd17 	ldw	r2,-12(fp)
 2006784:	10800117 	ldw	r2,4(r2)
 2006788:	18bfef36 	bltu	r3,r2,2006748 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200678c:	e03fff15 	stw	zero,-4(fp)
 2006790:	e0bfff17 	ldw	r2,-4(fp)
}
 2006794:	e037883a 	mov	sp,fp
 2006798:	df000017 	ldw	fp,0(sp)
 200679c:	dec00104 	addi	sp,sp,4
 20067a0:	f800283a 	ret

020067a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 20067a4:	defff804 	addi	sp,sp,-32
 20067a8:	df000715 	stw	fp,28(sp)
 20067ac:	df000704 	addi	fp,sp,28
 20067b0:	e13ffb15 	stw	r4,-20(fp)
 20067b4:	e17ffc15 	stw	r5,-16(fp)
 20067b8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 20067bc:	00bff9c4 	movi	r2,-25
 20067c0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 20067c4:	e0bffc17 	ldw	r2,-16(fp)
 20067c8:	e0bfff15 	stw	r2,-4(fp)
 20067cc:	e0ffff17 	ldw	r3,-4(fp)
 20067d0:	189a8060 	cmpeqi	r2,r3,27137
 20067d4:	1000041e 	bne	r2,zero,20067e8 <altera_avalon_jtag_uart_ioctl+0x44>
 20067d8:	e0ffff17 	ldw	r3,-4(fp)
 20067dc:	189a80a0 	cmpeqi	r2,r3,27138
 20067e0:	10001b1e 	bne	r2,zero,2006850 <altera_avalon_jtag_uart_ioctl+0xac>
 20067e4:	00002706 	br	2006884 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 20067e8:	e0bffb17 	ldw	r2,-20(fp)
 20067ec:	10c00117 	ldw	r3,4(r2)
 20067f0:	00a00034 	movhi	r2,32768
 20067f4:	10bfffc4 	addi	r2,r2,-1
 20067f8:	18802226 	beq	r3,r2,2006884 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 20067fc:	e0bffd17 	ldw	r2,-12(fp)
 2006800:	10800017 	ldw	r2,0(r2)
 2006804:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2006808:	e0bff917 	ldw	r2,-28(fp)
 200680c:	10800090 	cmplti	r2,r2,2
 2006810:	1000071e 	bne	r2,zero,2006830 <altera_avalon_jtag_uart_ioctl+0x8c>
 2006814:	e0fff917 	ldw	r3,-28(fp)
 2006818:	00a00034 	movhi	r2,32768
 200681c:	10bfffc4 	addi	r2,r2,-1
 2006820:	18800326 	beq	r3,r2,2006830 <altera_avalon_jtag_uart_ioctl+0x8c>
 2006824:	e0bff917 	ldw	r2,-28(fp)
 2006828:	e0bffe15 	stw	r2,-8(fp)
 200682c:	00000306 	br	200683c <altera_avalon_jtag_uart_ioctl+0x98>
 2006830:	00e00034 	movhi	r3,32768
 2006834:	18ffff84 	addi	r3,r3,-2
 2006838:	e0fffe15 	stw	r3,-8(fp)
 200683c:	e0bffb17 	ldw	r2,-20(fp)
 2006840:	e0fffe17 	ldw	r3,-8(fp)
 2006844:	10c00115 	stw	r3,4(r2)
      rc = 0;
 2006848:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 200684c:	00000d06 	br	2006884 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2006850:	e0bffb17 	ldw	r2,-20(fp)
 2006854:	10c00117 	ldw	r3,4(r2)
 2006858:	00a00034 	movhi	r2,32768
 200685c:	10bfffc4 	addi	r2,r2,-1
 2006860:	18800826 	beq	r3,r2,2006884 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2006864:	e13ffd17 	ldw	r4,-12(fp)
 2006868:	e0bffb17 	ldw	r2,-20(fp)
 200686c:	10c00917 	ldw	r3,36(r2)
 2006870:	e0bffb17 	ldw	r2,-20(fp)
 2006874:	10800117 	ldw	r2,4(r2)
 2006878:	1885803a 	cmpltu	r2,r3,r2
 200687c:	20800015 	stw	r2,0(r4)
      rc = 0;
 2006880:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 2006884:	e0bffa17 	ldw	r2,-24(fp)
}
 2006888:	e037883a 	mov	sp,fp
 200688c:	df000017 	ldw	fp,0(sp)
 2006890:	dec00104 	addi	sp,sp,4
 2006894:	f800283a 	ret

02006898 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2006898:	defff104 	addi	sp,sp,-60
 200689c:	dfc00e15 	stw	ra,56(sp)
 20068a0:	df000d15 	stw	fp,52(sp)
 20068a4:	df000d04 	addi	fp,sp,52
 20068a8:	e13ffb15 	stw	r4,-20(fp)
 20068ac:	e17ffc15 	stw	r5,-16(fp)
 20068b0:	e1bffd15 	stw	r6,-12(fp)
 20068b4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 20068b8:	e0bffc17 	ldw	r2,-16(fp)
 20068bc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20068c0:	00004806 	br	20069e4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 20068c4:	e0bffb17 	ldw	r2,-20(fp)
 20068c8:	10800a17 	ldw	r2,40(r2)
 20068cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 20068d0:	e0bffb17 	ldw	r2,-20(fp)
 20068d4:	10800b17 	ldw	r2,44(r2)
 20068d8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 20068dc:	e0fff717 	ldw	r3,-36(fp)
 20068e0:	e0bff617 	ldw	r2,-40(fp)
 20068e4:	18800536 	bltu	r3,r2,20068fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 20068e8:	e0bff717 	ldw	r2,-36(fp)
 20068ec:	e0fff617 	ldw	r3,-40(fp)
 20068f0:	10c5c83a 	sub	r2,r2,r3
 20068f4:	e0bff815 	stw	r2,-32(fp)
 20068f8:	00000406 	br	200690c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 20068fc:	00820004 	movi	r2,2048
 2006900:	e0fff617 	ldw	r3,-40(fp)
 2006904:	10c5c83a 	sub	r2,r2,r3
 2006908:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 200690c:	e0bff817 	ldw	r2,-32(fp)
 2006910:	1005003a 	cmpeq	r2,r2,zero
 2006914:	10001f1e 	bne	r2,zero,2006994 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 2006918:	e0fffd17 	ldw	r3,-12(fp)
 200691c:	e0bff817 	ldw	r2,-32(fp)
 2006920:	1880022e 	bgeu	r3,r2,200692c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2006924:	e0bffd17 	ldw	r2,-12(fp)
 2006928:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200692c:	e0bffb17 	ldw	r2,-20(fp)
 2006930:	10c00e04 	addi	r3,r2,56
 2006934:	e0bff617 	ldw	r2,-40(fp)
 2006938:	1887883a 	add	r3,r3,r2
 200693c:	e0bffa17 	ldw	r2,-24(fp)
 2006940:	1009883a 	mov	r4,r2
 2006944:	180b883a 	mov	r5,r3
 2006948:	e1bff817 	ldw	r6,-32(fp)
 200694c:	20091f00 	call	20091f0 <memcpy>
      ptr   += n;
 2006950:	e0fff817 	ldw	r3,-32(fp)
 2006954:	e0bffa17 	ldw	r2,-24(fp)
 2006958:	10c5883a 	add	r2,r2,r3
 200695c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 2006960:	e0fffd17 	ldw	r3,-12(fp)
 2006964:	e0bff817 	ldw	r2,-32(fp)
 2006968:	1885c83a 	sub	r2,r3,r2
 200696c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2006970:	e0fff617 	ldw	r3,-40(fp)
 2006974:	e0bff817 	ldw	r2,-32(fp)
 2006978:	1885883a 	add	r2,r3,r2
 200697c:	10c1ffcc 	andi	r3,r2,2047
 2006980:	e0bffb17 	ldw	r2,-20(fp)
 2006984:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2006988:	e0bffd17 	ldw	r2,-12(fp)
 200698c:	10800048 	cmpgei	r2,r2,1
 2006990:	103fcc1e 	bne	r2,zero,20068c4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 2006994:	e0fffa17 	ldw	r3,-24(fp)
 2006998:	e0bffc17 	ldw	r2,-16(fp)
 200699c:	1880141e 	bne	r3,r2,20069f0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20069a0:	e0bffe17 	ldw	r2,-8(fp)
 20069a4:	1090000c 	andi	r2,r2,16384
 20069a8:	1004c03a 	cmpne	r2,r2,zero
 20069ac:	1000101e 	bne	r2,zero,20069f0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20069b0:	e0bffb17 	ldw	r2,-20(fp)
 20069b4:	10c00a17 	ldw	r3,40(r2)
 20069b8:	e0bff717 	ldw	r2,-36(fp)
 20069bc:	1880051e 	bne	r3,r2,20069d4 <altera_avalon_jtag_uart_read+0x13c>
 20069c0:	e0bffb17 	ldw	r2,-20(fp)
 20069c4:	10c00917 	ldw	r3,36(r2)
 20069c8:	e0bffb17 	ldw	r2,-20(fp)
 20069cc:	10800117 	ldw	r2,4(r2)
 20069d0:	18bff736 	bltu	r3,r2,20069b0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 20069d4:	e0bffb17 	ldw	r2,-20(fp)
 20069d8:	10c00a17 	ldw	r3,40(r2)
 20069dc:	e0bff717 	ldw	r2,-36(fp)
 20069e0:	18800326 	beq	r3,r2,20069f0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20069e4:	e0bffd17 	ldw	r2,-12(fp)
 20069e8:	10800048 	cmpgei	r2,r2,1
 20069ec:	103fb51e 	bne	r2,zero,20068c4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 20069f0:	e0fffa17 	ldw	r3,-24(fp)
 20069f4:	e0bffc17 	ldw	r2,-16(fp)
 20069f8:	18802426 	beq	r3,r2,2006a8c <altera_avalon_jtag_uart_read+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20069fc:	0005303a 	rdctl	r2,status
 2006a00:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006a04:	e0fff517 	ldw	r3,-44(fp)
 2006a08:	00bfff84 	movi	r2,-2
 2006a0c:	1884703a 	and	r2,r3,r2
 2006a10:	1001703a 	wrctl	status,r2
  
  return context;
 2006a14:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2006a18:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2006a1c:	e0bffb17 	ldw	r2,-20(fp)
 2006a20:	10800817 	ldw	r2,32(r2)
 2006a24:	10c00054 	ori	r3,r2,1
 2006a28:	e0bffb17 	ldw	r2,-20(fp)
 2006a2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2006a30:	e0bffb17 	ldw	r2,-20(fp)
 2006a34:	10800017 	ldw	r2,0(r2)
 2006a38:	11000104 	addi	r4,r2,4
 2006a3c:	e0bffb17 	ldw	r2,-20(fp)
 2006a40:	10800817 	ldw	r2,32(r2)
 2006a44:	1007883a 	mov	r3,r2
 2006a48:	2005883a 	mov	r2,r4
 2006a4c:	10c00035 	stwio	r3,0(r2)
 2006a50:	e0bff917 	ldw	r2,-28(fp)
 2006a54:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2006a58:	0005303a 	rdctl	r2,status
 2006a5c:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2006a60:	e0fff417 	ldw	r3,-48(fp)
 2006a64:	00bfff84 	movi	r2,-2
 2006a68:	1884703a 	and	r2,r3,r2
 2006a6c:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2006a70:	e0bff317 	ldw	r2,-52(fp)
 2006a74:	10c0004c 	andi	r3,r2,1
 2006a78:	e0bff417 	ldw	r2,-48(fp)
 2006a7c:	10c4b03a 	or	r2,r2,r3
 2006a80:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
 2006a84:	e0bff417 	ldw	r2,-48(fp)
 2006a88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2006a8c:	e0fffa17 	ldw	r3,-24(fp)
 2006a90:	e0bffc17 	ldw	r2,-16(fp)
 2006a94:	18800526 	beq	r3,r2,2006aac <altera_avalon_jtag_uart_read+0x214>
    return ptr - buffer;
 2006a98:	e0fffa17 	ldw	r3,-24(fp)
 2006a9c:	e0bffc17 	ldw	r2,-16(fp)
 2006aa0:	1887c83a 	sub	r3,r3,r2
 2006aa4:	e0ffff15 	stw	r3,-4(fp)
 2006aa8:	00000906 	br	2006ad0 <altera_avalon_jtag_uart_read+0x238>
  else if (flags & O_NONBLOCK)
 2006aac:	e0bffe17 	ldw	r2,-8(fp)
 2006ab0:	1090000c 	andi	r2,r2,16384
 2006ab4:	1005003a 	cmpeq	r2,r2,zero
 2006ab8:	1000031e 	bne	r2,zero,2006ac8 <altera_avalon_jtag_uart_read+0x230>
    return -EWOULDBLOCK;
 2006abc:	00bffd44 	movi	r2,-11
 2006ac0:	e0bfff15 	stw	r2,-4(fp)
 2006ac4:	00000206 	br	2006ad0 <altera_avalon_jtag_uart_read+0x238>
  else
    return -EIO;
 2006ac8:	00bffec4 	movi	r2,-5
 2006acc:	e0bfff15 	stw	r2,-4(fp)
 2006ad0:	e0bfff17 	ldw	r2,-4(fp)
}
 2006ad4:	e037883a 	mov	sp,fp
 2006ad8:	dfc00117 	ldw	ra,4(sp)
 2006adc:	df000017 	ldw	fp,0(sp)
 2006ae0:	dec00204 	addi	sp,sp,8
 2006ae4:	f800283a 	ret

02006ae8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2006ae8:	defff104 	addi	sp,sp,-60
 2006aec:	dfc00e15 	stw	ra,56(sp)
 2006af0:	df000d15 	stw	fp,52(sp)
 2006af4:	df000d04 	addi	fp,sp,52
 2006af8:	e13ffb15 	stw	r4,-20(fp)
 2006afc:	e17ffc15 	stw	r5,-16(fp)
 2006b00:	e1bffd15 	stw	r6,-12(fp)
 2006b04:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2006b08:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2006b0c:	e0bffc17 	ldw	r2,-16(fp)
 2006b10:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2006b14:	00003a06 	br	2006c00 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2006b18:	e0bffb17 	ldw	r2,-20(fp)
 2006b1c:	10800c17 	ldw	r2,48(r2)
 2006b20:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 2006b24:	e0bffb17 	ldw	r2,-20(fp)
 2006b28:	10800d17 	ldw	r2,52(r2)
 2006b2c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 2006b30:	e0fffa17 	ldw	r3,-24(fp)
 2006b34:	e0bff917 	ldw	r2,-28(fp)
 2006b38:	1880062e 	bgeu	r3,r2,2006b54 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2006b3c:	e0fff917 	ldw	r3,-28(fp)
 2006b40:	e0bffa17 	ldw	r2,-24(fp)
 2006b44:	1885c83a 	sub	r2,r3,r2
 2006b48:	10bfffc4 	addi	r2,r2,-1
 2006b4c:	e0bff815 	stw	r2,-32(fp)
 2006b50:	00000c06 	br	2006b84 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 2006b54:	e0bff917 	ldw	r2,-28(fp)
 2006b58:	1005003a 	cmpeq	r2,r2,zero
 2006b5c:	1000051e 	bne	r2,zero,2006b74 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2006b60:	00820004 	movi	r2,2048
 2006b64:	e0fffa17 	ldw	r3,-24(fp)
 2006b68:	10c5c83a 	sub	r2,r2,r3
 2006b6c:	e0bff815 	stw	r2,-32(fp)
 2006b70:	00000406 	br	2006b84 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2006b74:	0081ffc4 	movi	r2,2047
 2006b78:	e0fffa17 	ldw	r3,-24(fp)
 2006b7c:	10c5c83a 	sub	r2,r2,r3
 2006b80:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2006b84:	e0bff817 	ldw	r2,-32(fp)
 2006b88:	1005003a 	cmpeq	r2,r2,zero
 2006b8c:	10001f1e 	bne	r2,zero,2006c0c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 2006b90:	e0fffd17 	ldw	r3,-12(fp)
 2006b94:	e0bff817 	ldw	r2,-32(fp)
 2006b98:	1880022e 	bgeu	r3,r2,2006ba4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 2006b9c:	e0bffd17 	ldw	r2,-12(fp)
 2006ba0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2006ba4:	e0bffb17 	ldw	r2,-20(fp)
 2006ba8:	10c20e04 	addi	r3,r2,2104
 2006bac:	e0bffa17 	ldw	r2,-24(fp)
 2006bb0:	1885883a 	add	r2,r3,r2
 2006bb4:	e0fffc17 	ldw	r3,-16(fp)
 2006bb8:	1009883a 	mov	r4,r2
 2006bbc:	180b883a 	mov	r5,r3
 2006bc0:	e1bff817 	ldw	r6,-32(fp)
 2006bc4:	20091f00 	call	20091f0 <memcpy>
      ptr   += n;
 2006bc8:	e0fff817 	ldw	r3,-32(fp)
 2006bcc:	e0bffc17 	ldw	r2,-16(fp)
 2006bd0:	10c5883a 	add	r2,r2,r3
 2006bd4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2006bd8:	e0fffd17 	ldw	r3,-12(fp)
 2006bdc:	e0bff817 	ldw	r2,-32(fp)
 2006be0:	1885c83a 	sub	r2,r3,r2
 2006be4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2006be8:	e0fffa17 	ldw	r3,-24(fp)
 2006bec:	e0bff817 	ldw	r2,-32(fp)
 2006bf0:	1885883a 	add	r2,r3,r2
 2006bf4:	10c1ffcc 	andi	r3,r2,2047
 2006bf8:	e0bffb17 	ldw	r2,-20(fp)
 2006bfc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2006c00:	e0bffd17 	ldw	r2,-12(fp)
 2006c04:	10800048 	cmpgei	r2,r2,1
 2006c08:	103fc31e 	bne	r2,zero,2006b18 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006c0c:	0005303a 	rdctl	r2,status
 2006c10:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006c14:	e0fff517 	ldw	r3,-44(fp)
 2006c18:	00bfff84 	movi	r2,-2
 2006c1c:	1884703a 	and	r2,r3,r2
 2006c20:	1001703a 	wrctl	status,r2
  
  return context;
 2006c24:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2006c28:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2006c2c:	e0bffb17 	ldw	r2,-20(fp)
 2006c30:	10800817 	ldw	r2,32(r2)
 2006c34:	10c00094 	ori	r3,r2,2
 2006c38:	e0bffb17 	ldw	r2,-20(fp)
 2006c3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2006c40:	e0bffb17 	ldw	r2,-20(fp)
 2006c44:	10800017 	ldw	r2,0(r2)
 2006c48:	11000104 	addi	r4,r2,4
 2006c4c:	e0bffb17 	ldw	r2,-20(fp)
 2006c50:	10800817 	ldw	r2,32(r2)
 2006c54:	1007883a 	mov	r3,r2
 2006c58:	2005883a 	mov	r2,r4
 2006c5c:	10c00035 	stwio	r3,0(r2)
 2006c60:	e0bff717 	ldw	r2,-36(fp)
 2006c64:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2006c68:	0005303a 	rdctl	r2,status
 2006c6c:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2006c70:	e0fff417 	ldw	r3,-48(fp)
 2006c74:	00bfff84 	movi	r2,-2
 2006c78:	1884703a 	and	r2,r3,r2
 2006c7c:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2006c80:	e0bff317 	ldw	r2,-52(fp)
 2006c84:	10c0004c 	andi	r3,r2,1
 2006c88:	e0bff417 	ldw	r2,-48(fp)
 2006c8c:	10c4b03a 	or	r2,r2,r3
 2006c90:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
 2006c94:	e0bff417 	ldw	r2,-48(fp)
 2006c98:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2006c9c:	e0bffd17 	ldw	r2,-12(fp)
 2006ca0:	10800050 	cmplti	r2,r2,1
 2006ca4:	1000111e 	bne	r2,zero,2006cec <altera_avalon_jtag_uart_write+0x204>
    {
      if (flags & O_NONBLOCK)
 2006ca8:	e0bffe17 	ldw	r2,-8(fp)
 2006cac:	1090000c 	andi	r2,r2,16384
 2006cb0:	1004c03a 	cmpne	r2,r2,zero
 2006cb4:	1000101e 	bne	r2,zero,2006cf8 <altera_avalon_jtag_uart_write+0x210>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2006cb8:	e0bffb17 	ldw	r2,-20(fp)
 2006cbc:	10c00d17 	ldw	r3,52(r2)
 2006cc0:	e0bff917 	ldw	r2,-28(fp)
 2006cc4:	1880051e 	bne	r3,r2,2006cdc <altera_avalon_jtag_uart_write+0x1f4>
 2006cc8:	e0bffb17 	ldw	r2,-20(fp)
 2006ccc:	10c00917 	ldw	r3,36(r2)
 2006cd0:	e0bffb17 	ldw	r2,-20(fp)
 2006cd4:	10800117 	ldw	r2,4(r2)
 2006cd8:	18bff736 	bltu	r3,r2,2006cb8 <altera_avalon_jtag_uart_write+0x1d0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2006cdc:	e0bffb17 	ldw	r2,-20(fp)
 2006ce0:	10c00d17 	ldw	r3,52(r2)
 2006ce4:	e0bff917 	ldw	r2,-28(fp)
 2006ce8:	18800326 	beq	r3,r2,2006cf8 <altera_avalon_jtag_uart_write+0x210>
        break;
    }
  }
  while (count > 0);
 2006cec:	e0bffd17 	ldw	r2,-12(fp)
 2006cf0:	10800048 	cmpgei	r2,r2,1
 2006cf4:	103fc21e 	bne	r2,zero,2006c00 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2006cf8:	e0fffc17 	ldw	r3,-16(fp)
 2006cfc:	e0bff617 	ldw	r2,-40(fp)
 2006d00:	18800526 	beq	r3,r2,2006d18 <altera_avalon_jtag_uart_write+0x230>
    return ptr - start;
 2006d04:	e0fffc17 	ldw	r3,-16(fp)
 2006d08:	e0bff617 	ldw	r2,-40(fp)
 2006d0c:	1887c83a 	sub	r3,r3,r2
 2006d10:	e0ffff15 	stw	r3,-4(fp)
 2006d14:	00000906 	br	2006d3c <altera_avalon_jtag_uart_write+0x254>
  else if (flags & O_NONBLOCK)
 2006d18:	e0bffe17 	ldw	r2,-8(fp)
 2006d1c:	1090000c 	andi	r2,r2,16384
 2006d20:	1005003a 	cmpeq	r2,r2,zero
 2006d24:	1000031e 	bne	r2,zero,2006d34 <altera_avalon_jtag_uart_write+0x24c>
    return -EWOULDBLOCK;
 2006d28:	00bffd44 	movi	r2,-11
 2006d2c:	e0bfff15 	stw	r2,-4(fp)
 2006d30:	00000206 	br	2006d3c <altera_avalon_jtag_uart_write+0x254>
  else
    return -EIO; /* Host not connected */
 2006d34:	00bffec4 	movi	r2,-5
 2006d38:	e0bfff15 	stw	r2,-4(fp)
 2006d3c:	e0bfff17 	ldw	r2,-4(fp)
}
 2006d40:	e037883a 	mov	sp,fp
 2006d44:	dfc00117 	ldw	ra,4(sp)
 2006d48:	df000017 	ldw	fp,0(sp)
 2006d4c:	dec00204 	addi	sp,sp,8
 2006d50:	f800283a 	ret

02006d54 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2006d54:	defff904 	addi	sp,sp,-28
 2006d58:	dfc00615 	stw	ra,24(sp)
 2006d5c:	df000515 	stw	fp,20(sp)
 2006d60:	df000504 	addi	fp,sp,20
 2006d64:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2006d68:	e0bfff17 	ldw	r2,-4(fp)
 2006d6c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2006d70:	e0bfff17 	ldw	r2,-4(fp)
 2006d74:	10800104 	addi	r2,r2,4
 2006d78:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006d7c:	0005303a 	rdctl	r2,status
 2006d80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006d84:	e0fffd17 	ldw	r3,-12(fp)
 2006d88:	00bfff84 	movi	r2,-2
 2006d8c:	1884703a 	and	r2,r3,r2
 2006d90:	1001703a 	wrctl	status,r2
  
  return context;
 2006d94:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2006d98:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 2006d9c:	2008b800 	call	2008b80 <alt_tick>
 2006da0:	e0bffe17 	ldw	r2,-8(fp)
 2006da4:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2006da8:	0005303a 	rdctl	r2,status
 2006dac:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2006db0:	e0fffc17 	ldw	r3,-16(fp)
 2006db4:	00bfff84 	movi	r2,-2
 2006db8:	1884703a 	and	r2,r3,r2
 2006dbc:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2006dc0:	e0bffb17 	ldw	r2,-20(fp)
 2006dc4:	10c0004c 	andi	r3,r2,1
 2006dc8:	e0bffc17 	ldw	r2,-16(fp)
 2006dcc:	10c4b03a 	or	r2,r2,r3
 2006dd0:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
 2006dd4:	e0bffc17 	ldw	r2,-16(fp)
 2006dd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2006ddc:	e037883a 	mov	sp,fp
 2006de0:	dfc00117 	ldw	ra,4(sp)
 2006de4:	df000017 	ldw	fp,0(sp)
 2006de8:	dec00204 	addi	sp,sp,8
 2006dec:	f800283a 	ret

02006df0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2006df0:	defff804 	addi	sp,sp,-32
 2006df4:	dfc00715 	stw	ra,28(sp)
 2006df8:	df000615 	stw	fp,24(sp)
 2006dfc:	df000604 	addi	fp,sp,24
 2006e00:	e13ffc15 	stw	r4,-16(fp)
 2006e04:	e17ffd15 	stw	r5,-12(fp)
 2006e08:	e1bffe15 	stw	r6,-8(fp)
 2006e0c:	e1ffff15 	stw	r7,-4(fp)
 2006e10:	e0bfff17 	ldw	r2,-4(fp)
 2006e14:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2006e18:	00808074 	movhi	r2,513
 2006e1c:	10ad7d04 	addi	r2,r2,-18956
 2006e20:	10800017 	ldw	r2,0(r2)
 2006e24:	1004c03a 	cmpne	r2,r2,zero
 2006e28:	1000041e 	bne	r2,zero,2006e3c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 2006e2c:	00c08074 	movhi	r3,513
 2006e30:	18ed7d04 	addi	r3,r3,-18956
 2006e34:	e0bffb17 	ldw	r2,-20(fp)
 2006e38:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2006e3c:	e0bffc17 	ldw	r2,-16(fp)
 2006e40:	10800104 	addi	r2,r2,4
 2006e44:	1007883a 	mov	r3,r2
 2006e48:	008001c4 	movi	r2,7
 2006e4c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2006e50:	d8000015 	stw	zero,0(sp)
 2006e54:	e13ffd17 	ldw	r4,-12(fp)
 2006e58:	e17ffe17 	ldw	r5,-8(fp)
 2006e5c:	01808034 	movhi	r6,512
 2006e60:	319b5504 	addi	r6,r6,27988
 2006e64:	e1fffc17 	ldw	r7,-16(fp)
 2006e68:	2007ad40 	call	2007ad4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2006e6c:	e037883a 	mov	sp,fp
 2006e70:	dfc00117 	ldw	ra,4(sp)
 2006e74:	df000017 	ldw	fp,0(sp)
 2006e78:	dec00204 	addi	sp,sp,8
 2006e7c:	f800283a 	ret

02006e80 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2006e80:	defffa04 	addi	sp,sp,-24
 2006e84:	dfc00515 	stw	ra,20(sp)
 2006e88:	df000415 	stw	fp,16(sp)
 2006e8c:	df000404 	addi	fp,sp,16
 2006e90:	e13ffd15 	stw	r4,-12(fp)
 2006e94:	e17ffe15 	stw	r5,-8(fp)
 2006e98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2006e9c:	e0bffd17 	ldw	r2,-12(fp)
 2006ea0:	10800017 	ldw	r2,0(r2)
 2006ea4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2006ea8:	e0bffc17 	ldw	r2,-16(fp)
 2006eac:	11000a04 	addi	r4,r2,40
 2006eb0:	e0bffd17 	ldw	r2,-12(fp)
 2006eb4:	11c00217 	ldw	r7,8(r2)
 2006eb8:	e17ffe17 	ldw	r5,-8(fp)
 2006ebc:	e1bfff17 	ldw	r6,-4(fp)
 2006ec0:	20073780 	call	2007378 <altera_avalon_uart_read>
      fd->fd_flags);
}
 2006ec4:	e037883a 	mov	sp,fp
 2006ec8:	dfc00117 	ldw	ra,4(sp)
 2006ecc:	df000017 	ldw	fp,0(sp)
 2006ed0:	dec00204 	addi	sp,sp,8
 2006ed4:	f800283a 	ret

02006ed8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2006ed8:	defffa04 	addi	sp,sp,-24
 2006edc:	dfc00515 	stw	ra,20(sp)
 2006ee0:	df000415 	stw	fp,16(sp)
 2006ee4:	df000404 	addi	fp,sp,16
 2006ee8:	e13ffd15 	stw	r4,-12(fp)
 2006eec:	e17ffe15 	stw	r5,-8(fp)
 2006ef0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2006ef4:	e0bffd17 	ldw	r2,-12(fp)
 2006ef8:	10800017 	ldw	r2,0(r2)
 2006efc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 2006f00:	e0bffc17 	ldw	r2,-16(fp)
 2006f04:	11000a04 	addi	r4,r2,40
 2006f08:	e0bffd17 	ldw	r2,-12(fp)
 2006f0c:	11c00217 	ldw	r7,8(r2)
 2006f10:	e17ffe17 	ldw	r5,-8(fp)
 2006f14:	e1bfff17 	ldw	r6,-4(fp)
 2006f18:	20076600 	call	2007660 <altera_avalon_uart_write>
      fd->fd_flags);
}
 2006f1c:	e037883a 	mov	sp,fp
 2006f20:	dfc00117 	ldw	ra,4(sp)
 2006f24:	df000017 	ldw	fp,0(sp)
 2006f28:	dec00204 	addi	sp,sp,8
 2006f2c:	f800283a 	ret

02006f30 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 2006f30:	defffc04 	addi	sp,sp,-16
 2006f34:	dfc00315 	stw	ra,12(sp)
 2006f38:	df000215 	stw	fp,8(sp)
 2006f3c:	df000204 	addi	fp,sp,8
 2006f40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2006f44:	e0bfff17 	ldw	r2,-4(fp)
 2006f48:	10800017 	ldw	r2,0(r2)
 2006f4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 2006f50:	e0bffe17 	ldw	r2,-8(fp)
 2006f54:	11000a04 	addi	r4,r2,40
 2006f58:	e0bfff17 	ldw	r2,-4(fp)
 2006f5c:	11400217 	ldw	r5,8(r2)
 2006f60:	20073180 	call	2007318 <altera_avalon_uart_close>
}
 2006f64:	e037883a 	mov	sp,fp
 2006f68:	dfc00117 	ldw	ra,4(sp)
 2006f6c:	df000017 	ldw	fp,0(sp)
 2006f70:	dec00204 	addi	sp,sp,8
 2006f74:	f800283a 	ret

02006f78 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 2006f78:	defff704 	addi	sp,sp,-36
 2006f7c:	dfc00815 	stw	ra,32(sp)
 2006f80:	df000715 	stw	fp,28(sp)
 2006f84:	df000704 	addi	fp,sp,28
 2006f88:	e13ffc15 	stw	r4,-16(fp)
 2006f8c:	e17ffd15 	stw	r5,-12(fp)
 2006f90:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
 2006f94:	e0bffc17 	ldw	r2,-16(fp)
 2006f98:	10800017 	ldw	r2,0(r2)
 2006f9c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 2006fa0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2006fa4:	1004c03a 	cmpne	r2,r2,zero
 2006fa8:	1000061e 	bne	r2,zero,2006fc4 <altera_avalon_uart_init+0x4c>
 2006fac:	0005883a 	mov	r2,zero
 2006fb0:	1004c03a 	cmpne	r2,r2,zero
 2006fb4:	1000031e 	bne	r2,zero,2006fc4 <altera_avalon_uart_init+0x4c>
 2006fb8:	0005883a 	mov	r2,zero
 2006fbc:	1005003a 	cmpeq	r2,r2,zero
 2006fc0:	1000031e 	bne	r2,zero,2006fd0 <altera_avalon_uart_init+0x58>
 2006fc4:	00800044 	movi	r2,1
 2006fc8:	e0bfff15 	stw	r2,-4(fp)
 2006fcc:	00000106 	br	2006fd4 <altera_avalon_uart_init+0x5c>
 2006fd0:	e03fff15 	stw	zero,-4(fp)
 2006fd4:	e0bfff17 	ldw	r2,-4(fp)
 2006fd8:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 2006fdc:	e0bffa17 	ldw	r2,-24(fp)
 2006fe0:	1004c03a 	cmpne	r2,r2,zero
 2006fe4:	1000111e 	bne	r2,zero,200702c <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 2006fe8:	e0fffc17 	ldw	r3,-16(fp)
 2006fec:	00832004 	movi	r2,3200
 2006ff0:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 2006ff4:	e0bffb17 	ldw	r2,-20(fp)
 2006ff8:	11000304 	addi	r4,r2,12
 2006ffc:	e0bffc17 	ldw	r2,-16(fp)
 2007000:	10800117 	ldw	r2,4(r2)
 2007004:	1007883a 	mov	r3,r2
 2007008:	2005883a 	mov	r2,r4
 200700c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 2007010:	d8000015 	stw	zero,0(sp)
 2007014:	e13ffd17 	ldw	r4,-12(fp)
 2007018:	e17ffe17 	ldw	r5,-8(fp)
 200701c:	01808034 	movhi	r6,512
 2007020:	319c1004 	addi	r6,r6,28736
 2007024:	e1fffc17 	ldw	r7,-16(fp)
 2007028:	2007ad40 	call	2007ad4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 200702c:	e037883a 	mov	sp,fp
 2007030:	dfc00117 	ldw	ra,4(sp)
 2007034:	df000017 	ldw	fp,0(sp)
 2007038:	dec00204 	addi	sp,sp,8
 200703c:	f800283a 	ret

02007040 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 2007040:	defffa04 	addi	sp,sp,-24
 2007044:	dfc00515 	stw	ra,20(sp)
 2007048:	df000415 	stw	fp,16(sp)
 200704c:	df000404 	addi	fp,sp,16
 2007050:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 2007054:	e0bfff17 	ldw	r2,-4(fp)
 2007058:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
 200705c:	e0bffd17 	ldw	r2,-12(fp)
 2007060:	10800017 	ldw	r2,0(r2)
 2007064:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 2007068:	e0bffc17 	ldw	r2,-16(fp)
 200706c:	10800204 	addi	r2,r2,8
 2007070:	10800037 	ldwio	r2,0(r2)
 2007074:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 2007078:	e0bffc17 	ldw	r2,-16(fp)
 200707c:	10800204 	addi	r2,r2,8
 2007080:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 2007084:	e0bffc17 	ldw	r2,-16(fp)
 2007088:	10800204 	addi	r2,r2,8
 200708c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 2007090:	e0bffe17 	ldw	r2,-8(fp)
 2007094:	1080200c 	andi	r2,r2,128
 2007098:	1005003a 	cmpeq	r2,r2,zero
 200709c:	1000031e 	bne	r2,zero,20070ac <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 20070a0:	e13ffd17 	ldw	r4,-12(fp)
 20070a4:	e17ffe17 	ldw	r5,-8(fp)
 20070a8:	20070dc0 	call	20070dc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 20070ac:	e0bffe17 	ldw	r2,-8(fp)
 20070b0:	1081100c 	andi	r2,r2,1088
 20070b4:	1005003a 	cmpeq	r2,r2,zero
 20070b8:	1000031e 	bne	r2,zero,20070c8 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 20070bc:	e13ffd17 	ldw	r4,-12(fp)
 20070c0:	e17ffe17 	ldw	r5,-8(fp)
 20070c4:	20071bc0 	call	20071bc <altera_avalon_uart_txirq>
  }
  

}
 20070c8:	e037883a 	mov	sp,fp
 20070cc:	dfc00117 	ldw	ra,4(sp)
 20070d0:	df000017 	ldw	fp,0(sp)
 20070d4:	dec00204 	addi	sp,sp,8
 20070d8:	f800283a 	ret

020070dc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 20070dc:	defffc04 	addi	sp,sp,-16
 20070e0:	df000315 	stw	fp,12(sp)
 20070e4:	df000304 	addi	fp,sp,12
 20070e8:	e13ffe15 	stw	r4,-8(fp)
 20070ec:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 20070f0:	e0bfff17 	ldw	r2,-4(fp)
 20070f4:	108000cc 	andi	r2,r2,3
 20070f8:	1004c03a 	cmpne	r2,r2,zero
 20070fc:	10002b1e 	bne	r2,zero,20071ac <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 2007100:	e0bffe17 	ldw	r2,-8(fp)
 2007104:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2007108:	e0bffe17 	ldw	r2,-8(fp)
 200710c:	10800317 	ldw	r2,12(r2)
 2007110:	10800044 	addi	r2,r2,1
 2007114:	10800fcc 	andi	r2,r2,63
 2007118:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 200711c:	e0bffe17 	ldw	r2,-8(fp)
 2007120:	11000317 	ldw	r4,12(r2)
 2007124:	e0bffe17 	ldw	r2,-8(fp)
 2007128:	10800017 	ldw	r2,0(r2)
 200712c:	10800037 	ldwio	r2,0(r2)
 2007130:	1007883a 	mov	r3,r2
 2007134:	e0bffe17 	ldw	r2,-8(fp)
 2007138:	2085883a 	add	r2,r4,r2
 200713c:	10800704 	addi	r2,r2,28
 2007140:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 2007144:	e0fffe17 	ldw	r3,-8(fp)
 2007148:	e0bffd17 	ldw	r2,-12(fp)
 200714c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2007150:	e0bffe17 	ldw	r2,-8(fp)
 2007154:	10800317 	ldw	r2,12(r2)
 2007158:	10800044 	addi	r2,r2,1
 200715c:	10800fcc 	andi	r2,r2,63
 2007160:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 2007164:	e0bffe17 	ldw	r2,-8(fp)
 2007168:	10c00217 	ldw	r3,8(r2)
 200716c:	e0bffd17 	ldw	r2,-12(fp)
 2007170:	18800e1e 	bne	r3,r2,20071ac <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2007174:	e0bffe17 	ldw	r2,-8(fp)
 2007178:	10c00117 	ldw	r3,4(r2)
 200717c:	00bfdfc4 	movi	r2,-129
 2007180:	1886703a 	and	r3,r3,r2
 2007184:	e0bffe17 	ldw	r2,-8(fp)
 2007188:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 200718c:	e0bffe17 	ldw	r2,-8(fp)
 2007190:	10800017 	ldw	r2,0(r2)
 2007194:	11000304 	addi	r4,r2,12
 2007198:	e0bffe17 	ldw	r2,-8(fp)
 200719c:	10800117 	ldw	r2,4(r2)
 20071a0:	1007883a 	mov	r3,r2
 20071a4:	2005883a 	mov	r2,r4
 20071a8:	10c00035 	stwio	r3,0(r2)
  }   
}
 20071ac:	e037883a 	mov	sp,fp
 20071b0:	df000017 	ldw	fp,0(sp)
 20071b4:	dec00104 	addi	sp,sp,4
 20071b8:	f800283a 	ret

020071bc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 20071bc:	defffd04 	addi	sp,sp,-12
 20071c0:	df000215 	stw	fp,8(sp)
 20071c4:	df000204 	addi	fp,sp,8
 20071c8:	e13ffe15 	stw	r4,-8(fp)
 20071cc:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 20071d0:	e0bffe17 	ldw	r2,-8(fp)
 20071d4:	10c00417 	ldw	r3,16(r2)
 20071d8:	e0bffe17 	ldw	r2,-8(fp)
 20071dc:	10800517 	ldw	r2,20(r2)
 20071e0:	18803626 	beq	r3,r2,20072bc <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 20071e4:	e0bffe17 	ldw	r2,-8(fp)
 20071e8:	10800617 	ldw	r2,24(r2)
 20071ec:	1080008c 	andi	r2,r2,2
 20071f0:	1005003a 	cmpeq	r2,r2,zero
 20071f4:	1000041e 	bne	r2,zero,2007208 <altera_avalon_uart_txirq+0x4c>
 20071f8:	e0bfff17 	ldw	r2,-4(fp)
 20071fc:	1082000c 	andi	r2,r2,2048
 2007200:	1005003a 	cmpeq	r2,r2,zero
 2007204:	10001e1e 	bne	r2,zero,2007280 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 2007208:	e0bffe17 	ldw	r2,-8(fp)
 200720c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 2007210:	e0bffe17 	ldw	r2,-8(fp)
 2007214:	10800017 	ldw	r2,0(r2)
 2007218:	11000104 	addi	r4,r2,4
 200721c:	e0bffe17 	ldw	r2,-8(fp)
 2007220:	10c00417 	ldw	r3,16(r2)
 2007224:	e0bffe17 	ldw	r2,-8(fp)
 2007228:	1885883a 	add	r2,r3,r2
 200722c:	10801704 	addi	r2,r2,92
 2007230:	10800003 	ldbu	r2,0(r2)
 2007234:	10c03fcc 	andi	r3,r2,255
 2007238:	2005883a 	mov	r2,r4
 200723c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 2007240:	e0bffe17 	ldw	r2,-8(fp)
 2007244:	10800417 	ldw	r2,16(r2)
 2007248:	10c00044 	addi	r3,r2,1
 200724c:	e0bffe17 	ldw	r2,-8(fp)
 2007250:	10c00415 	stw	r3,16(r2)
 2007254:	e0bffe17 	ldw	r2,-8(fp)
 2007258:	10800417 	ldw	r2,16(r2)
 200725c:	10c00fcc 	andi	r3,r2,63
 2007260:	e0bffe17 	ldw	r2,-8(fp)
 2007264:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2007268:	e0bffe17 	ldw	r2,-8(fp)
 200726c:	10800117 	ldw	r2,4(r2)
 2007270:	10c01014 	ori	r3,r2,64
 2007274:	e0bffe17 	ldw	r2,-8(fp)
 2007278:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 200727c:	00000f06 	br	20072bc <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 2007280:	e0bffe17 	ldw	r2,-8(fp)
 2007284:	10800017 	ldw	r2,0(r2)
 2007288:	10800204 	addi	r2,r2,8
 200728c:	10800037 	ldwio	r2,0(r2)
 2007290:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2007294:	e0bfff17 	ldw	r2,-4(fp)
 2007298:	1082000c 	andi	r2,r2,2048
 200729c:	1004c03a 	cmpne	r2,r2,zero
 20072a0:	1000061e 	bne	r2,zero,20072bc <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 20072a4:	e0bffe17 	ldw	r2,-8(fp)
 20072a8:	10c00117 	ldw	r3,4(r2)
 20072ac:	00bfefc4 	movi	r2,-65
 20072b0:	1886703a 	and	r3,r3,r2
 20072b4:	e0bffe17 	ldw	r2,-8(fp)
 20072b8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 20072bc:	e0bffe17 	ldw	r2,-8(fp)
 20072c0:	10c00417 	ldw	r3,16(r2)
 20072c4:	e0bffe17 	ldw	r2,-8(fp)
 20072c8:	10800517 	ldw	r2,20(r2)
 20072cc:	1880061e 	bne	r3,r2,20072e8 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 20072d0:	e0bffe17 	ldw	r2,-8(fp)
 20072d4:	10c00117 	ldw	r3,4(r2)
 20072d8:	00beefc4 	movi	r2,-1089
 20072dc:	1886703a 	and	r3,r3,r2
 20072e0:	e0bffe17 	ldw	r2,-8(fp)
 20072e4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20072e8:	e0bffe17 	ldw	r2,-8(fp)
 20072ec:	10800017 	ldw	r2,0(r2)
 20072f0:	11000304 	addi	r4,r2,12
 20072f4:	e0bffe17 	ldw	r2,-8(fp)
 20072f8:	10800117 	ldw	r2,4(r2)
 20072fc:	1007883a 	mov	r3,r2
 2007300:	2005883a 	mov	r2,r4
 2007304:	10c00035 	stwio	r3,0(r2)
}
 2007308:	e037883a 	mov	sp,fp
 200730c:	df000017 	ldw	fp,0(sp)
 2007310:	dec00104 	addi	sp,sp,4
 2007314:	f800283a 	ret

02007318 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 2007318:	defffc04 	addi	sp,sp,-16
 200731c:	df000315 	stw	fp,12(sp)
 2007320:	df000304 	addi	fp,sp,12
 2007324:	e13ffd15 	stw	r4,-12(fp)
 2007328:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 200732c:	00000706 	br	200734c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2007330:	e0bffe17 	ldw	r2,-8(fp)
 2007334:	1090000c 	andi	r2,r2,16384
 2007338:	1005003a 	cmpeq	r2,r2,zero
 200733c:	1000031e 	bne	r2,zero,200734c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
 2007340:	00bffd44 	movi	r2,-11
 2007344:	e0bfff15 	stw	r2,-4(fp)
 2007348:	00000606 	br	2007364 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 200734c:	e0bffd17 	ldw	r2,-12(fp)
 2007350:	10c00417 	ldw	r3,16(r2)
 2007354:	e0bffd17 	ldw	r2,-12(fp)
 2007358:	10800517 	ldw	r2,20(r2)
 200735c:	18bff41e 	bne	r3,r2,2007330 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2007360:	e03fff15 	stw	zero,-4(fp)
 2007364:	e0bfff17 	ldw	r2,-4(fp)
}
 2007368:	e037883a 	mov	sp,fp
 200736c:	df000017 	ldw	fp,0(sp)
 2007370:	dec00104 	addi	sp,sp,4
 2007374:	f800283a 	ret

02007378 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 2007378:	deffee04 	addi	sp,sp,-72
 200737c:	dfc01115 	stw	ra,68(sp)
 2007380:	df001015 	stw	fp,64(sp)
 2007384:	df001004 	addi	fp,sp,64
 2007388:	e13ffb15 	stw	r4,-20(fp)
 200738c:	e17ffc15 	stw	r5,-16(fp)
 2007390:	e1bffd15 	stw	r6,-12(fp)
 2007394:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 2007398:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
 200739c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 20073a0:	e0bffe17 	ldw	r2,-8(fp)
 20073a4:	1090000c 	andi	r2,r2,16384
 20073a8:	1005003a 	cmpeq	r2,r2,zero
 20073ac:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 20073b0:	e0bffb17 	ldw	r2,-20(fp)
 20073b4:	10800217 	ldw	r2,8(r2)
 20073b8:	10800044 	addi	r2,r2,1
 20073bc:	10800fcc 	andi	r2,r2,63
 20073c0:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 20073c4:	00001906 	br	200742c <altera_avalon_uart_read+0xb4>
    {
      count++;
 20073c8:	e0bff617 	ldw	r2,-40(fp)
 20073cc:	10800044 	addi	r2,r2,1
 20073d0:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 20073d4:	e0bffb17 	ldw	r2,-20(fp)
 20073d8:	10c00217 	ldw	r3,8(r2)
 20073dc:	e0bffb17 	ldw	r2,-20(fp)
 20073e0:	1885883a 	add	r2,r3,r2
 20073e4:	10800704 	addi	r2,r2,28
 20073e8:	10800003 	ldbu	r2,0(r2)
 20073ec:	1007883a 	mov	r3,r2
 20073f0:	e0bffc17 	ldw	r2,-16(fp)
 20073f4:	10c00005 	stb	r3,0(r2)
 20073f8:	e0bffc17 	ldw	r2,-16(fp)
 20073fc:	10800044 	addi	r2,r2,1
 2007400:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 2007404:	e0bffb17 	ldw	r2,-20(fp)
 2007408:	10800217 	ldw	r2,8(r2)
 200740c:	10c00044 	addi	r3,r2,1
 2007410:	e0bffb17 	ldw	r2,-20(fp)
 2007414:	10c00215 	stw	r3,8(r2)
 2007418:	e0bffb17 	ldw	r2,-20(fp)
 200741c:	10800217 	ldw	r2,8(r2)
 2007420:	10c00fcc 	andi	r3,r2,63
 2007424:	e0bffb17 	ldw	r2,-20(fp)
 2007428:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 200742c:	e0fff617 	ldw	r3,-40(fp)
 2007430:	e0bffd17 	ldw	r2,-12(fp)
 2007434:	1880050e 	bge	r3,r2,200744c <altera_avalon_uart_read+0xd4>
 2007438:	e0bffb17 	ldw	r2,-20(fp)
 200743c:	10c00217 	ldw	r3,8(r2)
 2007440:	e0bffb17 	ldw	r2,-20(fp)
 2007444:	10800317 	ldw	r2,12(r2)
 2007448:	18bfdf1e 	bne	r3,r2,20073c8 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 200744c:	e0bff617 	ldw	r2,-40(fp)
 2007450:	1004c03a 	cmpne	r2,r2,zero
 2007454:	1000321e 	bne	r2,zero,2007520 <altera_avalon_uart_read+0x1a8>
 2007458:	e0bffb17 	ldw	r2,-20(fp)
 200745c:	10c00217 	ldw	r3,8(r2)
 2007460:	e0bffb17 	ldw	r2,-20(fp)
 2007464:	10800317 	ldw	r2,12(r2)
 2007468:	18802d1e 	bne	r3,r2,2007520 <altera_avalon_uart_read+0x1a8>
    {
      if (!block)
 200746c:	e0bff917 	ldw	r2,-28(fp)
 2007470:	1004c03a 	cmpne	r2,r2,zero
 2007474:	1000061e 	bne	r2,zero,2007490 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 2007478:	20076000 	call	2007600 <alt_get_errno>
 200747c:	00c002c4 	movi	r3,11
 2007480:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 2007484:	00800044 	movi	r2,1
 2007488:	e0bff705 	stb	r2,-36(fp)
        break;
 200748c:	00002a06 	br	2007538 <altera_avalon_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007490:	0005303a 	rdctl	r2,status
 2007494:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007498:	e0fff517 	ldw	r3,-44(fp)
 200749c:	00bfff84 	movi	r2,-2
 20074a0:	1884703a 	and	r2,r3,r2
 20074a4:	1001703a 	wrctl	status,r2
  
  return context;
 20074a8:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 20074ac:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 20074b0:	e0bffb17 	ldw	r2,-20(fp)
 20074b4:	10800117 	ldw	r2,4(r2)
 20074b8:	10c02014 	ori	r3,r2,128
 20074bc:	e0bffb17 	ldw	r2,-20(fp)
 20074c0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20074c4:	e0bffb17 	ldw	r2,-20(fp)
 20074c8:	10800017 	ldw	r2,0(r2)
 20074cc:	11000304 	addi	r4,r2,12
 20074d0:	e0bffb17 	ldw	r2,-20(fp)
 20074d4:	10800117 	ldw	r2,4(r2)
 20074d8:	1007883a 	mov	r3,r2
 20074dc:	2005883a 	mov	r2,r4
 20074e0:	10c00035 	stwio	r3,0(r2)
 20074e4:	e0bffa17 	ldw	r2,-24(fp)
 20074e8:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 20074ec:	0005303a 	rdctl	r2,status
 20074f0:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 20074f4:	e0fff417 	ldw	r3,-48(fp)
 20074f8:	00bfff84 	movi	r2,-2
 20074fc:	1884703a 	and	r2,r3,r2
 2007500:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2007504:	e0bff317 	ldw	r2,-52(fp)
 2007508:	10c0004c 	andi	r3,r2,1
 200750c:	e0bff417 	ldw	r2,-48(fp)
 2007510:	10c4b03a 	or	r2,r2,r3
 2007514:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
 2007518:	e0bff417 	ldw	r2,-48(fp)
 200751c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 2007520:	e0bff617 	ldw	r2,-40(fp)
 2007524:	1004c03a 	cmpne	r2,r2,zero
 2007528:	1000031e 	bne	r2,zero,2007538 <altera_avalon_uart_read+0x1c0>
 200752c:	e0bffd17 	ldw	r2,-12(fp)
 2007530:	1004c03a 	cmpne	r2,r2,zero
 2007534:	103fbd1e 	bne	r2,zero,200742c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007538:	0005303a 	rdctl	r2,status
 200753c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007540:	e0fff217 	ldw	r3,-56(fp)
 2007544:	00bfff84 	movi	r2,-2
 2007548:	1884703a 	and	r2,r3,r2
 200754c:	1001703a 	wrctl	status,r2
  
  return context;
 2007550:	e0bff217 	ldw	r2,-56(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 2007554:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2007558:	e0bffb17 	ldw	r2,-20(fp)
 200755c:	10800117 	ldw	r2,4(r2)
 2007560:	10c02014 	ori	r3,r2,128
 2007564:	e0bffb17 	ldw	r2,-20(fp)
 2007568:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200756c:	e0bffb17 	ldw	r2,-20(fp)
 2007570:	10800017 	ldw	r2,0(r2)
 2007574:	11000304 	addi	r4,r2,12
 2007578:	e0bffb17 	ldw	r2,-20(fp)
 200757c:	10800117 	ldw	r2,4(r2)
 2007580:	1007883a 	mov	r3,r2
 2007584:	2005883a 	mov	r2,r4
 2007588:	10c00035 	stwio	r3,0(r2)
 200758c:	e0bffa17 	ldw	r2,-24(fp)
 2007590:	e0bff015 	stw	r2,-64(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2007594:	0005303a 	rdctl	r2,status
 2007598:	e0bff115 	stw	r2,-60(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 200759c:	e0fff117 	ldw	r3,-60(fp)
 20075a0:	00bfff84 	movi	r2,-2
 20075a4:	1884703a 	and	r2,r3,r2
 20075a8:	e0bff115 	stw	r2,-60(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 20075ac:	e0bff017 	ldw	r2,-64(fp)
 20075b0:	10c0004c 	andi	r3,r2,1
 20075b4:	e0bff117 	ldw	r2,-60(fp)
 20075b8:	10c4b03a 	or	r2,r2,r3
 20075bc:	e0bff115 	stw	r2,-60(fp)
  
  NIOS2_WRITE_STATUS (status);
 20075c0:	e0bff117 	ldw	r2,-60(fp)
 20075c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 20075c8:	e0bff703 	ldbu	r2,-36(fp)
 20075cc:	1005003a 	cmpeq	r2,r2,zero
 20075d0:	1000031e 	bne	r2,zero,20075e0 <altera_avalon_uart_read+0x268>
    return ~EWOULDBLOCK;
 20075d4:	00bffd04 	movi	r2,-12
 20075d8:	e0bfff15 	stw	r2,-4(fp)
 20075dc:	00000206 	br	20075e8 <altera_avalon_uart_read+0x270>
  }
  else {
    return count;
 20075e0:	e0bff617 	ldw	r2,-40(fp)
 20075e4:	e0bfff15 	stw	r2,-4(fp)
 20075e8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 20075ec:	e037883a 	mov	sp,fp
 20075f0:	dfc00117 	ldw	ra,4(sp)
 20075f4:	df000017 	ldw	fp,0(sp)
 20075f8:	dec00204 	addi	sp,sp,8
 20075fc:	f800283a 	ret

02007600 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2007600:	defffd04 	addi	sp,sp,-12
 2007604:	dfc00215 	stw	ra,8(sp)
 2007608:	df000115 	stw	fp,4(sp)
 200760c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2007610:	00808074 	movhi	r2,513
 2007614:	10ad7204 	addi	r2,r2,-19000
 2007618:	10800017 	ldw	r2,0(r2)
 200761c:	1005003a 	cmpeq	r2,r2,zero
 2007620:	1000061e 	bne	r2,zero,200763c <alt_get_errno+0x3c>
 2007624:	00808074 	movhi	r2,513
 2007628:	10ad7204 	addi	r2,r2,-19000
 200762c:	10800017 	ldw	r2,0(r2)
 2007630:	103ee83a 	callr	r2
 2007634:	e0bfff15 	stw	r2,-4(fp)
 2007638:	00000306 	br	2007648 <alt_get_errno+0x48>
 200763c:	00808074 	movhi	r2,513
 2007640:	10ad7f04 	addi	r2,r2,-18948
 2007644:	e0bfff15 	stw	r2,-4(fp)
 2007648:	e0bfff17 	ldw	r2,-4(fp)
}
 200764c:	e037883a 	mov	sp,fp
 2007650:	dfc00117 	ldw	ra,4(sp)
 2007654:	df000017 	ldw	fp,0(sp)
 2007658:	dec00204 	addi	sp,sp,8
 200765c:	f800283a 	ret

02007660 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 2007660:	defff004 	addi	sp,sp,-64
 2007664:	dfc00f15 	stw	ra,60(sp)
 2007668:	df000e15 	stw	fp,56(sp)
 200766c:	df000e04 	addi	fp,sp,56
 2007670:	e13ffc15 	stw	r4,-16(fp)
 2007674:	e17ffd15 	stw	r5,-12(fp)
 2007678:	e1bffe15 	stw	r6,-8(fp)
 200767c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 2007680:	e0bffe17 	ldw	r2,-8(fp)
 2007684:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 2007688:	e0bfff17 	ldw	r2,-4(fp)
 200768c:	1090000c 	andi	r2,r2,16384
 2007690:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2007694:	00004b06 	br	20077c4 <altera_avalon_uart_write+0x164>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2007698:	e0bffc17 	ldw	r2,-16(fp)
 200769c:	10800517 	ldw	r2,20(r2)
 20076a0:	10800044 	addi	r2,r2,1
 20076a4:	10800fcc 	andi	r2,r2,63
 20076a8:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 20076ac:	e0bffc17 	ldw	r2,-16(fp)
 20076b0:	10c00417 	ldw	r3,16(r2)
 20076b4:	e0bff917 	ldw	r2,-28(fp)
 20076b8:	1880301e 	bne	r3,r2,200777c <altera_avalon_uart_write+0x11c>
    {
      if (no_block)
 20076bc:	e0bffa17 	ldw	r2,-24(fp)
 20076c0:	1005003a 	cmpeq	r2,r2,zero
 20076c4:	1000051e 	bne	r2,zero,20076dc <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 20076c8:	20078800 	call	2007880 <alt_get_errno>
 20076cc:	1007883a 	mov	r3,r2
 20076d0:	008002c4 	movi	r2,11
 20076d4:	18800015 	stw	r2,0(r3)
        break;
 20076d8:	00003d06 	br	20077d0 <altera_avalon_uart_write+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20076dc:	0005303a 	rdctl	r2,status
 20076e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20076e4:	e0fff717 	ldw	r3,-36(fp)
 20076e8:	00bfff84 	movi	r2,-2
 20076ec:	1884703a 	and	r2,r3,r2
 20076f0:	1001703a 	wrctl	status,r2
  
  return context;
 20076f4:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 20076f8:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 20076fc:	e0bffc17 	ldw	r2,-16(fp)
 2007700:	10800117 	ldw	r2,4(r2)
 2007704:	10c11014 	ori	r3,r2,1088
 2007708:	e0bffc17 	ldw	r2,-16(fp)
 200770c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2007710:	e0bffc17 	ldw	r2,-16(fp)
 2007714:	10800017 	ldw	r2,0(r2)
 2007718:	11000304 	addi	r4,r2,12
 200771c:	e0bffc17 	ldw	r2,-16(fp)
 2007720:	10800117 	ldw	r2,4(r2)
 2007724:	1007883a 	mov	r3,r2
 2007728:	2005883a 	mov	r2,r4
 200772c:	10c00035 	stwio	r3,0(r2)
 2007730:	e0bffb17 	ldw	r2,-20(fp)
 2007734:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2007738:	0005303a 	rdctl	r2,status
 200773c:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2007740:	e0fff617 	ldw	r3,-40(fp)
 2007744:	00bfff84 	movi	r2,-2
 2007748:	1884703a 	and	r2,r3,r2
 200774c:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2007750:	e0bff517 	ldw	r2,-44(fp)
 2007754:	10c0004c 	andi	r3,r2,1
 2007758:	e0bff617 	ldw	r2,-40(fp)
 200775c:	10c4b03a 	or	r2,r2,r3
 2007760:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
 2007764:	e0bff617 	ldw	r2,-40(fp)
 2007768:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 200776c:	e0bffc17 	ldw	r2,-16(fp)
 2007770:	10c00417 	ldw	r3,16(r2)
 2007774:	e0bff917 	ldw	r2,-28(fp)
 2007778:	18bffc26 	beq	r3,r2,200776c <altera_avalon_uart_write+0x10c>
      }
    }

    count--;
 200777c:	e0bff817 	ldw	r2,-32(fp)
 2007780:	10bfffc4 	addi	r2,r2,-1
 2007784:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 2007788:	e0bffc17 	ldw	r2,-16(fp)
 200778c:	10c00517 	ldw	r3,20(r2)
 2007790:	e0bffd17 	ldw	r2,-12(fp)
 2007794:	10800003 	ldbu	r2,0(r2)
 2007798:	1009883a 	mov	r4,r2
 200779c:	e0bffc17 	ldw	r2,-16(fp)
 20077a0:	1885883a 	add	r2,r3,r2
 20077a4:	10801704 	addi	r2,r2,92
 20077a8:	11000005 	stb	r4,0(r2)
 20077ac:	e0bffd17 	ldw	r2,-12(fp)
 20077b0:	10800044 	addi	r2,r2,1
 20077b4:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 20077b8:	e0fffc17 	ldw	r3,-16(fp)
 20077bc:	e0bff917 	ldw	r2,-28(fp)
 20077c0:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 20077c4:	e0bff817 	ldw	r2,-32(fp)
 20077c8:	1004c03a 	cmpne	r2,r2,zero
 20077cc:	103fb21e 	bne	r2,zero,2007698 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20077d0:	0005303a 	rdctl	r2,status
 20077d4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20077d8:	e0fff417 	ldw	r3,-48(fp)
 20077dc:	00bfff84 	movi	r2,-2
 20077e0:	1884703a 	and	r2,r3,r2
 20077e4:	1001703a 	wrctl	status,r2
  
  return context;
 20077e8:	e0bff417 	ldw	r2,-48(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 20077ec:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 20077f0:	e0bffc17 	ldw	r2,-16(fp)
 20077f4:	10800117 	ldw	r2,4(r2)
 20077f8:	10c11014 	ori	r3,r2,1088
 20077fc:	e0bffc17 	ldw	r2,-16(fp)
 2007800:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2007804:	e0bffc17 	ldw	r2,-16(fp)
 2007808:	10800017 	ldw	r2,0(r2)
 200780c:	11000304 	addi	r4,r2,12
 2007810:	e0bffc17 	ldw	r2,-16(fp)
 2007814:	10800117 	ldw	r2,4(r2)
 2007818:	1007883a 	mov	r3,r2
 200781c:	2005883a 	mov	r2,r4
 2007820:	10c00035 	stwio	r3,0(r2)
 2007824:	e0bffb17 	ldw	r2,-20(fp)
 2007828:	e0bff215 	stw	r2,-56(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 200782c:	0005303a 	rdctl	r2,status
 2007830:	e0bff315 	stw	r2,-52(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2007834:	e0fff317 	ldw	r3,-52(fp)
 2007838:	00bfff84 	movi	r2,-2
 200783c:	1884703a 	and	r2,r3,r2
 2007840:	e0bff315 	stw	r2,-52(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2007844:	e0bff217 	ldw	r2,-56(fp)
 2007848:	10c0004c 	andi	r3,r2,1
 200784c:	e0bff317 	ldw	r2,-52(fp)
 2007850:	10c4b03a 	or	r2,r2,r3
 2007854:	e0bff315 	stw	r2,-52(fp)
  
  NIOS2_WRITE_STATUS (status);
 2007858:	e0bff317 	ldw	r2,-52(fp)
 200785c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 2007860:	e0fffe17 	ldw	r3,-8(fp)
 2007864:	e0bff817 	ldw	r2,-32(fp)
 2007868:	1885c83a 	sub	r2,r3,r2
}
 200786c:	e037883a 	mov	sp,fp
 2007870:	dfc00117 	ldw	ra,4(sp)
 2007874:	df000017 	ldw	fp,0(sp)
 2007878:	dec00204 	addi	sp,sp,8
 200787c:	f800283a 	ret

02007880 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2007880:	defffd04 	addi	sp,sp,-12
 2007884:	dfc00215 	stw	ra,8(sp)
 2007888:	df000115 	stw	fp,4(sp)
 200788c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2007890:	00808074 	movhi	r2,513
 2007894:	10ad7204 	addi	r2,r2,-19000
 2007898:	10800017 	ldw	r2,0(r2)
 200789c:	1005003a 	cmpeq	r2,r2,zero
 20078a0:	1000061e 	bne	r2,zero,20078bc <alt_get_errno+0x3c>
 20078a4:	00808074 	movhi	r2,513
 20078a8:	10ad7204 	addi	r2,r2,-19000
 20078ac:	10800017 	ldw	r2,0(r2)
 20078b0:	103ee83a 	callr	r2
 20078b4:	e0bfff15 	stw	r2,-4(fp)
 20078b8:	00000306 	br	20078c8 <alt_get_errno+0x48>
 20078bc:	00808074 	movhi	r2,513
 20078c0:	10ad7f04 	addi	r2,r2,-18948
 20078c4:	e0bfff15 	stw	r2,-4(fp)
 20078c8:	e0bfff17 	ldw	r2,-4(fp)
}
 20078cc:	e037883a 	mov	sp,fp
 20078d0:	dfc00117 	ldw	ra,4(sp)
 20078d4:	df000017 	ldw	fp,0(sp)
 20078d8:	dec00204 	addi	sp,sp,8
 20078dc:	f800283a 	ret

020078e0 <VIC_0_VECTOR_TABLE>:

    .section .text, "xa"
    .align 2
    .globl VIC_0_VECTOR_TABLE
VIC_0_VECTOR_TABLE:
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 20078e0:	0030e03a 	nextpc	et
 20078e4:	20079601 	jmpi	2007960 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 20078f0:	0030e03a 	nextpc	et
 20078f4:	20079601 	jmpi	2007960 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2007900:	0030e03a 	nextpc	et
 2007904:	20079601 	jmpi	2007960 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2007910:	0030e03a 	nextpc	et
 2007914:	20079601 	jmpi	2007960 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2007920:	0030e03a 	nextpc	et
 2007924:	20079601 	jmpi	2007960 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2007930:	0030e03a 	nextpc	et
 2007934:	20079601 	jmpi	2007960 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2007940:	0030e03a 	nextpc	et
 2007944:	20079601 	jmpi	2007960 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2007950:	0030e03a 	nextpc	et
 2007954:	20079601 	jmpi	2007960 <alt_shadow_non_preemptive_interrupt>
	...

02007960 <alt_shadow_non_preemptive_interrupt>:
    .section ALTERA_VIC_DRIVER_LINKER_SECTION
    .set nobreak
    .globl alt_shadow_non_preemptive_interrupt
alt_shadow_non_preemptive_interrupt:

    ldw r16, 4(et)               /* load ISR pointer */
 2007960:	c4000117 	ldw	r16,4(et)

     /*
      * Get SP from previous register set.
      */

    rdprs sp, sp, 0
 2007964:	dec00038 	rdprs	sp,sp,0
  /*
   * Notify the operating system that we are at interrupt level.
   */
    ALT_OS_INT_ENTER_ASM

    ldw r4, 8(et)               /* load isr_context */
 2007968:	c1000217 	ldw	r4,8(et)
    callr r16                   /* call ISR */
 200796c:	803ee83a 	callr	r16
    /*
     * Notify the operating system that interrupt processing is complete.
     */
    ALT_OS_INT_EXIT_ASM

    addi ea, ea, -4             /* instruction that caused exception */
 2007970:	ef7fff04 	addi	ea,ea,-4
    eret
 2007974:	ef80083a 	eret

02007978 <alt_vic_irq_init>:
  * @API Type:              Internal
  * @param pdev             pointer of type alt_vic_dev, main Device Structure.
  * @return                 None
  */
void alt_vic_irq_init (alt_vic_dev* pdev)
{
 2007978:	defffd04 	addi	sp,sp,-12
 200797c:	df000215 	stw	fp,8(sp)
 2007980:	df000204 	addi	fp,sp,8
 2007984:	e13fff15 	stw	r4,-4(fp)
    alt_u32 i;
    static const int VEC_SIZE_ARRAY[]={4, 8, 16, 32, 64, 128, 256, 512};

    /* Stores the VIC instance to list */
    alt_vic_dev_list[pdev->intr_controller_id] = pdev;
 2007988:	e0bfff17 	ldw	r2,-4(fp)
 200798c:	10800117 	ldw	r2,4(r2)
 2007990:	1085883a 	add	r2,r2,r2
 2007994:	1087883a 	add	r3,r2,r2
 2007998:	d0a01204 	addi	r2,gp,-32696
 200799c:	1887883a 	add	r3,r3,r2
 20079a0:	e0bfff17 	ldw	r2,-4(fp)
 20079a4:	18800015 	stw	r2,0(r3)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);
 20079a8:	e0bfff17 	ldw	r2,-4(fp)
 20079ac:	10800017 	ldw	r2,0(r2)
 20079b0:	10802204 	addi	r2,r2,136
 20079b4:	1007883a 	mov	r3,r2
 20079b8:	00bfffc4 	movi	r2,-1
 20079bc:	18800035 	stwio	r2,0(r3)

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
 20079c0:	e03ffe15 	stw	zero,-8(fp)
 20079c4:	00001406 	br	2007a18 <alt_vic_irq_init+0xa0>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
 20079c8:	e0bfff17 	ldw	r2,-4(fp)
 20079cc:	10800017 	ldw	r2,0(r2)
 20079d0:	1007883a 	mov	r3,r2
 20079d4:	e0bffe17 	ldw	r2,-8(fp)
 20079d8:	1085883a 	add	r2,r2,r2
 20079dc:	1085883a 	add	r2,r2,r2
 20079e0:	1889883a 	add	r4,r3,r2
 20079e4:	e0bffe17 	ldw	r2,-8(fp)
 20079e8:	e0ffff17 	ldw	r3,-4(fp)
 20079ec:	1085883a 	add	r2,r2,r2
 20079f0:	1085883a 	add	r2,r2,r2
 20079f4:	10c5883a 	add	r2,r2,r3
 20079f8:	10800704 	addi	r2,r2,28
 20079fc:	10800017 	ldw	r2,0(r2)
 2007a00:	1007883a 	mov	r3,r2
 2007a04:	2005883a 	mov	r2,r4
 2007a08:	10c00035 	stwio	r3,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
 2007a0c:	e0bffe17 	ldw	r2,-8(fp)
 2007a10:	10800044 	addi	r2,r2,1
 2007a14:	e0bffe15 	stw	r2,-8(fp)
 2007a18:	e0bfff17 	ldw	r2,-4(fp)
 2007a1c:	10c00217 	ldw	r3,8(r2)
 2007a20:	e0bffe17 	ldw	r2,-8(fp)
 2007a24:	10ffe836 	bltu	r2,r3,20079c8 <alt_vic_irq_init+0x50>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
 2007a28:	e03ffe15 	stw	zero,-8(fp)
 2007a2c:	00001a06 	br	2007a98 <alt_vic_irq_init+0x120>
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
 2007a30:	e0bffe17 	ldw	r2,-8(fp)
 2007a34:	00c08074 	movhi	r3,513
 2007a38:	18e75404 	addi	r3,r3,-25264
 2007a3c:	1085883a 	add	r2,r2,r2
 2007a40:	1085883a 	add	r2,r2,r2
 2007a44:	10c5883a 	add	r2,r2,r3
 2007a48:	10800017 	ldw	r2,0(r2)
 2007a4c:	1007883a 	mov	r3,r2
 2007a50:	e0bfff17 	ldw	r2,-4(fp)
 2007a54:	10800517 	ldw	r2,20(r2)
 2007a58:	18800c1e 	bne	r3,r2,2007a8c <alt_vic_irq_init+0x114>
        {
            IOWR_ALTERA_VIC_CONFIG(pdev->base,
 2007a5c:	e0bfff17 	ldw	r2,-4(fp)
 2007a60:	10800017 	ldw	r2,0(r2)
 2007a64:	11002804 	addi	r4,r2,160
 2007a68:	e0bfff17 	ldw	r2,-4(fp)
 2007a6c:	10800417 	ldw	r2,16(r2)
 2007a70:	100690fa 	slli	r3,r2,3
 2007a74:	e0bffe17 	ldw	r2,-8(fp)
 2007a78:	1884b03a 	or	r2,r3,r2
 2007a7c:	1007883a 	mov	r3,r2
 2007a80:	2005883a 	mov	r2,r4
 2007a84:	10c00035 	stwio	r3,0(r2)
                (i | (pdev->daisy_chain_present << ALTERA_VIC_CONFIG_DC_OFST)));
            break;
 2007a88:	00000606 	br	2007aa4 <alt_vic_irq_init+0x12c>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
 2007a8c:	e0bffe17 	ldw	r2,-8(fp)
 2007a90:	10800044 	addi	r2,r2,1
 2007a94:	e0bffe15 	stw	r2,-8(fp)
 2007a98:	e0bffe17 	ldw	r2,-8(fp)
 2007a9c:	10800230 	cmpltui	r2,r2,8
 2007aa0:	103fe31e 	bne	r2,zero,2007a30 <alt_vic_irq_init+0xb8>
            break;
        }
    }

    /* Set vector table base address */
    IOWR_ALTERA_VIC_VEC_TBL_BASE(pdev->base,((alt_u32)pdev->vec_addr));
 2007aa4:	e0bfff17 	ldw	r2,-4(fp)
 2007aa8:	10800017 	ldw	r2,0(r2)
 2007aac:	11002a04 	addi	r4,r2,168
 2007ab0:	e0bfff17 	ldw	r2,-4(fp)
 2007ab4:	10800617 	ldw	r2,24(r2)
 2007ab8:	1007883a 	mov	r3,r2
 2007abc:	2005883a 	mov	r2,r4
 2007ac0:	10c00035 	stwio	r3,0(r2)
}
 2007ac4:	e037883a 	mov	sp,fp
 2007ac8:	df000017 	ldw	fp,0(sp)
 2007acc:	dec00104 	addi	sp,sp,4
 2007ad0:	f800283a 	ret

02007ad4 <alt_ic_isr_register>:
int alt_ic_isr_register(alt_u32 ic_id,
                        alt_u32 irq,
                        alt_isr_func isr,
                        void *isr_context,
                        void* flags)
{
 2007ad4:	defff404 	addi	sp,sp,-48
 2007ad8:	df000b15 	stw	fp,44(sp)
 2007adc:	df000b04 	addi	fp,sp,44
 2007ae0:	e13ffb15 	stw	r4,-20(fp)
 2007ae4:	e17ffc15 	stw	r5,-16(fp)
 2007ae8:	e1bffd15 	stw	r6,-12(fp)
 2007aec:	e1fffe15 	stw	r7,-8(fp)
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
 2007af0:	e0bffb17 	ldw	r2,-20(fp)
 2007af4:	1005003a 	cmpeq	r2,r2,zero
 2007af8:	1000031e 	bne	r2,zero,2007b08 <alt_ic_isr_register+0x34>
        return -1;
 2007afc:	00bfffc4 	movi	r2,-1
 2007b00:	e0bfff15 	stw	r2,-4(fp)
 2007b04:	00004b06 	br	2007c34 <alt_ic_isr_register+0x160>

    /* Get VIC handle */
    pdev = alt_vic_dev_list[ic_id];
 2007b08:	e0bffb17 	ldw	r2,-20(fp)
 2007b0c:	00c08074 	movhi	r3,513
 2007b10:	18ed7c04 	addi	r3,r3,-18960
 2007b14:	1085883a 	add	r2,r2,r2
 2007b18:	1085883a 	add	r2,r2,r2
 2007b1c:	10c5883a 	add	r2,r2,r3
 2007b20:	10800017 	ldw	r2,0(r2)
 2007b24:	e0bffa15 	stw	r2,-24(fp)

    if(irq < pdev->num_of_intr_ports)
 2007b28:	e0bffa17 	ldw	r2,-24(fp)
 2007b2c:	10c00217 	ldw	r3,8(r2)
 2007b30:	e0bffc17 	ldw	r2,-16(fp)
 2007b34:	10c03d2e 	bgeu	r2,r3,2007c2c <alt_ic_isr_register+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007b38:	0005303a 	rdctl	r2,status
 2007b3c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007b40:	e0fff717 	ldw	r3,-36(fp)
 2007b44:	00bfff84 	movi	r2,-2
 2007b48:	1884703a 	and	r2,r3,r2
 2007b4c:	1001703a 	wrctl	status,r2
  
  return context;
 2007b50:	e0bff717 	ldw	r2,-36(fp)
    {
        /* Disable all interrupts */
        status = alt_irq_disable_all ();
 2007b54:	e0bff815 	stw	r2,-32(fp)

        /* Get table offset */
        offset = pdev->vec_addr + (irq * pdev->vec_size);
 2007b58:	e0bffa17 	ldw	r2,-24(fp)
 2007b5c:	11000617 	ldw	r4,24(r2)
 2007b60:	e0bffa17 	ldw	r2,-24(fp)
 2007b64:	10c00517 	ldw	r3,20(r2)
 2007b68:	e0bffc17 	ldw	r2,-16(fp)
 2007b6c:	1885383a 	mul	r2,r3,r2
 2007b70:	2085883a 	add	r2,r4,r2
 2007b74:	e0bff915 	stw	r2,-28(fp)

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
 2007b78:	e0bff917 	ldw	r2,-28(fp)
 2007b7c:	10c00204 	addi	r3,r2,8
 2007b80:	e0bffd17 	ldw	r2,-12(fp)
 2007b84:	18800015 	stw	r2,0(r3)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);
 2007b88:	e0bff917 	ldw	r2,-28(fp)
 2007b8c:	10c00304 	addi	r3,r2,12
 2007b90:	e0bffe17 	ldw	r2,-8(fp)
 2007b94:	18800015 	stw	r2,0(r3)

        if(isr)
 2007b98:	e0bffd17 	ldw	r2,-12(fp)
 2007b9c:	1005003a 	cmpeq	r2,r2,zero
 2007ba0:	1000091e 	bne	r2,zero,2007bc8 <alt_ic_isr_register+0xf4>
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
 2007ba4:	e0bffa17 	ldw	r2,-24(fp)
 2007ba8:	10800017 	ldw	r2,0(r2)
 2007bac:	11002104 	addi	r4,r2,132
 2007bb0:	e0fffc17 	ldw	r3,-16(fp)
 2007bb4:	00800044 	movi	r2,1
 2007bb8:	10c6983a 	sll	r3,r2,r3
 2007bbc:	2005883a 	mov	r2,r4
 2007bc0:	10c00035 	stwio	r3,0(r2)
 2007bc4:	00000806 	br	2007be8 <alt_ic_isr_register+0x114>
        }
        else
        {
            /* Disable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 1 << irq);
 2007bc8:	e0bffa17 	ldw	r2,-24(fp)
 2007bcc:	10800017 	ldw	r2,0(r2)
 2007bd0:	11002204 	addi	r4,r2,136
 2007bd4:	e0fffc17 	ldw	r3,-16(fp)
 2007bd8:	00800044 	movi	r2,1
 2007bdc:	10c6983a 	sll	r3,r2,r3
 2007be0:	2005883a 	mov	r2,r4
 2007be4:	10c00035 	stwio	r3,0(r2)
 2007be8:	e0bff817 	ldw	r2,-32(fp)
 2007bec:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2007bf0:	0005303a 	rdctl	r2,status
 2007bf4:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2007bf8:	e0fff617 	ldw	r3,-40(fp)
 2007bfc:	00bfff84 	movi	r2,-2
 2007c00:	1884703a 	and	r2,r3,r2
 2007c04:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2007c08:	e0bff517 	ldw	r2,-44(fp)
 2007c0c:	10c0004c 	andi	r3,r2,1
 2007c10:	e0bff617 	ldw	r2,-40(fp)
 2007c14:	10c4b03a 	or	r2,r2,r3
 2007c18:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
 2007c1c:	e0bff617 	ldw	r2,-40(fp)
 2007c20:	1001703a 	wrctl	status,r2
        }

        /* Re-enable all interrupts */
        alt_irq_enable_all(status);

        return 0;
 2007c24:	e03fff15 	stw	zero,-4(fp)
 2007c28:	00000206 	br	2007c34 <alt_ic_isr_register+0x160>
    }

    return -1;
 2007c2c:	00bfffc4 	movi	r2,-1
 2007c30:	e0bfff15 	stw	r2,-4(fp)
 2007c34:	e0bfff17 	ldw	r2,-4(fp)
}
 2007c38:	e037883a 	mov	sp,fp
 2007c3c:	df000017 	ldw	fp,0(sp)
 2007c40:	dec00104 	addi	sp,sp,4
 2007c44:	f800283a 	ret

02007c48 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2007c48:	defff904 	addi	sp,sp,-28
 2007c4c:	dfc00615 	stw	ra,24(sp)
 2007c50:	df000515 	stw	fp,20(sp)
 2007c54:	df000504 	addi	fp,sp,20
 2007c58:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2007c5c:	00800144 	movi	r2,5
 2007c60:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2007c64:	00800044 	movi	r2,1
 2007c68:	d8800015 	stw	r2,0(sp)
 2007c6c:	e0bffe44 	addi	r2,fp,-7
 2007c70:	d8800115 	stw	r2,4(sp)
 2007c74:	d8000215 	stw	zero,8(sp)
 2007c78:	e13fff17 	ldw	r4,-4(fp)
 2007c7c:	000b883a 	mov	r5,zero
 2007c80:	01800044 	movi	r6,1
 2007c84:	e1fffe04 	addi	r7,fp,-8
 2007c88:	2008c8c0 	call	2008c8c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2007c8c:	e0bffe43 	ldbu	r2,-7(fp)
 2007c90:	10803fcc 	andi	r2,r2,255
}
 2007c94:	e037883a 	mov	sp,fp
 2007c98:	dfc00117 	ldw	ra,4(sp)
 2007c9c:	df000017 	ldw	fp,0(sp)
 2007ca0:	dec00204 	addi	sp,sp,8
 2007ca4:	f800283a 	ret

02007ca8 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset)
{
 2007ca8:	defff804 	addi	sp,sp,-32
 2007cac:	dfc00715 	stw	ra,28(sp)
 2007cb0:	df000615 	stw	fp,24(sp)
 2007cb4:	df000604 	addi	fp,sp,24
 2007cb8:	e13ffe15 	stw	r4,-8(fp)
 2007cbc:	e17fff15 	stw	r5,-4(fp)
  alt_u8 se[4];
  
  se[0] = epcs_se;
 2007cc0:	00bff604 	movi	r2,-40
 2007cc4:	e0bffd05 	stb	r2,-12(fp)
  se[1] = (offset >> 16) & 0xFF;
 2007cc8:	e0bfff17 	ldw	r2,-4(fp)
 2007ccc:	1004d43a 	srli	r2,r2,16
 2007cd0:	e0bffd45 	stb	r2,-11(fp)
  se[2] = (offset >> 8) & 0xFF;
 2007cd4:	e0bfff17 	ldw	r2,-4(fp)
 2007cd8:	1004d23a 	srli	r2,r2,8
 2007cdc:	e0bffd85 	stb	r2,-10(fp)
  se[3] = offset & 0xFF;
 2007ce0:	e0bfff17 	ldw	r2,-4(fp)
 2007ce4:	e0bffdc5 	stb	r2,-9(fp)

  alt_avalon_spi_command(
 2007ce8:	d8000015 	stw	zero,0(sp)
 2007cec:	d8000115 	stw	zero,4(sp)
 2007cf0:	d8000215 	stw	zero,8(sp)
 2007cf4:	e13ffe17 	ldw	r4,-8(fp)
 2007cf8:	000b883a 	mov	r5,zero
 2007cfc:	01800104 	movi	r6,4
 2007d00:	e1fffd04 	addi	r7,fp,-12
 2007d04:	2008c8c0 	call	2008c8c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2007d08:	e13ffe17 	ldw	r4,-8(fp)
 2007d0c:	2007d240 	call	2007d24 <epcs_await_wip_released>
}
 2007d10:	e037883a 	mov	sp,fp
 2007d14:	dfc00117 	ldw	ra,4(sp)
 2007d18:	df000017 	ldw	fp,0(sp)
 2007d1c:	dec00204 	addi	sp,sp,8
 2007d20:	f800283a 	ret

02007d24 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2007d24:	defffd04 	addi	sp,sp,-12
 2007d28:	dfc00215 	stw	ra,8(sp)
 2007d2c:	df000115 	stw	fp,4(sp)
 2007d30:	df000104 	addi	fp,sp,4
 2007d34:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2007d38:	e13fff17 	ldw	r4,-4(fp)
 2007d3c:	2007d5c0 	call	2007d5c <epcs_test_wip>
 2007d40:	1004c03a 	cmpne	r2,r2,zero
 2007d44:	103ffc1e 	bne	r2,zero,2007d38 <epcs_await_wip_released+0x14>
  {
  }
}
 2007d48:	e037883a 	mov	sp,fp
 2007d4c:	dfc00117 	ldw	ra,4(sp)
 2007d50:	df000017 	ldw	fp,0(sp)
 2007d54:	dec00204 	addi	sp,sp,8
 2007d58:	f800283a 	ret

02007d5c <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2007d5c:	defffd04 	addi	sp,sp,-12
 2007d60:	dfc00215 	stw	ra,8(sp)
 2007d64:	df000115 	stw	fp,4(sp)
 2007d68:	df000104 	addi	fp,sp,4
 2007d6c:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2007d70:	e13fff17 	ldw	r4,-4(fp)
 2007d74:	2007c480 	call	2007c48 <epcs_read_status_register>
 2007d78:	10803fcc 	andi	r2,r2,255
 2007d7c:	1080004c 	andi	r2,r2,1
}
 2007d80:	e037883a 	mov	sp,fp
 2007d84:	dfc00117 	ldw	ra,4(sp)
 2007d88:	df000017 	ldw	fp,0(sp)
 2007d8c:	dec00204 	addi	sp,sp,8
 2007d90:	f800283a 	ret

02007d94 <epcs_read_buffer>:

  epcs_await_wip_released(base);
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length)
{
 2007d94:	defff604 	addi	sp,sp,-40
 2007d98:	dfc00915 	stw	ra,36(sp)
 2007d9c:	df000815 	stw	fp,32(sp)
 2007da0:	df000804 	addi	fp,sp,32
 2007da4:	e13ffc15 	stw	r4,-16(fp)
 2007da8:	e17ffd15 	stw	r5,-12(fp)
 2007dac:	e1bffe15 	stw	r6,-8(fp)
 2007db0:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[4];
  
  read_command[0] = epcs_read;
 2007db4:	008000c4 	movi	r2,3
 2007db8:	e0bffb05 	stb	r2,-20(fp)
  read_command[1] = (offset >> 16) & 0xFF;
 2007dbc:	e0bffd17 	ldw	r2,-12(fp)
 2007dc0:	1005d43a 	srai	r2,r2,16
 2007dc4:	1007883a 	mov	r3,r2
 2007dc8:	00bfffc4 	movi	r2,-1
 2007dcc:	1884703a 	and	r2,r3,r2
 2007dd0:	e0bffb45 	stb	r2,-19(fp)
  read_command[2] = (offset >> 8) & 0xFF;
 2007dd4:	e0bffd17 	ldw	r2,-12(fp)
 2007dd8:	1005d23a 	srai	r2,r2,8
 2007ddc:	1007883a 	mov	r3,r2
 2007de0:	00bfffc4 	movi	r2,-1
 2007de4:	1884703a 	and	r2,r3,r2
 2007de8:	e0bffb85 	stb	r2,-18(fp)
  read_command[3] = offset & 0xFF;
 2007dec:	e0bffd17 	ldw	r2,-12(fp)
 2007df0:	1007883a 	mov	r3,r2
 2007df4:	00bfffc4 	movi	r2,-1
 2007df8:	1884703a 	and	r2,r3,r2
 2007dfc:	e0bffbc5 	stb	r2,-17(fp)
    return 0;
#endif
  /* I don't know why this is necessary, since I call await-wip after
   * all writing commands.
  */
  epcs_await_wip_released(base);
 2007e00:	e13ffc17 	ldw	r4,-16(fp)
 2007e04:	2007d240 	call	2007d24 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2007e08:	e0bfff17 	ldw	r2,-4(fp)
 2007e0c:	d8800015 	stw	r2,0(sp)
 2007e10:	e0bffe17 	ldw	r2,-8(fp)
 2007e14:	d8800115 	stw	r2,4(sp)
 2007e18:	d8000215 	stw	zero,8(sp)
 2007e1c:	e13ffc17 	ldw	r4,-16(fp)
 2007e20:	000b883a 	mov	r5,zero
 2007e24:	01800104 	movi	r6,4
 2007e28:	e1fffb04 	addi	r7,fp,-20
 2007e2c:	2008c8c0 	call	2008c8c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  return length;
 2007e30:	e0bfff17 	ldw	r2,-4(fp)
}
 2007e34:	e037883a 	mov	sp,fp
 2007e38:	dfc00117 	ldw	ra,4(sp)
 2007e3c:	df000017 	ldw	fp,0(sp)
 2007e40:	dec00204 	addi	sp,sp,8
 2007e44:	f800283a 	ret

02007e48 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2007e48:	defff904 	addi	sp,sp,-28
 2007e4c:	dfc00615 	stw	ra,24(sp)
 2007e50:	df000515 	stw	fp,20(sp)
 2007e54:	df000504 	addi	fp,sp,20
 2007e58:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2007e5c:	00800184 	movi	r2,6
 2007e60:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2007e64:	d8000015 	stw	zero,0(sp)
 2007e68:	d8000115 	stw	zero,4(sp)
 2007e6c:	d8000215 	stw	zero,8(sp)
 2007e70:	e13fff17 	ldw	r4,-4(fp)
 2007e74:	000b883a 	mov	r5,zero
 2007e78:	01800044 	movi	r6,1
 2007e7c:	e1fffe04 	addi	r7,fp,-8
 2007e80:	2008c8c0 	call	2008c8c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2007e84:	e037883a 	mov	sp,fp
 2007e88:	dfc00117 	ldw	ra,4(sp)
 2007e8c:	df000017 	ldw	fp,0(sp)
 2007e90:	dec00204 	addi	sp,sp,8
 2007e94:	f800283a 	ret

02007e98 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2007e98:	defff804 	addi	sp,sp,-32
 2007e9c:	dfc00715 	stw	ra,28(sp)
 2007ea0:	df000615 	stw	fp,24(sp)
 2007ea4:	df000604 	addi	fp,sp,24
 2007ea8:	e13ffe15 	stw	r4,-8(fp)
 2007eac:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2007eb0:	00800044 	movi	r2,1
 2007eb4:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2007eb8:	e0bfff03 	ldbu	r2,-4(fp)
 2007ebc:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2007ec0:	d8000015 	stw	zero,0(sp)
 2007ec4:	d8000115 	stw	zero,4(sp)
 2007ec8:	d8000215 	stw	zero,8(sp)
 2007ecc:	e13ffe17 	ldw	r4,-8(fp)
 2007ed0:	000b883a 	mov	r5,zero
 2007ed4:	01800084 	movi	r6,2
 2007ed8:	e1fffd04 	addi	r7,fp,-12
 2007edc:	2008c8c0 	call	2008c8c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2007ee0:	e13ffe17 	ldw	r4,-8(fp)
 2007ee4:	2007d240 	call	2007d24 <epcs_await_wip_released>
}
 2007ee8:	e037883a 	mov	sp,fp
 2007eec:	dfc00117 	ldw	ra,4(sp)
 2007ef0:	df000017 	ldw	fp,0(sp)
 2007ef4:	dec00204 	addi	sp,sp,8
 2007ef8:	f800283a 	ret

02007efc <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, int length)
{
 2007efc:	defff604 	addi	sp,sp,-40
 2007f00:	dfc00915 	stw	ra,36(sp)
 2007f04:	df000815 	stw	fp,32(sp)
 2007f08:	df000804 	addi	fp,sp,32
 2007f0c:	e13ffc15 	stw	r4,-16(fp)
 2007f10:	e17ffd15 	stw	r5,-12(fp)
 2007f14:	e1bffe15 	stw	r6,-8(fp)
 2007f18:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[4];
  
  pp[0] = epcs_pp;
 2007f1c:	00800084 	movi	r2,2
 2007f20:	e0bffb05 	stb	r2,-20(fp)
  pp[1] = (offset >> 16) & 0xFF;
 2007f24:	e0bffd17 	ldw	r2,-12(fp)
 2007f28:	1005d43a 	srai	r2,r2,16
 2007f2c:	1007883a 	mov	r3,r2
 2007f30:	00bfffc4 	movi	r2,-1
 2007f34:	1884703a 	and	r2,r3,r2
 2007f38:	e0bffb45 	stb	r2,-19(fp)
  pp[2] = (offset >> 8) & 0xFF;
 2007f3c:	e0bffd17 	ldw	r2,-12(fp)
 2007f40:	1005d23a 	srai	r2,r2,8
 2007f44:	1007883a 	mov	r3,r2
 2007f48:	00bfffc4 	movi	r2,-1
 2007f4c:	1884703a 	and	r2,r3,r2
 2007f50:	e0bffb85 	stb	r2,-18(fp)
  pp[3] = offset & 0xFF;
 2007f54:	e0bffd17 	ldw	r2,-12(fp)
 2007f58:	1007883a 	mov	r3,r2
 2007f5c:	00bfffc4 	movi	r2,-1
 2007f60:	1884703a 	and	r2,r3,r2
 2007f64:	e0bffbc5 	stb	r2,-17(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2007f68:	e13ffc17 	ldw	r4,-16(fp)
 2007f6c:	2007e480 	call	2007e48 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 2007f70:	d8000015 	stw	zero,0(sp)
 2007f74:	d8000115 	stw	zero,4(sp)
 2007f78:	00800044 	movi	r2,1
 2007f7c:	d8800215 	stw	r2,8(sp)
 2007f80:	e13ffc17 	ldw	r4,-16(fp)
 2007f84:	000b883a 	mov	r5,zero
 2007f88:	01800104 	movi	r6,4
 2007f8c:	e1fffb04 	addi	r7,fp,-20
 2007f90:	2008c8c0 	call	2008c8c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2007f94:	e1bfff17 	ldw	r6,-4(fp)
 2007f98:	d8000015 	stw	zero,0(sp)
 2007f9c:	d8000115 	stw	zero,4(sp)
 2007fa0:	d8000215 	stw	zero,8(sp)
 2007fa4:	e13ffc17 	ldw	r4,-16(fp)
 2007fa8:	000b883a 	mov	r5,zero
 2007fac:	e1fffe17 	ldw	r7,-8(fp)
 2007fb0:	2008c8c0 	call	2008c8c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2007fb4:	e13ffc17 	ldw	r4,-16(fp)
 2007fb8:	2007d240 	call	2007d24 <epcs_await_wip_released>

  return length;
 2007fbc:	e0bfff17 	ldw	r2,-4(fp)
}
 2007fc0:	e037883a 	mov	sp,fp
 2007fc4:	dfc00117 	ldw	ra,4(sp)
 2007fc8:	df000017 	ldw	fp,0(sp)
 2007fcc:	dec00204 	addi	sp,sp,8
 2007fd0:	f800283a 	ret

02007fd4 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2007fd4:	defff804 	addi	sp,sp,-32
 2007fd8:	dfc00715 	stw	ra,28(sp)
 2007fdc:	df000615 	stw	fp,24(sp)
 2007fe0:	df000604 	addi	fp,sp,24
 2007fe4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2007fe8:	00bfeac4 	movi	r2,-85
 2007fec:	e0bffd05 	stb	r2,-12(fp)
 2007ff0:	e03ffd45 	stb	zero,-11(fp)
 2007ff4:	e03ffd85 	stb	zero,-10(fp)
 2007ff8:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2007ffc:	00800044 	movi	r2,1
 2008000:	d8800015 	stw	r2,0(sp)
 2008004:	e0bffe04 	addi	r2,fp,-8
 2008008:	d8800115 	stw	r2,4(sp)
 200800c:	d8000215 	stw	zero,8(sp)
 2008010:	e13fff17 	ldw	r4,-4(fp)
 2008014:	000b883a 	mov	r5,zero
 2008018:	01800104 	movi	r6,4
 200801c:	e1fffd04 	addi	r7,fp,-12
 2008020:	2008c8c0 	call	2008c8c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2008024:	e0bffe03 	ldbu	r2,-8(fp)
 2008028:	10803fcc 	andi	r2,r2,255
}
 200802c:	e037883a 	mov	sp,fp
 2008030:	dfc00117 	ldw	ra,4(sp)
 2008034:	df000017 	ldw	fp,0(sp)
 2008038:	dec00204 	addi	sp,sp,8
 200803c:	f800283a 	ret

02008040 <epcs_read_device_id>:

alt_u8 epcs_read_device_id(alt_u32 base)
{
 2008040:	defff904 	addi	sp,sp,-28
 2008044:	dfc00615 	stw	ra,24(sp)
 2008048:	df000515 	stw	fp,20(sp)
 200804c:	df000504 	addi	fp,sp,20
 2008050:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid, 0, 0};
 2008054:	00bfe7c4 	movi	r2,-97
 2008058:	e0bffe05 	stb	r2,-8(fp)
 200805c:	e03ffe45 	stb	zero,-7(fp)
 2008060:	e03ffe85 	stb	zero,-6(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2008064:	00800044 	movi	r2,1
 2008068:	d8800015 	stw	r2,0(sp)
 200806c:	e0bffec4 	addi	r2,fp,-5
 2008070:	d8800115 	stw	r2,4(sp)
 2008074:	d8000215 	stw	zero,8(sp)
 2008078:	e13fff17 	ldw	r4,-4(fp)
 200807c:	000b883a 	mov	r5,zero
 2008080:	018000c4 	movi	r6,3
 2008084:	e1fffe04 	addi	r7,fp,-8
 2008088:	2008c8c0 	call	2008c8c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 200808c:	e0bffec3 	ldbu	r2,-5(fp)
 2008090:	10803fcc 	andi	r2,r2,255
}
 2008094:	e037883a 	mov	sp,fp
 2008098:	dfc00117 	ldw	ra,4(sp)
 200809c:	df000017 	ldw	fp,0(sp)
 20080a0:	dec00204 	addi	sp,sp,8
 20080a4:	f800283a 	ret

020080a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20080a8:	defff304 	addi	sp,sp,-52
 20080ac:	df000c15 	stw	fp,48(sp)
 20080b0:	df000c04 	addi	fp,sp,48
 20080b4:	e13ffb15 	stw	r4,-20(fp)
 20080b8:	e17ffc15 	stw	r5,-16(fp)
 20080bc:	e1bffd15 	stw	r6,-12(fp)
 20080c0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20080c4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20080c8:	00808074 	movhi	r2,513
 20080cc:	10ad7d04 	addi	r2,r2,-18956
 20080d0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 20080d4:	1005003a 	cmpeq	r2,r2,zero
 20080d8:	10004c1e 	bne	r2,zero,200820c <alt_alarm_start+0x164>
  {
    if (alarm)
 20080dc:	e0bffb17 	ldw	r2,-20(fp)
 20080e0:	1005003a 	cmpeq	r2,r2,zero
 20080e4:	1000461e 	bne	r2,zero,2008200 <alt_alarm_start+0x158>
    {
      alarm->callback = callback;
 20080e8:	e0fffb17 	ldw	r3,-20(fp)
 20080ec:	e0bffd17 	ldw	r2,-12(fp)
 20080f0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 20080f4:	e0fffb17 	ldw	r3,-20(fp)
 20080f8:	e0bffe17 	ldw	r2,-8(fp)
 20080fc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008100:	0005303a 	rdctl	r2,status
 2008104:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008108:	e0fff817 	ldw	r3,-32(fp)
 200810c:	00bfff84 	movi	r2,-2
 2008110:	1884703a 	and	r2,r3,r2
 2008114:	1001703a 	wrctl	status,r2
  
  return context;
 2008118:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 200811c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2008120:	00808074 	movhi	r2,513
 2008124:	10ad7e04 	addi	r2,r2,-18952
 2008128:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 200812c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2008130:	e0fffc17 	ldw	r3,-16(fp)
 2008134:	e0bff917 	ldw	r2,-28(fp)
 2008138:	1885883a 	add	r2,r3,r2
 200813c:	10c00044 	addi	r3,r2,1
 2008140:	e0bffb17 	ldw	r2,-20(fp)
 2008144:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2008148:	e0bffb17 	ldw	r2,-20(fp)
 200814c:	10c00217 	ldw	r3,8(r2)
 2008150:	e0bff917 	ldw	r2,-28(fp)
 2008154:	1880042e 	bgeu	r3,r2,2008168 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 2008158:	e0fffb17 	ldw	r3,-20(fp)
 200815c:	00800044 	movi	r2,1
 2008160:	18800405 	stb	r2,16(r3)
 2008164:	00000206 	br	2008170 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 2008168:	e0bffb17 	ldw	r2,-20(fp)
 200816c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2008170:	e0fffb17 	ldw	r3,-20(fp)
 2008174:	00808074 	movhi	r2,513
 2008178:	10ad7504 	addi	r2,r2,-18988
 200817c:	e0bff615 	stw	r2,-40(fp)
 2008180:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2008184:	e0fff717 	ldw	r3,-36(fp)
 2008188:	e0bff617 	ldw	r2,-40(fp)
 200818c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2008190:	e0bff617 	ldw	r2,-40(fp)
 2008194:	10c00017 	ldw	r3,0(r2)
 2008198:	e0bff717 	ldw	r2,-36(fp)
 200819c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20081a0:	e0bff617 	ldw	r2,-40(fp)
 20081a4:	10c00017 	ldw	r3,0(r2)
 20081a8:	e0bff717 	ldw	r2,-36(fp)
 20081ac:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 20081b0:	e0fff617 	ldw	r3,-40(fp)
 20081b4:	e0bff717 	ldw	r2,-36(fp)
 20081b8:	18800015 	stw	r2,0(r3)
 20081bc:	e0bffa17 	ldw	r2,-24(fp)
 20081c0:	e0bff415 	stw	r2,-48(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 20081c4:	0005303a 	rdctl	r2,status
 20081c8:	e0bff515 	stw	r2,-44(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 20081cc:	e0fff517 	ldw	r3,-44(fp)
 20081d0:	00bfff84 	movi	r2,-2
 20081d4:	1884703a 	and	r2,r3,r2
 20081d8:	e0bff515 	stw	r2,-44(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 20081dc:	e0bff417 	ldw	r2,-48(fp)
 20081e0:	10c0004c 	andi	r3,r2,1
 20081e4:	e0bff517 	ldw	r2,-44(fp)
 20081e8:	10c4b03a 	or	r2,r2,r3
 20081ec:	e0bff515 	stw	r2,-44(fp)
  
  NIOS2_WRITE_STATUS (status);
 20081f0:	e0bff517 	ldw	r2,-44(fp)
 20081f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20081f8:	e03fff15 	stw	zero,-4(fp)
 20081fc:	00000506 	br	2008214 <alt_alarm_start+0x16c>
    }
    else
    {
      return -EINVAL;
 2008200:	00bffa84 	movi	r2,-22
 2008204:	e0bfff15 	stw	r2,-4(fp)
 2008208:	00000206 	br	2008214 <alt_alarm_start+0x16c>
    }
  }
  else
  {
    return -ENOTSUP;
 200820c:	00bfde84 	movi	r2,-134
 2008210:	e0bfff15 	stw	r2,-4(fp)
 2008214:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 2008218:	e037883a 	mov	sp,fp
 200821c:	df000017 	ldw	fp,0(sp)
 2008220:	dec00104 	addi	sp,sp,4
 2008224:	f800283a 	ret

02008228 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2008228:	defff804 	addi	sp,sp,-32
 200822c:	dfc00715 	stw	ra,28(sp)
 2008230:	df000615 	stw	fp,24(sp)
 2008234:	df000604 	addi	fp,sp,24
 2008238:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200823c:	e0bffc17 	ldw	r2,-16(fp)
 2008240:	1004803a 	cmplt	r2,r2,zero
 2008244:	1000081e 	bne	r2,zero,2008268 <close+0x40>
 2008248:	e0bffc17 	ldw	r2,-16(fp)
 200824c:	10800324 	muli	r2,r2,12
 2008250:	1007883a 	mov	r3,r2
 2008254:	00808074 	movhi	r2,513
 2008258:	10ad0a04 	addi	r2,r2,-19416
 200825c:	1887883a 	add	r3,r3,r2
 2008260:	e0ffff15 	stw	r3,-4(fp)
 2008264:	00000106 	br	200826c <close+0x44>
 2008268:	e03fff15 	stw	zero,-4(fp)
 200826c:	e0bfff17 	ldw	r2,-4(fp)
 2008270:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2008274:	e0bffb17 	ldw	r2,-20(fp)
 2008278:	1005003a 	cmpeq	r2,r2,zero
 200827c:	10001d1e 	bne	r2,zero,20082f4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2008280:	e0bffb17 	ldw	r2,-20(fp)
 2008284:	10800017 	ldw	r2,0(r2)
 2008288:	10800417 	ldw	r2,16(r2)
 200828c:	1005003a 	cmpeq	r2,r2,zero
 2008290:	1000071e 	bne	r2,zero,20082b0 <close+0x88>
 2008294:	e0bffb17 	ldw	r2,-20(fp)
 2008298:	10800017 	ldw	r2,0(r2)
 200829c:	10800417 	ldw	r2,16(r2)
 20082a0:	e13ffb17 	ldw	r4,-20(fp)
 20082a4:	103ee83a 	callr	r2
 20082a8:	e0bffe15 	stw	r2,-8(fp)
 20082ac:	00000106 	br	20082b4 <close+0x8c>
 20082b0:	e03ffe15 	stw	zero,-8(fp)
 20082b4:	e0bffe17 	ldw	r2,-8(fp)
 20082b8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20082bc:	e13ffc17 	ldw	r4,-16(fp)
 20082c0:	2008a5c0 	call	2008a5c <alt_release_fd>
    if (rval < 0)
 20082c4:	e0bffa17 	ldw	r2,-24(fp)
 20082c8:	1004403a 	cmpge	r2,r2,zero
 20082cc:	1000071e 	bne	r2,zero,20082ec <close+0xc4>
    {
      ALT_ERRNO = -rval;
 20082d0:	20083240 	call	2008324 <alt_get_errno>
 20082d4:	e0fffa17 	ldw	r3,-24(fp)
 20082d8:	00c7c83a 	sub	r3,zero,r3
 20082dc:	10c00015 	stw	r3,0(r2)
      return -1;
 20082e0:	00bfffc4 	movi	r2,-1
 20082e4:	e0bffd15 	stw	r2,-12(fp)
 20082e8:	00000806 	br	200830c <close+0xe4>
    }
    return 0;
 20082ec:	e03ffd15 	stw	zero,-12(fp)
 20082f0:	00000606 	br	200830c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20082f4:	20083240 	call	2008324 <alt_get_errno>
 20082f8:	1007883a 	mov	r3,r2
 20082fc:	00801444 	movi	r2,81
 2008300:	18800015 	stw	r2,0(r3)
    return -1;
 2008304:	00bfffc4 	movi	r2,-1
 2008308:	e0bffd15 	stw	r2,-12(fp)
 200830c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 2008310:	e037883a 	mov	sp,fp
 2008314:	dfc00117 	ldw	ra,4(sp)
 2008318:	df000017 	ldw	fp,0(sp)
 200831c:	dec00204 	addi	sp,sp,8
 2008320:	f800283a 	ret

02008324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2008324:	defffd04 	addi	sp,sp,-12
 2008328:	dfc00215 	stw	ra,8(sp)
 200832c:	df000115 	stw	fp,4(sp)
 2008330:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2008334:	00808074 	movhi	r2,513
 2008338:	10ad7204 	addi	r2,r2,-19000
 200833c:	10800017 	ldw	r2,0(r2)
 2008340:	1005003a 	cmpeq	r2,r2,zero
 2008344:	1000061e 	bne	r2,zero,2008360 <alt_get_errno+0x3c>
 2008348:	00808074 	movhi	r2,513
 200834c:	10ad7204 	addi	r2,r2,-19000
 2008350:	10800017 	ldw	r2,0(r2)
 2008354:	103ee83a 	callr	r2
 2008358:	e0bfff15 	stw	r2,-4(fp)
 200835c:	00000306 	br	200836c <alt_get_errno+0x48>
 2008360:	00808074 	movhi	r2,513
 2008364:	10ad7f04 	addi	r2,r2,-18948
 2008368:	e0bfff15 	stw	r2,-4(fp)
 200836c:	e0bfff17 	ldw	r2,-4(fp)
}
 2008370:	e037883a 	mov	sp,fp
 2008374:	dfc00117 	ldw	ra,4(sp)
 2008378:	df000017 	ldw	fp,0(sp)
 200837c:	dec00204 	addi	sp,sp,8
 2008380:	f800283a 	ret

02008384 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2008384:	defffc04 	addi	sp,sp,-16
 2008388:	df000315 	stw	fp,12(sp)
 200838c:	df000304 	addi	fp,sp,12
 2008390:	e13ffd15 	stw	r4,-12(fp)
 2008394:	e17ffe15 	stw	r5,-8(fp)
 2008398:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200839c:	e0bfff17 	ldw	r2,-4(fp)
}
 20083a0:	e037883a 	mov	sp,fp
 20083a4:	df000017 	ldw	fp,0(sp)
 20083a8:	dec00104 	addi	sp,sp,4
 20083ac:	f800283a 	ret

020083b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 20083b0:	defff904 	addi	sp,sp,-28
 20083b4:	dfc00615 	stw	ra,24(sp)
 20083b8:	df000515 	stw	fp,20(sp)
 20083bc:	df000504 	addi	fp,sp,20
 20083c0:	e13ffd15 	stw	r4,-12(fp)
 20083c4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20083c8:	e0bffd17 	ldw	r2,-12(fp)
 20083cc:	1005003a 	cmpeq	r2,r2,zero
 20083d0:	1000041e 	bne	r2,zero,20083e4 <alt_dev_llist_insert+0x34>
 20083d4:	e0bffd17 	ldw	r2,-12(fp)
 20083d8:	10800217 	ldw	r2,8(r2)
 20083dc:	1004c03a 	cmpne	r2,r2,zero
 20083e0:	1000071e 	bne	r2,zero,2008400 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 20083e4:	20084640 	call	2008464 <alt_get_errno>
 20083e8:	1007883a 	mov	r3,r2
 20083ec:	00800584 	movi	r2,22
 20083f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20083f4:	00bffa84 	movi	r2,-22
 20083f8:	e0bfff15 	stw	r2,-4(fp)
 20083fc:	00001306 	br	200844c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2008400:	e0fffd17 	ldw	r3,-12(fp)
 2008404:	e0bffe17 	ldw	r2,-8(fp)
 2008408:	e0bffb15 	stw	r2,-20(fp)
 200840c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2008410:	e0fffc17 	ldw	r3,-16(fp)
 2008414:	e0bffb17 	ldw	r2,-20(fp)
 2008418:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200841c:	e0bffb17 	ldw	r2,-20(fp)
 2008420:	10c00017 	ldw	r3,0(r2)
 2008424:	e0bffc17 	ldw	r2,-16(fp)
 2008428:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200842c:	e0bffb17 	ldw	r2,-20(fp)
 2008430:	10c00017 	ldw	r3,0(r2)
 2008434:	e0bffc17 	ldw	r2,-16(fp)
 2008438:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200843c:	e0fffb17 	ldw	r3,-20(fp)
 2008440:	e0bffc17 	ldw	r2,-16(fp)
 2008444:	18800015 	stw	r2,0(r3)

  return 0;  
 2008448:	e03fff15 	stw	zero,-4(fp)
 200844c:	e0bfff17 	ldw	r2,-4(fp)
}
 2008450:	e037883a 	mov	sp,fp
 2008454:	dfc00117 	ldw	ra,4(sp)
 2008458:	df000017 	ldw	fp,0(sp)
 200845c:	dec00204 	addi	sp,sp,8
 2008460:	f800283a 	ret

02008464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2008464:	defffd04 	addi	sp,sp,-12
 2008468:	dfc00215 	stw	ra,8(sp)
 200846c:	df000115 	stw	fp,4(sp)
 2008470:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2008474:	00808074 	movhi	r2,513
 2008478:	10ad7204 	addi	r2,r2,-19000
 200847c:	10800017 	ldw	r2,0(r2)
 2008480:	1005003a 	cmpeq	r2,r2,zero
 2008484:	1000061e 	bne	r2,zero,20084a0 <alt_get_errno+0x3c>
 2008488:	00808074 	movhi	r2,513
 200848c:	10ad7204 	addi	r2,r2,-19000
 2008490:	10800017 	ldw	r2,0(r2)
 2008494:	103ee83a 	callr	r2
 2008498:	e0bfff15 	stw	r2,-4(fp)
 200849c:	00000306 	br	20084ac <alt_get_errno+0x48>
 20084a0:	00808074 	movhi	r2,513
 20084a4:	10ad7f04 	addi	r2,r2,-18948
 20084a8:	e0bfff15 	stw	r2,-4(fp)
 20084ac:	e0bfff17 	ldw	r2,-4(fp)
}
 20084b0:	e037883a 	mov	sp,fp
 20084b4:	dfc00117 	ldw	ra,4(sp)
 20084b8:	df000017 	ldw	fp,0(sp)
 20084bc:	dec00204 	addi	sp,sp,8
 20084c0:	f800283a 	ret

020084c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20084c4:	defffd04 	addi	sp,sp,-12
 20084c8:	dfc00215 	stw	ra,8(sp)
 20084cc:	df000115 	stw	fp,4(sp)
 20084d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20084d4:	00bfff04 	movi	r2,-4
 20084d8:	00c08074 	movhi	r3,513
 20084dc:	18e59404 	addi	r3,r3,-27056
 20084e0:	1885883a 	add	r2,r3,r2
 20084e4:	e0bfff15 	stw	r2,-4(fp)
 20084e8:	00000606 	br	2008504 <_do_ctors+0x40>
        (*ctor) (); 
 20084ec:	e0bfff17 	ldw	r2,-4(fp)
 20084f0:	10800017 	ldw	r2,0(r2)
 20084f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20084f8:	e0bfff17 	ldw	r2,-4(fp)
 20084fc:	10bfff04 	addi	r2,r2,-4
 2008500:	e0bfff15 	stw	r2,-4(fp)
 2008504:	e0ffff17 	ldw	r3,-4(fp)
 2008508:	00808074 	movhi	r2,513
 200850c:	10a59304 	addi	r2,r2,-27060
 2008510:	18bff62e 	bgeu	r3,r2,20084ec <_do_ctors+0x28>
        (*ctor) (); 
}
 2008514:	e037883a 	mov	sp,fp
 2008518:	dfc00117 	ldw	ra,4(sp)
 200851c:	df000017 	ldw	fp,0(sp)
 2008520:	dec00204 	addi	sp,sp,8
 2008524:	f800283a 	ret

02008528 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2008528:	defffd04 	addi	sp,sp,-12
 200852c:	dfc00215 	stw	ra,8(sp)
 2008530:	df000115 	stw	fp,4(sp)
 2008534:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2008538:	00bfff04 	movi	r2,-4
 200853c:	00c08074 	movhi	r3,513
 2008540:	18e59404 	addi	r3,r3,-27056
 2008544:	1885883a 	add	r2,r3,r2
 2008548:	e0bfff15 	stw	r2,-4(fp)
 200854c:	00000606 	br	2008568 <_do_dtors+0x40>
        (*dtor) (); 
 2008550:	e0bfff17 	ldw	r2,-4(fp)
 2008554:	10800017 	ldw	r2,0(r2)
 2008558:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200855c:	e0bfff17 	ldw	r2,-4(fp)
 2008560:	10bfff04 	addi	r2,r2,-4
 2008564:	e0bfff15 	stw	r2,-4(fp)
 2008568:	e0ffff17 	ldw	r3,-4(fp)
 200856c:	00808074 	movhi	r2,513
 2008570:	10a59404 	addi	r2,r2,-27056
 2008574:	18bff62e 	bgeu	r3,r2,2008550 <_do_dtors+0x28>
        (*dtor) (); 
}
 2008578:	e037883a 	mov	sp,fp
 200857c:	dfc00117 	ldw	ra,4(sp)
 2008580:	df000017 	ldw	fp,0(sp)
 2008584:	dec00204 	addi	sp,sp,8
 2008588:	f800283a 	ret

0200858c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 200858c:	defffb04 	addi	sp,sp,-20
 2008590:	dfc00415 	stw	ra,16(sp)
 2008594:	df000315 	stw	fp,12(sp)
 2008598:	df000304 	addi	fp,sp,12
 200859c:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 20085a0:	e13ffe17 	ldw	r4,-8(fp)
 20085a4:	d1600904 	addi	r5,gp,-32732
 20085a8:	2008ec40 	call	2008ec4 <alt_find_dev>
 20085ac:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 20085b0:	e0bffd17 	ldw	r2,-12(fp)
 20085b4:	1005003a 	cmpeq	r2,r2,zero
 20085b8:	10000b1e 	bne	r2,zero,20085e8 <alt_flash_open_dev+0x5c>
 20085bc:	e0bffd17 	ldw	r2,-12(fp)
 20085c0:	10800317 	ldw	r2,12(r2)
 20085c4:	1005003a 	cmpeq	r2,r2,zero
 20085c8:	1000071e 	bne	r2,zero,20085e8 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 20085cc:	e0bffd17 	ldw	r2,-12(fp)
 20085d0:	10800317 	ldw	r2,12(r2)
 20085d4:	e13ffd17 	ldw	r4,-12(fp)
 20085d8:	e17ffe17 	ldw	r5,-8(fp)
 20085dc:	103ee83a 	callr	r2
 20085e0:	e0bfff15 	stw	r2,-4(fp)
 20085e4:	00000206 	br	20085f0 <alt_flash_open_dev+0x64>
  }

  return dev;
 20085e8:	e0bffd17 	ldw	r2,-12(fp)
 20085ec:	e0bfff15 	stw	r2,-4(fp)
 20085f0:	e0bfff17 	ldw	r2,-4(fp)
}
 20085f4:	e037883a 	mov	sp,fp
 20085f8:	dfc00117 	ldw	ra,4(sp)
 20085fc:	df000017 	ldw	fp,0(sp)
 2008600:	dec00204 	addi	sp,sp,8
 2008604:	f800283a 	ret

02008608 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 2008608:	defffd04 	addi	sp,sp,-12
 200860c:	dfc00215 	stw	ra,8(sp)
 2008610:	df000115 	stw	fp,4(sp)
 2008614:	df000104 	addi	fp,sp,4
 2008618:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 200861c:	e0bfff17 	ldw	r2,-4(fp)
 2008620:	1005003a 	cmpeq	r2,r2,zero
 2008624:	1000081e 	bne	r2,zero,2008648 <alt_flash_close_dev+0x40>
 2008628:	e0bfff17 	ldw	r2,-4(fp)
 200862c:	10800417 	ldw	r2,16(r2)
 2008630:	1005003a 	cmpeq	r2,r2,zero
 2008634:	1000041e 	bne	r2,zero,2008648 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 2008638:	e0bfff17 	ldw	r2,-4(fp)
 200863c:	10800417 	ldw	r2,16(r2)
 2008640:	e13fff17 	ldw	r4,-4(fp)
 2008644:	103ee83a 	callr	r2
  }
  return;
}
 2008648:	e037883a 	mov	sp,fp
 200864c:	dfc00117 	ldw	ra,4(sp)
 2008650:	df000017 	ldw	fp,0(sp)
 2008654:	dec00204 	addi	sp,sp,8
 2008658:	f800283a 	ret

0200865c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 200865c:	defff904 	addi	sp,sp,-28
 2008660:	dfc00615 	stw	ra,24(sp)
 2008664:	df000515 	stw	fp,20(sp)
 2008668:	df000504 	addi	fp,sp,20
 200866c:	e13ffc15 	stw	r4,-16(fp)
 2008670:	e17ffd15 	stw	r5,-12(fp)
 2008674:	e1bffe15 	stw	r6,-8(fp)
 2008678:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 200867c:	e13ffd17 	ldw	r4,-12(fp)
 2008680:	e17ffe17 	ldw	r5,-8(fp)
 2008684:	e1bfff17 	ldw	r6,-4(fp)
 2008688:	20088740 	call	2008874 <open>
 200868c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2008690:	e0bffb17 	ldw	r2,-20(fp)
 2008694:	1004803a 	cmplt	r2,r2,zero
 2008698:	10001c1e 	bne	r2,zero,200870c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 200869c:	e0bffb17 	ldw	r2,-20(fp)
 20086a0:	00c08074 	movhi	r3,513
 20086a4:	18ed0a04 	addi	r3,r3,-19416
 20086a8:	10800324 	muli	r2,r2,12
 20086ac:	10c5883a 	add	r2,r2,r3
 20086b0:	10c00017 	ldw	r3,0(r2)
 20086b4:	e0bffc17 	ldw	r2,-16(fp)
 20086b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 20086bc:	e0bffb17 	ldw	r2,-20(fp)
 20086c0:	00c08074 	movhi	r3,513
 20086c4:	18ed0a04 	addi	r3,r3,-19416
 20086c8:	10800324 	muli	r2,r2,12
 20086cc:	10c5883a 	add	r2,r2,r3
 20086d0:	10800104 	addi	r2,r2,4
 20086d4:	10c00017 	ldw	r3,0(r2)
 20086d8:	e0bffc17 	ldw	r2,-16(fp)
 20086dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20086e0:	e0bffb17 	ldw	r2,-20(fp)
 20086e4:	00c08074 	movhi	r3,513
 20086e8:	18ed0a04 	addi	r3,r3,-19416
 20086ec:	10800324 	muli	r2,r2,12
 20086f0:	10c5883a 	add	r2,r2,r3
 20086f4:	10800204 	addi	r2,r2,8
 20086f8:	10c00017 	ldw	r3,0(r2)
 20086fc:	e0bffc17 	ldw	r2,-16(fp)
 2008700:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2008704:	e13ffb17 	ldw	r4,-20(fp)
 2008708:	2008a5c0 	call	2008a5c <alt_release_fd>
  }
} 
 200870c:	e037883a 	mov	sp,fp
 2008710:	dfc00117 	ldw	ra,4(sp)
 2008714:	df000017 	ldw	fp,0(sp)
 2008718:	dec00204 	addi	sp,sp,8
 200871c:	f800283a 	ret

02008720 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2008720:	defffb04 	addi	sp,sp,-20
 2008724:	dfc00415 	stw	ra,16(sp)
 2008728:	df000315 	stw	fp,12(sp)
 200872c:	df000304 	addi	fp,sp,12
 2008730:	e13ffd15 	stw	r4,-12(fp)
 2008734:	e17ffe15 	stw	r5,-8(fp)
 2008738:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 200873c:	01008074 	movhi	r4,513
 2008740:	212d0d04 	addi	r4,r4,-19404
 2008744:	e17ffd17 	ldw	r5,-12(fp)
 2008748:	01800044 	movi	r6,1
 200874c:	01c07fc4 	movi	r7,511
 2008750:	200865c0 	call	200865c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2008754:	01008074 	movhi	r4,513
 2008758:	212d0a04 	addi	r4,r4,-19416
 200875c:	e17ffe17 	ldw	r5,-8(fp)
 2008760:	000d883a 	mov	r6,zero
 2008764:	01c07fc4 	movi	r7,511
 2008768:	200865c0 	call	200865c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 200876c:	01008074 	movhi	r4,513
 2008770:	212d1004 	addi	r4,r4,-19392
 2008774:	e17fff17 	ldw	r5,-4(fp)
 2008778:	01800044 	movi	r6,1
 200877c:	01c07fc4 	movi	r7,511
 2008780:	200865c0 	call	200865c <alt_open_fd>
}  
 2008784:	e037883a 	mov	sp,fp
 2008788:	dfc00117 	ldw	ra,4(sp)
 200878c:	df000017 	ldw	fp,0(sp)
 2008790:	dec00204 	addi	sp,sp,8
 2008794:	f800283a 	ret

02008798 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2008798:	defffc04 	addi	sp,sp,-16
 200879c:	df000315 	stw	fp,12(sp)
 20087a0:	df000304 	addi	fp,sp,12
 20087a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 20087a8:	e0bffe17 	ldw	r2,-8(fp)
 20087ac:	10800217 	ldw	r2,8(r2)
 20087b0:	10d00034 	orhi	r3,r2,16384
 20087b4:	e0bffe17 	ldw	r2,-8(fp)
 20087b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20087bc:	e03ffd15 	stw	zero,-12(fp)
 20087c0:	00002006 	br	2008844 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 20087c4:	e0bffd17 	ldw	r2,-12(fp)
 20087c8:	00c08074 	movhi	r3,513
 20087cc:	18ed0a04 	addi	r3,r3,-19416
 20087d0:	10800324 	muli	r2,r2,12
 20087d4:	10c5883a 	add	r2,r2,r3
 20087d8:	10c00017 	ldw	r3,0(r2)
 20087dc:	e0bffe17 	ldw	r2,-8(fp)
 20087e0:	10800017 	ldw	r2,0(r2)
 20087e4:	1880141e 	bne	r3,r2,2008838 <alt_file_locked+0xa0>
 20087e8:	e0bffd17 	ldw	r2,-12(fp)
 20087ec:	00c08074 	movhi	r3,513
 20087f0:	18ed0a04 	addi	r3,r3,-19416
 20087f4:	10800324 	muli	r2,r2,12
 20087f8:	10c5883a 	add	r2,r2,r3
 20087fc:	10800204 	addi	r2,r2,8
 2008800:	10800017 	ldw	r2,0(r2)
 2008804:	1004403a 	cmpge	r2,r2,zero
 2008808:	10000b1e 	bne	r2,zero,2008838 <alt_file_locked+0xa0>
 200880c:	e0bffd17 	ldw	r2,-12(fp)
 2008810:	10800324 	muli	r2,r2,12
 2008814:	1007883a 	mov	r3,r2
 2008818:	00808074 	movhi	r2,513
 200881c:	10ad0a04 	addi	r2,r2,-19416
 2008820:	1887883a 	add	r3,r3,r2
 2008824:	e0bffe17 	ldw	r2,-8(fp)
 2008828:	18800326 	beq	r3,r2,2008838 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 200882c:	00bffcc4 	movi	r2,-13
 2008830:	e0bfff15 	stw	r2,-4(fp)
 2008834:	00000a06 	br	2008860 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2008838:	e0bffd17 	ldw	r2,-12(fp)
 200883c:	10800044 	addi	r2,r2,1
 2008840:	e0bffd15 	stw	r2,-12(fp)
 2008844:	00808074 	movhi	r2,513
 2008848:	10ad7104 	addi	r2,r2,-19004
 200884c:	10800017 	ldw	r2,0(r2)
 2008850:	1007883a 	mov	r3,r2
 2008854:	e0bffd17 	ldw	r2,-12(fp)
 2008858:	18bfda2e 	bgeu	r3,r2,20087c4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 200885c:	e03fff15 	stw	zero,-4(fp)
 2008860:	e0bfff17 	ldw	r2,-4(fp)
}
 2008864:	e037883a 	mov	sp,fp
 2008868:	df000017 	ldw	fp,0(sp)
 200886c:	dec00104 	addi	sp,sp,4
 2008870:	f800283a 	ret

02008874 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2008874:	defff404 	addi	sp,sp,-48
 2008878:	dfc00b15 	stw	ra,44(sp)
 200887c:	df000a15 	stw	fp,40(sp)
 2008880:	df000a04 	addi	fp,sp,40
 2008884:	e13ffb15 	stw	r4,-20(fp)
 2008888:	e17ffc15 	stw	r5,-16(fp)
 200888c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2008890:	00bfffc4 	movi	r2,-1
 2008894:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 2008898:	00bffb44 	movi	r2,-19
 200889c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 20088a0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 20088a4:	e13ffb17 	ldw	r4,-20(fp)
 20088a8:	01408074 	movhi	r5,513
 20088ac:	296d6f04 	addi	r5,r5,-19012
 20088b0:	2008ec40 	call	2008ec4 <alt_find_dev>
 20088b4:	e0bffa15 	stw	r2,-24(fp)
 20088b8:	e0bffa17 	ldw	r2,-24(fp)
 20088bc:	1004c03a 	cmpne	r2,r2,zero
 20088c0:	1000051e 	bne	r2,zero,20088d8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 20088c4:	e13ffb17 	ldw	r4,-20(fp)
 20088c8:	2008f580 	call	2008f58 <alt_find_file>
 20088cc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 20088d0:	00800044 	movi	r2,1
 20088d4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 20088d8:	e0bffa17 	ldw	r2,-24(fp)
 20088dc:	1005003a 	cmpeq	r2,r2,zero
 20088e0:	1000301e 	bne	r2,zero,20089a4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 20088e4:	e13ffa17 	ldw	r4,-24(fp)
 20088e8:	20090780 	call	2009078 <alt_get_fd>
 20088ec:	e0bff815 	stw	r2,-32(fp)
 20088f0:	e0bff817 	ldw	r2,-32(fp)
 20088f4:	1004403a 	cmpge	r2,r2,zero
 20088f8:	1000031e 	bne	r2,zero,2008908 <open+0x94>
    {
      status = index;
 20088fc:	e0bff817 	ldw	r2,-32(fp)
 2008900:	e0bff715 	stw	r2,-36(fp)
 2008904:	00002906 	br	20089ac <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 2008908:	e0bff817 	ldw	r2,-32(fp)
 200890c:	10800324 	muli	r2,r2,12
 2008910:	1007883a 	mov	r3,r2
 2008914:	00808074 	movhi	r2,513
 2008918:	10ad0a04 	addi	r2,r2,-19416
 200891c:	1885883a 	add	r2,r3,r2
 2008920:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2008924:	e0fffc17 	ldw	r3,-16(fp)
 2008928:	00900034 	movhi	r2,16384
 200892c:	10bfffc4 	addi	r2,r2,-1
 2008930:	1886703a 	and	r3,r3,r2
 2008934:	e0bff917 	ldw	r2,-28(fp)
 2008938:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 200893c:	e0bff617 	ldw	r2,-40(fp)
 2008940:	1004c03a 	cmpne	r2,r2,zero
 2008944:	1000061e 	bne	r2,zero,2008960 <open+0xec>
 2008948:	e13ff917 	ldw	r4,-28(fp)
 200894c:	20087980 	call	2008798 <alt_file_locked>
 2008950:	e0bff715 	stw	r2,-36(fp)
 2008954:	e0bff717 	ldw	r2,-36(fp)
 2008958:	1004803a 	cmplt	r2,r2,zero
 200895c:	1000131e 	bne	r2,zero,20089ac <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2008960:	e0bffa17 	ldw	r2,-24(fp)
 2008964:	10800317 	ldw	r2,12(r2)
 2008968:	1005003a 	cmpeq	r2,r2,zero
 200896c:	1000091e 	bne	r2,zero,2008994 <open+0x120>
 2008970:	e0bffa17 	ldw	r2,-24(fp)
 2008974:	10800317 	ldw	r2,12(r2)
 2008978:	e13ff917 	ldw	r4,-28(fp)
 200897c:	e17ffb17 	ldw	r5,-20(fp)
 2008980:	e1bffc17 	ldw	r6,-16(fp)
 2008984:	e1fffd17 	ldw	r7,-12(fp)
 2008988:	103ee83a 	callr	r2
 200898c:	e0bfff15 	stw	r2,-4(fp)
 2008990:	00000106 	br	2008998 <open+0x124>
 2008994:	e03fff15 	stw	zero,-4(fp)
 2008998:	e0bfff17 	ldw	r2,-4(fp)
 200899c:	e0bff715 	stw	r2,-36(fp)
 20089a0:	00000206 	br	20089ac <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 20089a4:	00bffb44 	movi	r2,-19
 20089a8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 20089ac:	e0bff717 	ldw	r2,-36(fp)
 20089b0:	1004403a 	cmpge	r2,r2,zero
 20089b4:	1000091e 	bne	r2,zero,20089dc <open+0x168>
  {
    alt_release_fd (index);  
 20089b8:	e13ff817 	ldw	r4,-32(fp)
 20089bc:	2008a5c0 	call	2008a5c <alt_release_fd>
    ALT_ERRNO = -status;
 20089c0:	20089fc0 	call	20089fc <alt_get_errno>
 20089c4:	e0fff717 	ldw	r3,-36(fp)
 20089c8:	00c7c83a 	sub	r3,zero,r3
 20089cc:	10c00015 	stw	r3,0(r2)
    return -1;
 20089d0:	00bfffc4 	movi	r2,-1
 20089d4:	e0bffe15 	stw	r2,-8(fp)
 20089d8:	00000206 	br	20089e4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 20089dc:	e0bff817 	ldw	r2,-32(fp)
 20089e0:	e0bffe15 	stw	r2,-8(fp)
 20089e4:	e0bffe17 	ldw	r2,-8(fp)
}
 20089e8:	e037883a 	mov	sp,fp
 20089ec:	dfc00117 	ldw	ra,4(sp)
 20089f0:	df000017 	ldw	fp,0(sp)
 20089f4:	dec00204 	addi	sp,sp,8
 20089f8:	f800283a 	ret

020089fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20089fc:	defffd04 	addi	sp,sp,-12
 2008a00:	dfc00215 	stw	ra,8(sp)
 2008a04:	df000115 	stw	fp,4(sp)
 2008a08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2008a0c:	00808074 	movhi	r2,513
 2008a10:	10ad7204 	addi	r2,r2,-19000
 2008a14:	10800017 	ldw	r2,0(r2)
 2008a18:	1005003a 	cmpeq	r2,r2,zero
 2008a1c:	1000061e 	bne	r2,zero,2008a38 <alt_get_errno+0x3c>
 2008a20:	00808074 	movhi	r2,513
 2008a24:	10ad7204 	addi	r2,r2,-19000
 2008a28:	10800017 	ldw	r2,0(r2)
 2008a2c:	103ee83a 	callr	r2
 2008a30:	e0bfff15 	stw	r2,-4(fp)
 2008a34:	00000306 	br	2008a44 <alt_get_errno+0x48>
 2008a38:	00808074 	movhi	r2,513
 2008a3c:	10ad7f04 	addi	r2,r2,-18948
 2008a40:	e0bfff15 	stw	r2,-4(fp)
 2008a44:	e0bfff17 	ldw	r2,-4(fp)
}
 2008a48:	e037883a 	mov	sp,fp
 2008a4c:	dfc00117 	ldw	ra,4(sp)
 2008a50:	df000017 	ldw	fp,0(sp)
 2008a54:	dec00204 	addi	sp,sp,8
 2008a58:	f800283a 	ret

02008a5c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2008a5c:	defffe04 	addi	sp,sp,-8
 2008a60:	df000115 	stw	fp,4(sp)
 2008a64:	df000104 	addi	fp,sp,4
 2008a68:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2008a6c:	e0bfff17 	ldw	r2,-4(fp)
 2008a70:	108000d0 	cmplti	r2,r2,3
 2008a74:	10000d1e 	bne	r2,zero,2008aac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2008a78:	e0bfff17 	ldw	r2,-4(fp)
 2008a7c:	00c08074 	movhi	r3,513
 2008a80:	18ed0a04 	addi	r3,r3,-19416
 2008a84:	10800324 	muli	r2,r2,12
 2008a88:	10c5883a 	add	r2,r2,r3
 2008a8c:	10800204 	addi	r2,r2,8
 2008a90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2008a94:	e0bfff17 	ldw	r2,-4(fp)
 2008a98:	00c08074 	movhi	r3,513
 2008a9c:	18ed0a04 	addi	r3,r3,-19416
 2008aa0:	10800324 	muli	r2,r2,12
 2008aa4:	10c5883a 	add	r2,r2,r3
 2008aa8:	10000015 	stw	zero,0(r2)
  }
}
 2008aac:	e037883a 	mov	sp,fp
 2008ab0:	df000017 	ldw	fp,0(sp)
 2008ab4:	dec00104 	addi	sp,sp,4
 2008ab8:	f800283a 	ret

02008abc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2008abc:	defff904 	addi	sp,sp,-28
 2008ac0:	df000615 	stw	fp,24(sp)
 2008ac4:	df000604 	addi	fp,sp,24
 2008ac8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008acc:	0005303a 	rdctl	r2,status
 2008ad0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008ad4:	e0fffd17 	ldw	r3,-12(fp)
 2008ad8:	00bfff84 	movi	r2,-2
 2008adc:	1884703a 	and	r2,r3,r2
 2008ae0:	1001703a 	wrctl	status,r2
  
  return context;
 2008ae4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2008ae8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2008aec:	e0bfff17 	ldw	r2,-4(fp)
 2008af0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2008af4:	e0bffc17 	ldw	r2,-16(fp)
 2008af8:	10c00017 	ldw	r3,0(r2)
 2008afc:	e0bffc17 	ldw	r2,-16(fp)
 2008b00:	10800117 	ldw	r2,4(r2)
 2008b04:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2008b08:	e0bffc17 	ldw	r2,-16(fp)
 2008b0c:	10c00117 	ldw	r3,4(r2)
 2008b10:	e0bffc17 	ldw	r2,-16(fp)
 2008b14:	10800017 	ldw	r2,0(r2)
 2008b18:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2008b1c:	e0fffc17 	ldw	r3,-16(fp)
 2008b20:	e0bffc17 	ldw	r2,-16(fp)
 2008b24:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2008b28:	e0fffc17 	ldw	r3,-16(fp)
 2008b2c:	e0bffc17 	ldw	r2,-16(fp)
 2008b30:	18800015 	stw	r2,0(r3)
 2008b34:	e0bffe17 	ldw	r2,-8(fp)
 2008b38:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2008b3c:	0005303a 	rdctl	r2,status
 2008b40:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2008b44:	e0fffb17 	ldw	r3,-20(fp)
 2008b48:	00bfff84 	movi	r2,-2
 2008b4c:	1884703a 	and	r2,r3,r2
 2008b50:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2008b54:	e0bffa17 	ldw	r2,-24(fp)
 2008b58:	10c0004c 	andi	r3,r2,1
 2008b5c:	e0bffb17 	ldw	r2,-20(fp)
 2008b60:	10c4b03a 	or	r2,r2,r3
 2008b64:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
 2008b68:	e0bffb17 	ldw	r2,-20(fp)
 2008b6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2008b70:	e037883a 	mov	sp,fp
 2008b74:	df000017 	ldw	fp,0(sp)
 2008b78:	dec00104 	addi	sp,sp,4
 2008b7c:	f800283a 	ret

02008b80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2008b80:	defffb04 	addi	sp,sp,-20
 2008b84:	dfc00415 	stw	ra,16(sp)
 2008b88:	df000315 	stw	fp,12(sp)
 2008b8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2008b90:	d0a00b17 	ldw	r2,-32724(gp)
 2008b94:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2008b98:	d0a01417 	ldw	r2,-32688(gp)
 2008b9c:	10800044 	addi	r2,r2,1
 2008ba0:	d0a01415 	stw	r2,-32688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2008ba4:	00003106 	br	2008c6c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2008ba8:	e0bffe17 	ldw	r2,-8(fp)
 2008bac:	10800017 	ldw	r2,0(r2)
 2008bb0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2008bb4:	e0bffe17 	ldw	r2,-8(fp)
 2008bb8:	10800403 	ldbu	r2,16(r2)
 2008bbc:	10803fcc 	andi	r2,r2,255
 2008bc0:	1005003a 	cmpeq	r2,r2,zero
 2008bc4:	1000051e 	bne	r2,zero,2008bdc <alt_tick+0x5c>
 2008bc8:	d0a01417 	ldw	r2,-32688(gp)
 2008bcc:	1004c03a 	cmpne	r2,r2,zero
 2008bd0:	1000021e 	bne	r2,zero,2008bdc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 2008bd4:	e0bffe17 	ldw	r2,-8(fp)
 2008bd8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2008bdc:	e0bffe17 	ldw	r2,-8(fp)
 2008be0:	10c00217 	ldw	r3,8(r2)
 2008be4:	d0a01417 	ldw	r2,-32688(gp)
 2008be8:	10c01e36 	bltu	r2,r3,2008c64 <alt_tick+0xe4>
 2008bec:	e0bffe17 	ldw	r2,-8(fp)
 2008bf0:	10800403 	ldbu	r2,16(r2)
 2008bf4:	10803fcc 	andi	r2,r2,255
 2008bf8:	1004c03a 	cmpne	r2,r2,zero
 2008bfc:	1000191e 	bne	r2,zero,2008c64 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 2008c00:	e0bffe17 	ldw	r2,-8(fp)
 2008c04:	10c00317 	ldw	r3,12(r2)
 2008c08:	e0bffe17 	ldw	r2,-8(fp)
 2008c0c:	11000517 	ldw	r4,20(r2)
 2008c10:	183ee83a 	callr	r3
 2008c14:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2008c18:	e0bffd17 	ldw	r2,-12(fp)
 2008c1c:	1004c03a 	cmpne	r2,r2,zero
 2008c20:	1000031e 	bne	r2,zero,2008c30 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2008c24:	e13ffe17 	ldw	r4,-8(fp)
 2008c28:	2008abc0 	call	2008abc <alt_alarm_stop>
 2008c2c:	00000d06 	br	2008c64 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2008c30:	e0bffe17 	ldw	r2,-8(fp)
 2008c34:	10c00217 	ldw	r3,8(r2)
 2008c38:	e0bffd17 	ldw	r2,-12(fp)
 2008c3c:	1887883a 	add	r3,r3,r2
 2008c40:	e0bffe17 	ldw	r2,-8(fp)
 2008c44:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2008c48:	e0bffe17 	ldw	r2,-8(fp)
 2008c4c:	10c00217 	ldw	r3,8(r2)
 2008c50:	d0a01417 	ldw	r2,-32688(gp)
 2008c54:	1880032e 	bgeu	r3,r2,2008c64 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2008c58:	e0fffe17 	ldw	r3,-8(fp)
 2008c5c:	00800044 	movi	r2,1
 2008c60:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2008c64:	e0bfff17 	ldw	r2,-4(fp)
 2008c68:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2008c6c:	d0e00b04 	addi	r3,gp,-32724
 2008c70:	e0bffe17 	ldw	r2,-8(fp)
 2008c74:	10ffcc1e 	bne	r2,r3,2008ba8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2008c78:	e037883a 	mov	sp,fp
 2008c7c:	dfc00117 	ldw	ra,4(sp)
 2008c80:	df000017 	ldw	fp,0(sp)
 2008c84:	dec00204 	addi	sp,sp,8
 2008c88:	f800283a 	ret

02008c8c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2008c8c:	defff404 	addi	sp,sp,-48
 2008c90:	df000b15 	stw	fp,44(sp)
 2008c94:	df000b04 	addi	fp,sp,44
 2008c98:	e13ffc15 	stw	r4,-16(fp)
 2008c9c:	e17ffd15 	stw	r5,-12(fp)
 2008ca0:	e1bffe15 	stw	r6,-8(fp)
 2008ca4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2008ca8:	e0fffe17 	ldw	r3,-8(fp)
 2008cac:	e0bfff17 	ldw	r2,-4(fp)
 2008cb0:	10c5883a 	add	r2,r2,r3
 2008cb4:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 2008cb8:	e0c00117 	ldw	r3,4(fp)
 2008cbc:	e0800217 	ldw	r2,8(fp)
 2008cc0:	10c5883a 	add	r2,r2,r3
 2008cc4:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 2008cc8:	e0800117 	ldw	r2,4(fp)
 2008ccc:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 2008cd0:	e0bffe17 	ldw	r2,-8(fp)
 2008cd4:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2008cd8:	00800044 	movi	r2,1
 2008cdc:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2008ce0:	e0bffc17 	ldw	r2,-16(fp)
 2008ce4:	11000504 	addi	r4,r2,20
 2008ce8:	e0fffd17 	ldw	r3,-12(fp)
 2008cec:	00800044 	movi	r2,1
 2008cf0:	10c6983a 	sll	r3,r2,r3
 2008cf4:	2005883a 	mov	r2,r4
 2008cf8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2008cfc:	e0800317 	ldw	r2,12(fp)
 2008d00:	1080008c 	andi	r2,r2,2
 2008d04:	1004c03a 	cmpne	r2,r2,zero
 2008d08:	1000051e 	bne	r2,zero,2008d20 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2008d0c:	e0bffc17 	ldw	r2,-16(fp)
 2008d10:	10800304 	addi	r2,r2,12
 2008d14:	1007883a 	mov	r3,r2
 2008d18:	00810004 	movi	r2,1024
 2008d1c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2008d20:	e0bffc17 	ldw	r2,-16(fp)
 2008d24:	10800037 	ldwio	r2,0(r2)
 2008d28:	00000006 	br	2008d2c <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2008d2c:	e0bffc17 	ldw	r2,-16(fp)
 2008d30:	10800204 	addi	r2,r2,8
 2008d34:	10800037 	ldwio	r2,0(r2)
 2008d38:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2008d3c:	e0bff717 	ldw	r2,-36(fp)
 2008d40:	1080100c 	andi	r2,r2,64
 2008d44:	1005003a 	cmpeq	r2,r2,zero
 2008d48:	1000031e 	bne	r2,zero,2008d58 <alt_avalon_spi_command+0xcc>
 2008d4c:	e0bff617 	ldw	r2,-40(fp)
 2008d50:	1004c03a 	cmpne	r2,r2,zero
 2008d54:	1000041e 	bne	r2,zero,2008d68 <alt_avalon_spi_command+0xdc>
 2008d58:	e0bff717 	ldw	r2,-36(fp)
 2008d5c:	1080200c 	andi	r2,r2,128
 2008d60:	1005003a 	cmpeq	r2,r2,zero
 2008d64:	103ff11e 	bne	r2,zero,2008d2c <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2008d68:	e0bff717 	ldw	r2,-36(fp)
 2008d6c:	1080100c 	andi	r2,r2,64
 2008d70:	1005003a 	cmpeq	r2,r2,zero
 2008d74:	1000201e 	bne	r2,zero,2008df8 <alt_avalon_spi_command+0x16c>
 2008d78:	e0bff617 	ldw	r2,-40(fp)
 2008d7c:	10800050 	cmplti	r2,r2,1
 2008d80:	10001d1e 	bne	r2,zero,2008df8 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 2008d84:	e0bff617 	ldw	r2,-40(fp)
 2008d88:	10bfffc4 	addi	r2,r2,-1
 2008d8c:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 2008d90:	e0ffff17 	ldw	r3,-4(fp)
 2008d94:	e0bffb17 	ldw	r2,-20(fp)
 2008d98:	18800b2e 	bgeu	r3,r2,2008dc8 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2008d9c:	e0bffc17 	ldw	r2,-16(fp)
 2008da0:	11000104 	addi	r4,r2,4
 2008da4:	e0bfff17 	ldw	r2,-4(fp)
 2008da8:	10800003 	ldbu	r2,0(r2)
 2008dac:	10c03fcc 	andi	r3,r2,255
 2008db0:	e0bfff17 	ldw	r2,-4(fp)
 2008db4:	10800044 	addi	r2,r2,1
 2008db8:	e0bfff15 	stw	r2,-4(fp)
 2008dbc:	2005883a 	mov	r2,r4
 2008dc0:	10c00035 	stwio	r3,0(r2)
 2008dc4:	00000c06 	br	2008df8 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 2008dc8:	e0bff917 	ldw	r2,-28(fp)
 2008dcc:	1005003a 	cmpeq	r2,r2,zero
 2008dd0:	1000071e 	bne	r2,zero,2008df0 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 2008dd4:	e0bff917 	ldw	r2,-28(fp)
 2008dd8:	10bfffc4 	addi	r2,r2,-1
 2008ddc:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2008de0:	e0bffc17 	ldw	r2,-16(fp)
 2008de4:	10800104 	addi	r2,r2,4
 2008de8:	10000035 	stwio	zero,0(r2)
 2008dec:	00000206 	br	2008df8 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 2008df0:	00bf0004 	movi	r2,-1024
 2008df4:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2008df8:	e0bff717 	ldw	r2,-36(fp)
 2008dfc:	1080200c 	andi	r2,r2,128
 2008e00:	1005003a 	cmpeq	r2,r2,zero
 2008e04:	103fc91e 	bne	r2,zero,2008d2c <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2008e08:	e0bffc17 	ldw	r2,-16(fp)
 2008e0c:	10800037 	ldwio	r2,0(r2)
 2008e10:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 2008e14:	e0bff817 	ldw	r2,-32(fp)
 2008e18:	1005003a 	cmpeq	r2,r2,zero
 2008e1c:	1000041e 	bne	r2,zero,2008e30 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 2008e20:	e0bff817 	ldw	r2,-32(fp)
 2008e24:	10bfffc4 	addi	r2,r2,-1
 2008e28:	e0bff815 	stw	r2,-32(fp)
 2008e2c:	00000706 	br	2008e4c <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 2008e30:	e0bff517 	ldw	r2,-44(fp)
 2008e34:	1007883a 	mov	r3,r2
 2008e38:	e0800217 	ldw	r2,8(fp)
 2008e3c:	10c00005 	stb	r3,0(r2)
 2008e40:	e0800217 	ldw	r2,8(fp)
 2008e44:	10800044 	addi	r2,r2,1
 2008e48:	e0800215 	stw	r2,8(fp)
      credits++;
 2008e4c:	e0bff617 	ldw	r2,-40(fp)
 2008e50:	10800044 	addi	r2,r2,1
 2008e54:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 2008e58:	e0bff817 	ldw	r2,-32(fp)
 2008e5c:	1004c03a 	cmpne	r2,r2,zero
 2008e60:	103fb21e 	bne	r2,zero,2008d2c <alt_avalon_spi_command+0xa0>
 2008e64:	e0c00217 	ldw	r3,8(fp)
 2008e68:	e0bffa17 	ldw	r2,-24(fp)
 2008e6c:	18800126 	beq	r3,r2,2008e74 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 2008e70:	003fae06 	br	2008d2c <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2008e74:	e0bffc17 	ldw	r2,-16(fp)
 2008e78:	10800204 	addi	r2,r2,8
 2008e7c:	10800037 	ldwio	r2,0(r2)
 2008e80:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2008e84:	e0bff717 	ldw	r2,-36(fp)
 2008e88:	1080080c 	andi	r2,r2,32
 2008e8c:	1005003a 	cmpeq	r2,r2,zero
 2008e90:	103ff81e 	bne	r2,zero,2008e74 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2008e94:	e0800317 	ldw	r2,12(fp)
 2008e98:	1080004c 	andi	r2,r2,1
 2008e9c:	1004c03a 	cmpne	r2,r2,zero
 2008ea0:	1000031e 	bne	r2,zero,2008eb0 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2008ea4:	e0bffc17 	ldw	r2,-16(fp)
 2008ea8:	10800304 	addi	r2,r2,12
 2008eac:	10000035 	stwio	zero,0(r2)

  return read_length;
 2008eb0:	e0800117 	ldw	r2,4(fp)
}
 2008eb4:	e037883a 	mov	sp,fp
 2008eb8:	df000017 	ldw	fp,0(sp)
 2008ebc:	dec00104 	addi	sp,sp,4
 2008ec0:	f800283a 	ret

02008ec4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2008ec4:	defff904 	addi	sp,sp,-28
 2008ec8:	dfc00615 	stw	ra,24(sp)
 2008ecc:	df000515 	stw	fp,20(sp)
 2008ed0:	df000504 	addi	fp,sp,20
 2008ed4:	e13ffd15 	stw	r4,-12(fp)
 2008ed8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2008edc:	e0bffe17 	ldw	r2,-8(fp)
 2008ee0:	10800017 	ldw	r2,0(r2)
 2008ee4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2008ee8:	e13ffd17 	ldw	r4,-12(fp)
 2008eec:	20092900 	call	2009290 <strlen>
 2008ef0:	10800044 	addi	r2,r2,1
 2008ef4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2008ef8:	00000d06 	br	2008f30 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2008efc:	e0bffc17 	ldw	r2,-16(fp)
 2008f00:	11000217 	ldw	r4,8(r2)
 2008f04:	e1bffb17 	ldw	r6,-20(fp)
 2008f08:	e17ffd17 	ldw	r5,-12(fp)
 2008f0c:	200917c0 	call	200917c <memcmp>
 2008f10:	1004c03a 	cmpne	r2,r2,zero
 2008f14:	1000031e 	bne	r2,zero,2008f24 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2008f18:	e0bffc17 	ldw	r2,-16(fp)
 2008f1c:	e0bfff15 	stw	r2,-4(fp)
 2008f20:	00000706 	br	2008f40 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2008f24:	e0bffc17 	ldw	r2,-16(fp)
 2008f28:	10800017 	ldw	r2,0(r2)
 2008f2c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2008f30:	e0fffe17 	ldw	r3,-8(fp)
 2008f34:	e0bffc17 	ldw	r2,-16(fp)
 2008f38:	10fff01e 	bne	r2,r3,2008efc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2008f3c:	e03fff15 	stw	zero,-4(fp)
 2008f40:	e0bfff17 	ldw	r2,-4(fp)
}
 2008f44:	e037883a 	mov	sp,fp
 2008f48:	dfc00117 	ldw	ra,4(sp)
 2008f4c:	df000017 	ldw	fp,0(sp)
 2008f50:	dec00204 	addi	sp,sp,8
 2008f54:	f800283a 	ret

02008f58 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2008f58:	defffa04 	addi	sp,sp,-24
 2008f5c:	dfc00515 	stw	ra,20(sp)
 2008f60:	df000415 	stw	fp,16(sp)
 2008f64:	df000404 	addi	fp,sp,16
 2008f68:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2008f6c:	00808074 	movhi	r2,513
 2008f70:	10ad6d04 	addi	r2,r2,-19020
 2008f74:	10800017 	ldw	r2,0(r2)
 2008f78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2008f7c:	00003306 	br	200904c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 2008f80:	e0bffd17 	ldw	r2,-12(fp)
 2008f84:	11000217 	ldw	r4,8(r2)
 2008f88:	20092900 	call	2009290 <strlen>
 2008f8c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2008f90:	e0bffd17 	ldw	r2,-12(fp)
 2008f94:	10c00217 	ldw	r3,8(r2)
 2008f98:	e0bffc17 	ldw	r2,-16(fp)
 2008f9c:	1885883a 	add	r2,r3,r2
 2008fa0:	10bfffc4 	addi	r2,r2,-1
 2008fa4:	10800003 	ldbu	r2,0(r2)
 2008fa8:	10803fcc 	andi	r2,r2,255
 2008fac:	1080201c 	xori	r2,r2,128
 2008fb0:	10bfe004 	addi	r2,r2,-128
 2008fb4:	10800bd8 	cmpnei	r2,r2,47
 2008fb8:	1000031e 	bne	r2,zero,2008fc8 <alt_find_file+0x70>
    {
      len -= 1;
 2008fbc:	e0bffc17 	ldw	r2,-16(fp)
 2008fc0:	10bfffc4 	addi	r2,r2,-1
 2008fc4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2008fc8:	e0bffc17 	ldw	r2,-16(fp)
 2008fcc:	1007883a 	mov	r3,r2
 2008fd0:	e0bffe17 	ldw	r2,-8(fp)
 2008fd4:	1885883a 	add	r2,r3,r2
 2008fd8:	10800003 	ldbu	r2,0(r2)
 2008fdc:	10803fcc 	andi	r2,r2,255
 2008fe0:	1080201c 	xori	r2,r2,128
 2008fe4:	10bfe004 	addi	r2,r2,-128
 2008fe8:	10800be0 	cmpeqi	r2,r2,47
 2008fec:	10000a1e 	bne	r2,zero,2009018 <alt_find_file+0xc0>
 2008ff0:	e0bffc17 	ldw	r2,-16(fp)
 2008ff4:	1007883a 	mov	r3,r2
 2008ff8:	e0bffe17 	ldw	r2,-8(fp)
 2008ffc:	1885883a 	add	r2,r3,r2
 2009000:	10800003 	ldbu	r2,0(r2)
 2009004:	10803fcc 	andi	r2,r2,255
 2009008:	1080201c 	xori	r2,r2,128
 200900c:	10bfe004 	addi	r2,r2,-128
 2009010:	1004c03a 	cmpne	r2,r2,zero
 2009014:	10000a1e 	bne	r2,zero,2009040 <alt_find_file+0xe8>
 2009018:	e0bffd17 	ldw	r2,-12(fp)
 200901c:	11000217 	ldw	r4,8(r2)
 2009020:	e1bffc17 	ldw	r6,-16(fp)
 2009024:	e17ffe17 	ldw	r5,-8(fp)
 2009028:	200917c0 	call	200917c <memcmp>
 200902c:	1004c03a 	cmpne	r2,r2,zero
 2009030:	1000031e 	bne	r2,zero,2009040 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2009034:	e0bffd17 	ldw	r2,-12(fp)
 2009038:	e0bfff15 	stw	r2,-4(fp)
 200903c:	00000806 	br	2009060 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 2009040:	e0bffd17 	ldw	r2,-12(fp)
 2009044:	10800017 	ldw	r2,0(r2)
 2009048:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200904c:	00c08074 	movhi	r3,513
 2009050:	18ed6d04 	addi	r3,r3,-19020
 2009054:	e0bffd17 	ldw	r2,-12(fp)
 2009058:	10ffc91e 	bne	r2,r3,2008f80 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200905c:	e03fff15 	stw	zero,-4(fp)
 2009060:	e0bfff17 	ldw	r2,-4(fp)
}
 2009064:	e037883a 	mov	sp,fp
 2009068:	dfc00117 	ldw	ra,4(sp)
 200906c:	df000017 	ldw	fp,0(sp)
 2009070:	dec00204 	addi	sp,sp,8
 2009074:	f800283a 	ret

02009078 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2009078:	defffc04 	addi	sp,sp,-16
 200907c:	df000315 	stw	fp,12(sp)
 2009080:	df000304 	addi	fp,sp,12
 2009084:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2009088:	00bffa04 	movi	r2,-24
 200908c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2009090:	e03ffe15 	stw	zero,-8(fp)
 2009094:	00001e06 	br	2009110 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 2009098:	e0bffe17 	ldw	r2,-8(fp)
 200909c:	00c08074 	movhi	r3,513
 20090a0:	18ed0a04 	addi	r3,r3,-19416
 20090a4:	10800324 	muli	r2,r2,12
 20090a8:	10c5883a 	add	r2,r2,r3
 20090ac:	10800017 	ldw	r2,0(r2)
 20090b0:	1004c03a 	cmpne	r2,r2,zero
 20090b4:	1000131e 	bne	r2,zero,2009104 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 20090b8:	e0bffe17 	ldw	r2,-8(fp)
 20090bc:	00c08074 	movhi	r3,513
 20090c0:	18ed0a04 	addi	r3,r3,-19416
 20090c4:	10800324 	muli	r2,r2,12
 20090c8:	10c7883a 	add	r3,r2,r3
 20090cc:	e0bfff17 	ldw	r2,-4(fp)
 20090d0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 20090d4:	00808074 	movhi	r2,513
 20090d8:	10ad7104 	addi	r2,r2,-19004
 20090dc:	10c00017 	ldw	r3,0(r2)
 20090e0:	e0bffe17 	ldw	r2,-8(fp)
 20090e4:	1880040e 	bge	r3,r2,20090f8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 20090e8:	00c08074 	movhi	r3,513
 20090ec:	18ed7104 	addi	r3,r3,-19004
 20090f0:	e0bffe17 	ldw	r2,-8(fp)
 20090f4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 20090f8:	e0bffe17 	ldw	r2,-8(fp)
 20090fc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2009100:	00000606 	br	200911c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2009104:	e0bffe17 	ldw	r2,-8(fp)
 2009108:	10800044 	addi	r2,r2,1
 200910c:	e0bffe15 	stw	r2,-8(fp)
 2009110:	e0bffe17 	ldw	r2,-8(fp)
 2009114:	10800810 	cmplti	r2,r2,32
 2009118:	103fdf1e 	bne	r2,zero,2009098 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 200911c:	e0bffd17 	ldw	r2,-12(fp)
}
 2009120:	e037883a 	mov	sp,fp
 2009124:	df000017 	ldw	fp,0(sp)
 2009128:	dec00104 	addi	sp,sp,4
 200912c:	f800283a 	ret

02009130 <atexit>:
 2009130:	200b883a 	mov	r5,r4
 2009134:	000d883a 	mov	r6,zero
 2009138:	0009883a 	mov	r4,zero
 200913c:	000f883a 	mov	r7,zero
 2009140:	20093041 	jmpi	2009304 <__register_exitproc>

02009144 <exit>:
 2009144:	defffe04 	addi	sp,sp,-8
 2009148:	000b883a 	mov	r5,zero
 200914c:	dc000015 	stw	r16,0(sp)
 2009150:	dfc00115 	stw	ra,4(sp)
 2009154:	2021883a 	mov	r16,r4
 2009158:	200943c0 	call	200943c <__call_exitprocs>
 200915c:	00808074 	movhi	r2,513
 2009160:	10ad6c04 	addi	r2,r2,-19024
 2009164:	11000017 	ldw	r4,0(r2)
 2009168:	20800f17 	ldw	r2,60(r4)
 200916c:	10000126 	beq	r2,zero,2009174 <exit+0x30>
 2009170:	103ee83a 	callr	r2
 2009174:	8009883a 	mov	r4,r16
 2009178:	200962c0 	call	200962c <_exit>

0200917c <memcmp>:
 200917c:	00c000c4 	movi	r3,3
 2009180:	1980032e 	bgeu	r3,r6,2009190 <memcmp+0x14>
 2009184:	2144b03a 	or	r2,r4,r5
 2009188:	10c4703a 	and	r2,r2,r3
 200918c:	10000f26 	beq	r2,zero,20091cc <memcmp+0x50>
 2009190:	31ffffc4 	addi	r7,r6,-1
 2009194:	3000061e 	bne	r6,zero,20091b0 <memcmp+0x34>
 2009198:	00000a06 	br	20091c4 <memcmp+0x48>
 200919c:	39ffffc4 	addi	r7,r7,-1
 20091a0:	00bfffc4 	movi	r2,-1
 20091a4:	21000044 	addi	r4,r4,1
 20091a8:	29400044 	addi	r5,r5,1
 20091ac:	38800526 	beq	r7,r2,20091c4 <memcmp+0x48>
 20091b0:	20c00003 	ldbu	r3,0(r4)
 20091b4:	28800003 	ldbu	r2,0(r5)
 20091b8:	18bff826 	beq	r3,r2,200919c <memcmp+0x20>
 20091bc:	1885c83a 	sub	r2,r3,r2
 20091c0:	f800283a 	ret
 20091c4:	0005883a 	mov	r2,zero
 20091c8:	f800283a 	ret
 20091cc:	180f883a 	mov	r7,r3
 20091d0:	20c00017 	ldw	r3,0(r4)
 20091d4:	28800017 	ldw	r2,0(r5)
 20091d8:	18bfed1e 	bne	r3,r2,2009190 <memcmp+0x14>
 20091dc:	31bfff04 	addi	r6,r6,-4
 20091e0:	21000104 	addi	r4,r4,4
 20091e4:	29400104 	addi	r5,r5,4
 20091e8:	39bff936 	bltu	r7,r6,20091d0 <memcmp+0x54>
 20091ec:	003fe806 	br	2009190 <memcmp+0x14>

020091f0 <memcpy>:
 20091f0:	01c003c4 	movi	r7,15
 20091f4:	2007883a 	mov	r3,r4
 20091f8:	3980032e 	bgeu	r7,r6,2009208 <memcpy+0x18>
 20091fc:	2904b03a 	or	r2,r5,r4
 2009200:	108000cc 	andi	r2,r2,3
 2009204:	10000926 	beq	r2,zero,200922c <memcpy+0x3c>
 2009208:	30000626 	beq	r6,zero,2009224 <memcpy+0x34>
 200920c:	30cd883a 	add	r6,r6,r3
 2009210:	28800003 	ldbu	r2,0(r5)
 2009214:	29400044 	addi	r5,r5,1
 2009218:	18800005 	stb	r2,0(r3)
 200921c:	18c00044 	addi	r3,r3,1
 2009220:	30fffb1e 	bne	r6,r3,2009210 <memcpy+0x20>
 2009224:	2005883a 	mov	r2,r4
 2009228:	f800283a 	ret
 200922c:	3811883a 	mov	r8,r7
 2009230:	200f883a 	mov	r7,r4
 2009234:	28c00017 	ldw	r3,0(r5)
 2009238:	31bffc04 	addi	r6,r6,-16
 200923c:	38c00015 	stw	r3,0(r7)
 2009240:	28800117 	ldw	r2,4(r5)
 2009244:	38800115 	stw	r2,4(r7)
 2009248:	28c00217 	ldw	r3,8(r5)
 200924c:	38c00215 	stw	r3,8(r7)
 2009250:	28800317 	ldw	r2,12(r5)
 2009254:	29400404 	addi	r5,r5,16
 2009258:	38800315 	stw	r2,12(r7)
 200925c:	39c00404 	addi	r7,r7,16
 2009260:	41bff436 	bltu	r8,r6,2009234 <memcpy+0x44>
 2009264:	008000c4 	movi	r2,3
 2009268:	1180072e 	bgeu	r2,r6,2009288 <memcpy+0x98>
 200926c:	1007883a 	mov	r3,r2
 2009270:	28800017 	ldw	r2,0(r5)
 2009274:	31bfff04 	addi	r6,r6,-4
 2009278:	29400104 	addi	r5,r5,4
 200927c:	38800015 	stw	r2,0(r7)
 2009280:	39c00104 	addi	r7,r7,4
 2009284:	19bffa36 	bltu	r3,r6,2009270 <memcpy+0x80>
 2009288:	3807883a 	mov	r3,r7
 200928c:	003fde06 	br	2009208 <memcpy+0x18>

02009290 <strlen>:
 2009290:	208000cc 	andi	r2,r4,3
 2009294:	2011883a 	mov	r8,r4
 2009298:	1000161e 	bne	r2,zero,20092f4 <strlen+0x64>
 200929c:	20c00017 	ldw	r3,0(r4)
 20092a0:	017fbff4 	movhi	r5,65279
 20092a4:	297fbfc4 	addi	r5,r5,-257
 20092a8:	01e02074 	movhi	r7,32897
 20092ac:	39e02004 	addi	r7,r7,-32640
 20092b0:	1945883a 	add	r2,r3,r5
 20092b4:	11c4703a 	and	r2,r2,r7
 20092b8:	00c6303a 	nor	r3,zero,r3
 20092bc:	1886703a 	and	r3,r3,r2
 20092c0:	18000c1e 	bne	r3,zero,20092f4 <strlen+0x64>
 20092c4:	280d883a 	mov	r6,r5
 20092c8:	380b883a 	mov	r5,r7
 20092cc:	21000104 	addi	r4,r4,4
 20092d0:	20800017 	ldw	r2,0(r4)
 20092d4:	1187883a 	add	r3,r2,r6
 20092d8:	1946703a 	and	r3,r3,r5
 20092dc:	0084303a 	nor	r2,zero,r2
 20092e0:	10c4703a 	and	r2,r2,r3
 20092e4:	103ff926 	beq	r2,zero,20092cc <strlen+0x3c>
 20092e8:	20800007 	ldb	r2,0(r4)
 20092ec:	10000326 	beq	r2,zero,20092fc <strlen+0x6c>
 20092f0:	21000044 	addi	r4,r4,1
 20092f4:	20800007 	ldb	r2,0(r4)
 20092f8:	103ffd1e 	bne	r2,zero,20092f0 <strlen+0x60>
 20092fc:	2205c83a 	sub	r2,r4,r8
 2009300:	f800283a 	ret

02009304 <__register_exitproc>:
 2009304:	defffa04 	addi	sp,sp,-24
 2009308:	00808074 	movhi	r2,513
 200930c:	10ad6c04 	addi	r2,r2,-19024
 2009310:	dc000015 	stw	r16,0(sp)
 2009314:	14000017 	ldw	r16,0(r2)
 2009318:	dd000415 	stw	r20,16(sp)
 200931c:	2829883a 	mov	r20,r5
 2009320:	81405217 	ldw	r5,328(r16)
 2009324:	dcc00315 	stw	r19,12(sp)
 2009328:	dc800215 	stw	r18,8(sp)
 200932c:	dc400115 	stw	r17,4(sp)
 2009330:	dfc00515 	stw	ra,20(sp)
 2009334:	2023883a 	mov	r17,r4
 2009338:	3027883a 	mov	r19,r6
 200933c:	3825883a 	mov	r18,r7
 2009340:	28002526 	beq	r5,zero,20093d8 <__register_exitproc+0xd4>
 2009344:	29000117 	ldw	r4,4(r5)
 2009348:	008007c4 	movi	r2,31
 200934c:	11002716 	blt	r2,r4,20093ec <__register_exitproc+0xe8>
 2009350:	8800101e 	bne	r17,zero,2009394 <__register_exitproc+0x90>
 2009354:	2105883a 	add	r2,r4,r4
 2009358:	1085883a 	add	r2,r2,r2
 200935c:	20c00044 	addi	r3,r4,1
 2009360:	1145883a 	add	r2,r2,r5
 2009364:	0009883a 	mov	r4,zero
 2009368:	15000215 	stw	r20,8(r2)
 200936c:	28c00115 	stw	r3,4(r5)
 2009370:	2005883a 	mov	r2,r4
 2009374:	dfc00517 	ldw	ra,20(sp)
 2009378:	dd000417 	ldw	r20,16(sp)
 200937c:	dcc00317 	ldw	r19,12(sp)
 2009380:	dc800217 	ldw	r18,8(sp)
 2009384:	dc400117 	ldw	r17,4(sp)
 2009388:	dc000017 	ldw	r16,0(sp)
 200938c:	dec00604 	addi	sp,sp,24
 2009390:	f800283a 	ret
 2009394:	29802204 	addi	r6,r5,136
 2009398:	00800044 	movi	r2,1
 200939c:	110e983a 	sll	r7,r2,r4
 20093a0:	30c04017 	ldw	r3,256(r6)
 20093a4:	2105883a 	add	r2,r4,r4
 20093a8:	1085883a 	add	r2,r2,r2
 20093ac:	1185883a 	add	r2,r2,r6
 20093b0:	19c6b03a 	or	r3,r3,r7
 20093b4:	14802015 	stw	r18,128(r2)
 20093b8:	14c00015 	stw	r19,0(r2)
 20093bc:	00800084 	movi	r2,2
 20093c0:	30c04015 	stw	r3,256(r6)
 20093c4:	88bfe31e 	bne	r17,r2,2009354 <__register_exitproc+0x50>
 20093c8:	30804117 	ldw	r2,260(r6)
 20093cc:	11c4b03a 	or	r2,r2,r7
 20093d0:	30804115 	stw	r2,260(r6)
 20093d4:	003fdf06 	br	2009354 <__register_exitproc+0x50>
 20093d8:	00808074 	movhi	r2,513
 20093dc:	10ada304 	addi	r2,r2,-18804
 20093e0:	100b883a 	mov	r5,r2
 20093e4:	80805215 	stw	r2,328(r16)
 20093e8:	003fd606 	br	2009344 <__register_exitproc+0x40>
 20093ec:	00800034 	movhi	r2,0
 20093f0:	10800004 	addi	r2,r2,0
 20093f4:	1000021e 	bne	r2,zero,2009400 <__register_exitproc+0xfc>
 20093f8:	013fffc4 	movi	r4,-1
 20093fc:	003fdc06 	br	2009370 <__register_exitproc+0x6c>
 2009400:	01006404 	movi	r4,400
 2009404:	103ee83a 	callr	r2
 2009408:	1007883a 	mov	r3,r2
 200940c:	103ffa26 	beq	r2,zero,20093f8 <__register_exitproc+0xf4>
 2009410:	80805217 	ldw	r2,328(r16)
 2009414:	180b883a 	mov	r5,r3
 2009418:	18000115 	stw	zero,4(r3)
 200941c:	18800015 	stw	r2,0(r3)
 2009420:	80c05215 	stw	r3,328(r16)
 2009424:	18006215 	stw	zero,392(r3)
 2009428:	18006315 	stw	zero,396(r3)
 200942c:	0009883a 	mov	r4,zero
 2009430:	883fc826 	beq	r17,zero,2009354 <__register_exitproc+0x50>
 2009434:	003fd706 	br	2009394 <__register_exitproc+0x90>

02009438 <register_fini>:
 2009438:	f800283a 	ret

0200943c <__call_exitprocs>:
 200943c:	00808074 	movhi	r2,513
 2009440:	10ad6c04 	addi	r2,r2,-19024
 2009444:	10800017 	ldw	r2,0(r2)
 2009448:	defff304 	addi	sp,sp,-52
 200944c:	df000b15 	stw	fp,44(sp)
 2009450:	d8800115 	stw	r2,4(sp)
 2009454:	00800034 	movhi	r2,0
 2009458:	10800004 	addi	r2,r2,0
 200945c:	1005003a 	cmpeq	r2,r2,zero
 2009460:	d8800215 	stw	r2,8(sp)
 2009464:	d8800117 	ldw	r2,4(sp)
 2009468:	dd400815 	stw	r21,32(sp)
 200946c:	dd000715 	stw	r20,28(sp)
 2009470:	10805204 	addi	r2,r2,328
 2009474:	dfc00c15 	stw	ra,48(sp)
 2009478:	ddc00a15 	stw	r23,40(sp)
 200947c:	dd800915 	stw	r22,36(sp)
 2009480:	dcc00615 	stw	r19,24(sp)
 2009484:	dc800515 	stw	r18,20(sp)
 2009488:	dc400415 	stw	r17,16(sp)
 200948c:	dc000315 	stw	r16,12(sp)
 2009490:	282b883a 	mov	r21,r5
 2009494:	2039883a 	mov	fp,r4
 2009498:	d8800015 	stw	r2,0(sp)
 200949c:	2829003a 	cmpeq	r20,r5,zero
 20094a0:	d8800117 	ldw	r2,4(sp)
 20094a4:	14405217 	ldw	r17,328(r2)
 20094a8:	88001026 	beq	r17,zero,20094ec <__call_exitprocs+0xb0>
 20094ac:	ddc00017 	ldw	r23,0(sp)
 20094b0:	88800117 	ldw	r2,4(r17)
 20094b4:	8c802204 	addi	r18,r17,136
 20094b8:	143fffc4 	addi	r16,r2,-1
 20094bc:	80000916 	blt	r16,zero,20094e4 <__call_exitprocs+0xa8>
 20094c0:	05bfffc4 	movi	r22,-1
 20094c4:	a000151e 	bne	r20,zero,200951c <__call_exitprocs+0xe0>
 20094c8:	8409883a 	add	r4,r16,r16
 20094cc:	2105883a 	add	r2,r4,r4
 20094d0:	1485883a 	add	r2,r2,r18
 20094d4:	10c02017 	ldw	r3,128(r2)
 20094d8:	a8c01126 	beq	r21,r3,2009520 <__call_exitprocs+0xe4>
 20094dc:	843fffc4 	addi	r16,r16,-1
 20094e0:	85bff81e 	bne	r16,r22,20094c4 <__call_exitprocs+0x88>
 20094e4:	d8800217 	ldw	r2,8(sp)
 20094e8:	10003126 	beq	r2,zero,20095b0 <__call_exitprocs+0x174>
 20094ec:	dfc00c17 	ldw	ra,48(sp)
 20094f0:	df000b17 	ldw	fp,44(sp)
 20094f4:	ddc00a17 	ldw	r23,40(sp)
 20094f8:	dd800917 	ldw	r22,36(sp)
 20094fc:	dd400817 	ldw	r21,32(sp)
 2009500:	dd000717 	ldw	r20,28(sp)
 2009504:	dcc00617 	ldw	r19,24(sp)
 2009508:	dc800517 	ldw	r18,20(sp)
 200950c:	dc400417 	ldw	r17,16(sp)
 2009510:	dc000317 	ldw	r16,12(sp)
 2009514:	dec00d04 	addi	sp,sp,52
 2009518:	f800283a 	ret
 200951c:	8409883a 	add	r4,r16,r16
 2009520:	88c00117 	ldw	r3,4(r17)
 2009524:	2105883a 	add	r2,r4,r4
 2009528:	1445883a 	add	r2,r2,r17
 200952c:	18ffffc4 	addi	r3,r3,-1
 2009530:	11800217 	ldw	r6,8(r2)
 2009534:	1c001526 	beq	r3,r16,200958c <__call_exitprocs+0x150>
 2009538:	10000215 	stw	zero,8(r2)
 200953c:	303fe726 	beq	r6,zero,20094dc <__call_exitprocs+0xa0>
 2009540:	00c00044 	movi	r3,1
 2009544:	1c06983a 	sll	r3,r3,r16
 2009548:	90804017 	ldw	r2,256(r18)
 200954c:	8cc00117 	ldw	r19,4(r17)
 2009550:	1884703a 	and	r2,r3,r2
 2009554:	10001426 	beq	r2,zero,20095a8 <__call_exitprocs+0x16c>
 2009558:	90804117 	ldw	r2,260(r18)
 200955c:	1884703a 	and	r2,r3,r2
 2009560:	10000c1e 	bne	r2,zero,2009594 <__call_exitprocs+0x158>
 2009564:	2105883a 	add	r2,r4,r4
 2009568:	1485883a 	add	r2,r2,r18
 200956c:	11400017 	ldw	r5,0(r2)
 2009570:	e009883a 	mov	r4,fp
 2009574:	303ee83a 	callr	r6
 2009578:	88800117 	ldw	r2,4(r17)
 200957c:	98bfc81e 	bne	r19,r2,20094a0 <__call_exitprocs+0x64>
 2009580:	b8800017 	ldw	r2,0(r23)
 2009584:	147fd526 	beq	r2,r17,20094dc <__call_exitprocs+0xa0>
 2009588:	003fc506 	br	20094a0 <__call_exitprocs+0x64>
 200958c:	8c000115 	stw	r16,4(r17)
 2009590:	003fea06 	br	200953c <__call_exitprocs+0x100>
 2009594:	2105883a 	add	r2,r4,r4
 2009598:	1485883a 	add	r2,r2,r18
 200959c:	11000017 	ldw	r4,0(r2)
 20095a0:	303ee83a 	callr	r6
 20095a4:	003ff406 	br	2009578 <__call_exitprocs+0x13c>
 20095a8:	303ee83a 	callr	r6
 20095ac:	003ff206 	br	2009578 <__call_exitprocs+0x13c>
 20095b0:	88800117 	ldw	r2,4(r17)
 20095b4:	1000081e 	bne	r2,zero,20095d8 <__call_exitprocs+0x19c>
 20095b8:	89000017 	ldw	r4,0(r17)
 20095bc:	20000726 	beq	r4,zero,20095dc <__call_exitprocs+0x1a0>
 20095c0:	b9000015 	stw	r4,0(r23)
 20095c4:	8809883a 	mov	r4,r17
 20095c8:	00000000 	call	0 <_start-0x2000000>
 20095cc:	bc400017 	ldw	r17,0(r23)
 20095d0:	883fb71e 	bne	r17,zero,20094b0 <__call_exitprocs+0x74>
 20095d4:	003fc506 	br	20094ec <__call_exitprocs+0xb0>
 20095d8:	89000017 	ldw	r4,0(r17)
 20095dc:	882f883a 	mov	r23,r17
 20095e0:	2023883a 	mov	r17,r4
 20095e4:	883fb21e 	bne	r17,zero,20094b0 <__call_exitprocs+0x74>
 20095e8:	003fc006 	br	20094ec <__call_exitprocs+0xb0>

020095ec <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 20095ec:	defffd04 	addi	sp,sp,-12
 20095f0:	df000215 	stw	fp,8(sp)
 20095f4:	df000204 	addi	fp,sp,8
 20095f8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 20095fc:	e0bfff17 	ldw	r2,-4(fp)
 2009600:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2009604:	e0bffe17 	ldw	r2,-8(fp)
 2009608:	1005003a 	cmpeq	r2,r2,zero
 200960c:	1000021e 	bne	r2,zero,2009618 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 2009610:	002af070 	cmpltui	zero,zero,43969
 2009614:	00000106 	br	200961c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 2009618:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 200961c:	e037883a 	mov	sp,fp
 2009620:	df000017 	ldw	fp,0(sp)
 2009624:	dec00104 	addi	sp,sp,4
 2009628:	f800283a 	ret

0200962c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 200962c:	defffd04 	addi	sp,sp,-12
 2009630:	dfc00215 	stw	ra,8(sp)
 2009634:	df000115 	stw	fp,4(sp)
 2009638:	df000104 	addi	fp,sp,4
 200963c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2009640:	e13fff17 	ldw	r4,-4(fp)
 2009644:	20095ec0 	call	20095ec <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2009648:	003fff06 	br	2009648 <_exit+0x1c>
 200964c:	02009438 	rdprs	r8,zero,592
