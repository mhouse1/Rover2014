
testuart.elf:     file format elf32-littlenios2
testuart.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000000

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x000085dc memsz 0x00008814 flags rwx
    LOAD off    0x00009800 vaddr 0x04004800 paddr 0x04004800 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04004800  04004800  00009800  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000068cc  02000000  02000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  020068cc  020068cc  000078cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00001c74  02006968  02006968  00007968  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000238  020085dc  020085dc  000095dc  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00009800  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000008e0  00000000  00000000  00009828  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000f5d  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001c1d3  00000000  00000000  0000b065  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000054f3  00000000  00000000  00027238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000cf53  00000000  00000000  0002c72b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000012fc  00000000  00000000  00039680  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000015a0  00000000  00000000  0003a97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000035c0  00000000  00000000  0003bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0003f4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000148  00000000  00000000  0003f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00041ed9  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00041edc  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00041edf  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00041ee0  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00041ee1  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00041ee5  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00041ee9  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00041eed  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00041ef6  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00041eff  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  00041f08  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000039  00000000  00000000  00041f0f  2**0
                  CONTENTS, READONLY
 28 .jdi          00004972  00000000  00000000  00041f48  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04004800 l    d  .entry	00000000 .entry
02000000 l    d  .text	00000000 .text
020068cc l    d  .rodata	00000000 .rodata
02006968 l    d  .rwdata	00000000 .rwdata
020085dc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0200008c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02006968 l     O .rwdata	0000009c vic_0
02006a04 l     O .rwdata	000000c4 epcs_flash_controller
02006ac8 l     O .rwdata	00001060 jtag_uart
02007b28 l     O .rwdata	000000c4 uart
0200053c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
02000600 l     F .text	000001ec alt_epcs_flash_query
020005c8 l     F .text	00000038 alt_flash_device_register
020007ec l     F .text	00000108 alt_epcs_flash_memcmp
02000c78 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
020010b0 l     F .text	00000228 altera_avalon_jtag_uart_irq
020012d8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
020019ac l     F .text	0000009c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
02001c98 l     F .text	0000009c altera_avalon_uart_irq
02001d34 l     F .text	000000e0 altera_avalon_uart_rxirq
02001e14 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
02002258 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
020024d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
02006938 l     O .rodata	00000020 VEC_SIZE_ARRAY.1587
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 epcs_commands.c
0200297c l     F .text	00000038 epcs_await_wip_released
020029b4 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
02002f7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02002fdc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
020030bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
020032b4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
020033f0 l     F .text	000000dc alt_file_locked
02003654 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
02007d94 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02004504 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
020048e8 l     F .text	00000058 std
020049f4 l     F .text	00000008 __fp_lock
020049fc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
02006070 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
020061a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
020062c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
02006414 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
020065d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
020085d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02006868 l     F .text	00000060 alt_get_errno
02000b74 g     F .text	00000090 alt_epcs_flash_get_info
02005f10 g     F .text	00000070 _isatty_r
02000170 g     F .text	0000006c alt_main
02005f80 g     F .text	00000078 _lseek_r
02008814 g       *ABS*	00000000 __alt_heap_start
02005b4c g     F .text	00000068 __sseek
02004950 g     F .text	000000a4 __sinit
02004148 g     F .text	00000130 __swbuf_r
02004a50 g     F .text	00000068 __sfmoreglue
02006494 g     F .text	00000020 __malloc_unlock
02004a40 g     F .text	00000010 _cleanup
020085e0 g     O .bss	00000004 n
00000000  w      *UND*	00000000 __errno
02002900 g     F .text	0000007c epcs_sector_erase
04004800 g     F .entry	00000000 __reset
02005e9c g     F .text	00000074 _fstat_r
0200860c g     O .bss	00000004 errno
020085e4 g     O .bss	00000004 rx_cnt
020085f8 g     O .bss	00000004 alt_argv
0201059c g       *ABS*	00000000 _gp
02007c14 g     O .rwdata	00000180 alt_fd_list
02002af0 g     F .text	00000064 epcs_write_status_register
02002538 g       .text	00000000 VIC_0_VECTOR_TABLE
02003b1c g     F .text	00000094 alt_find_dev
02003e48 g     F .text	000000a0 memcpy
02004a34 g     F .text	0000000c _cleanup_r
02003378 g     F .text	00000078 alt_io_redirect
020068cc g       *ABS*	00000000 __DTOR_END__
02000d0c g     F .text	00000110 alt_epcs_flash_write_block
020014f0 g     F .text	00000250 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02006204 g     F .text	000000c0 isatty
02008610 g     O .bss	00000004 __malloc_top_pad
02005ad4 g     F .text	00000070 _sbrk_r
02005ff8 g     F .text	00000078 _read_r
020085b0 g     O .rwdata	00000004 alt_max_fd
02005d78 g     F .text	00000110 _fclose_r
020048b4 g     F .text	00000034 fflush
02008614 g     O .bss	00000004 __malloc_max_sbrked_mem
02000c04 g     F .text	00000074 alt_epcs_flash_erase_block
02006324 g     F .text	000000f0 lseek
020085cc g     O .rwdata	00000004 _global_impure_ptr
02008814 g       *ABS*	00000000 __bss_end
020037d8 g     F .text	0000010c alt_tick
02001bd0 g     F .text	000000c8 altera_avalon_uart_init
02004a1c g     F .text	00000018 __fp_lock_all
02003714 g     F .text	000000c4 alt_alarm_stop
02007bec g     O .rwdata	00000028 alt_dev_null
020025b8 g       .text	00000000 alt_shadow_non_preemptive_interrupt
020085a8 g     O .rwdata	00000008 alt_dev_list
02006748 g     F .text	00000120 write
02003fec g     F .text	000000e8 _putc_r
020060d0 g     F .text	000000d4 fstat
0200859c g     O .rwdata	00000004 led
02002c2c g     F .text	0000006c epcs_read_electronic_signature
02008814 g       *ABS*	00000000 end
020022b8 g     F .text	00000220 altera_avalon_uart_write
02000ff0 g     F .text	000000c0 altera_avalon_jtag_uart_init
020068c8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02001a48 g     F .text	00000090 alt_avalon_timer_sc_init
02001b30 g     F .text	00000058 altera_avalon_uart_write_fd
02001b88 g     F .text	00000048 altera_avalon_uart_close_fd
02001740 g     F .text	0000026c altera_avalon_jtag_uart_write
02004940 g     F .text	00000004 __sfp_lock_acquire
02004cd4 g     F .text	00000314 _free_r
020001dc g     F .text	00000258 alt_printf
02004508 g     F .text	000001b0 __call_exitprocs
020085d4 g     O .rwdata	00000004 __malloc_sbrk_base
02000000 g     F .text	00000090 _start
02008604 g     O .bss	00000004 _alt_tick_rate
020038e4 g     F .text	00000238 alt_avalon_spi_command
02008608 g     O .bss	00000004 _alt_nticks
020064b4 g     F .text	00000120 read
020004b4 g     F .text	00000088 alt_sys_init
020043d0 g     F .text	00000134 __register_exitproc
02001388 g     F .text	00000074 altera_avalon_jtag_uart_close
0200861c g     O .bss	00000028 __malloc_current_mallinfo
020028a0 g     F .text	00000060 epcs_read_status_register
02000ea8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02003cd0 g     F .text	000000b8 alt_get_fd
02005d08 g     F .text	00000070 _close_r
02002c98 g     F .text	00000068 epcs_read_device_id
02003dd4 g     F .text	00000074 memcmp
02000f58 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02008814 g       *ABS*	00000000 __alt_stack_base
02000fa0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02004294 g     F .text	0000013c __swsetup_r
02004ab8 g     F .text	000000f0 __sfp
02008194 g     O .rwdata	00000408 __malloc_av_
0200494c g     F .text	00000004 __sinit_lock_release
04004800 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
02005c30 g     F .text	00000060 __sread
02003bb0 g     F .text	00000120 alt_find_file
02003008 g     F .text	000000b4 alt_dev_llist_insert
02006474 g     F .text	00000020 __malloc_lock
02006634 g     F .text	00000114 sbrk
020046b8 g     F .text	000001fc _fflush_r
020085b8 g     O .rwdata	00000008 alt_flash_dev_list
02008644 g     O .bss	00000040 rx_buf
020085dc g       *ABS*	00000000 __bss_start
02005a3c g     F .text	00000098 memset
020000c0 g     F .text	000000b0 main
020085fc g     O .bss	00000004 alt_envp
02008618 g     O .bss	00000004 __malloc_max_total_mem
02000f00 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02004278 g     F .text	0000001c __swbuf
02005b44 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02005e88 g     F .text	00000014 fclose
02008684 g     O .bss	00000190 _atexit0
020052fc g     F .text	00000740 _malloc_r
020085b4 g     O .rwdata	00000004 alt_errno
020050b0 g     F .text	000000b8 _fwalk
02003ee8 g     F .text	00000104 putc
02004ba8 g     F .text	0000012c _malloc_trim_r
020068cc g       *ABS*	00000000 __CTOR_END__
02008600 g     O .bss	00000004 alt_vic_dev_list
020008f4 g     F .text	00000280 alt_epcs_flash_write
02000090 g     F .text	00000030 transmit
020068cc g       *ABS*	00000000 __DTOR_LIST__
020085dc g     O .bss	00000004 count
02000474 g     F .text	00000040 alt_irq_init
020036b4 g     F .text	00000060 alt_release_fd
02003d88 g     F .text	00000014 atexit
02005c90 g     F .text	00000078 _write_r
020085c8 g     O .rwdata	00000004 _impure_ptr
020085f4 g     O .bss	00000004 alt_argc
02003180 g     F .text	00000064 _do_dtors
02000000 g       *ABS*	00000000 __alt_mem_sdram_0
020025d0 g     F .text	0000015c alt_vic_irq_init
02004a04 g     F .text	00000018 __fp_unlock_all
020085a0 g     O .rwdata	00000008 alt_fs_list
020029ec g     F .text	000000b4 epcs_read_buffer
04001000 g       *ABS*	00000000 __alt_mem_onchip_memory2
02000574 g     F .text	00000054 alt_epcs_flash_init
0200272c g     F .text	00000174 alt_ic_isr_register
020085dc g       *ABS*	00000000 _edata
02001ad8 g     F .text	00000058 altera_avalon_uart_read_fd
02008814 g       *ABS*	00000000 _end
020031e4 g     F .text	0000007c alt_flash_open_dev
020013fc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02005bb4 g     F .text	0000007c __swrite
020085d0 g     O .rwdata	00000004 __malloc_trim_threshold
02003d9c g     F .text	00000038 exit
02004fe8 g     F .text	000000c8 _fwalk_reent
02003260 g     F .text	00000054 alt_flash_close_dev
04000000 g       *ABS*	00000000 __alt_data_end
02004944 g     F .text	00000004 __sfp_lock_release
02001f70 g     F .text	00000060 altera_avalon_uart_close
020060b0 g     F .text	00000020 _exit
02002d00 g     F .text	00000180 alt_alarm_start
020085e8 g     O .bss	00000004 txd
02005168 g     F .text	00000194 __smakebuf_r
020085ec g     O .bss	00000004 ch
020040d4 g     F .text	00000074 strlen
02002aa0 g     F .text	00000050 epcs_write_enable
020034cc g     F .text	00000188 open
02000434 g     F .text	00000040 alt_putchar
02001fd0 g     F .text	00000288 altera_avalon_uart_read
02000e1c g     F .text	0000008c alt_epcs_flash_read
020085c0 g     O .rwdata	00000008 alt_alarm_list
0200311c g     F .text	00000064 _do_ctors
020085f0 g     O .bss	00000004 status
02002e80 g     F .text	000000fc close
00000000  w      *UND*	00000000 free
02004948 g     F .text	00000004 __sinit_lock_acquire
02002b54 g     F .text	000000d8 epcs_write_buffer



Disassembly of section .text:

02000000 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
 2000004:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <_start+0x4>
     * set, switch register set to 0 by writing zero to SSTATUS register and 
     * execute an ERET instruction that just jumps to the next PC address 
     * (use the NEXTPC instruction to get this).
     */
    
    rdctl r2, status
 2000010:	0005303a 	rdctl	r2,status
    
    /* Get the current register set number (STATUS.CRS). */
    andi r3, r2, NIOS2_STATUS_CRS_MSK
 2000014:	10ff000c 	andi	r3,r2,64512
    
    /* Skip switch register set if STATUS.CRS is 0.  */
    beq r3, zero, .Lskip_switch_reg_set
 2000018:	18000426 	beq	r3,zero,200002c <_start+0x2c>
    
    .set nobreak
    
    /* Current register set is non-zero, set SSTATUS to 0. */
    mov sstatus, zero
 200001c:	003d883a 	mov	r30,zero
    
    /* Get next pc and store in ea. */
    nextpc ea
 2000020:	003ae03a 	nextpc	ea
    
    /* Point to instruction after eret. */
    addi ea, ea, 8
 2000024:	ef400204 	addi	ea,ea,8
    
    /* 
     * Execute ERET instruction that just jumps to the next PC address 
     */
    eret
 2000028:	ef80083a 	eret
    
.Lskip_switch_reg_set:    
    mov r2, zero
 200002c:	0005883a 	mov	r2,zero
    
    /* Reset STATUS register */
    wrctl status, r2
 2000030:	1001703a 	wrctl	status,r2

    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS
 2000034:	00c001d4 	movui	r3,7
    
    /* Set up the stack pointer in register set 0. */
    movhi sp, %hi(__alt_stack_pointer)
 2000038:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 200003c:	dec00014 	ori	sp,sp,0
    
    /* Set up the global pointer in register set 0. */
    movhi gp, %hi(_gp)
 2000040:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)     
 2000044:	d6816714 	ori	gp,gp,1436
     * Setup GP and SP for shadow register set 
     * from NIOS2_NUM_OF_SHADOW_REG_SETS to 0
     */

    /* Skip if number of register sets is 0. */
    beq r3, zero, .Lno_shadow_register_set
 2000048:	18000726 	beq	r3,zero,2000068 <_start+0x68>


    /* Add previous register set STATUS.PRS by 1 */
    movhi r4, 1
 200004c:	01000074 	movhi	r4,1
    add r2, r2, r4
 2000050:	1105883a 	add	r2,r2,r4

    /* Write STATUS */
    wrctl status, r2
 2000054:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
 2000058:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
 200005c:	d034a03a 	wrprs	gp,gp
    wrprs sp, et

#endif /* ALT_INTERRUPT_STACK */

    /* Decrease number of register set counter by 1 */
    addi r3, r3, -1
 2000060:	18ffffc4 	addi	r3,r3,-1

    br .Lsetup_sp_and_gp_loop
 2000064:	003ff806 	br	2000048 <_start+0x48>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000068:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 200006c:	10a17714 	ori	r2,r2,34268

    movhi r3, %hi(__bss_end)
 2000070:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 2000074:	18e20514 	ori	r3,r3,34836

    beq r2, r3, 1f
 2000078:	10c00326 	beq	r2,r3,2000088 <_start+0x88>

0:
    stw zero, (r2)
 200007c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000080:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000084:	10fffd36 	bltu	r2,r3,200007c <_start+0x7c>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000088:	20001700 	call	2000170 <alt_main>

0200008c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 200008c:	003fff06 	br	200008c <alt_after_alt_main>

02000090 <transmit>:
// global variables
int count = 0,ch,n,status,txd,led=0xff;
int rx_cnt,rx_buf[16];

void transmit(alt_u8 ch)
{
 2000090:	defffe04 	addi	sp,sp,-8
 2000094:	df000115 	stw	fp,4(sp)
 2000098:	df000104 	addi	fp,sp,4
 200009c:	e13fff05 	stb	r4,-4(fp)
	//IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0x40); //tell control we want to transmit
//while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&0x40)==0x40);//wait for transmit ready status
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE,ch); //transmit the data
 20000a0:	e0ffff03 	ldbu	r3,-4(fp)
 20000a4:	00810034 	movhi	r2,1024
 20000a8:	10950904 	addi	r2,r2,21540
 20000ac:	10c00035 	stwio	r3,0(r2)
	//IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0); //turn off transmit after finish transmitting
}
 20000b0:	e037883a 	mov	sp,fp
 20000b4:	df000017 	ldw	fp,0(sp)
 20000b8:	dec00104 	addi	sp,sp,4
 20000bc:	f800283a 	ret

020000c0 <main>:
int main()
{
 20000c0:	defffe04 	addi	sp,sp,-8
 20000c4:	dfc00115 	stw	ra,4(sp)
 20000c8:	df000015 	stw	fp,0(sp)
 20000cc:	d839883a 	mov	fp,sp
alt_printf("1.Hello from Nios II!\n");
 20000d0:	01008034 	movhi	r4,512
 20000d4:	211a3304 	addi	r4,r4,26828
 20000d8:	20001dc0 	call	20001dc <alt_printf>
 20000dc:	00000006 	br	20000e0 <main+0x20>

while(1)
{ // printf("Hello from Nios II!\n");
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0);
 20000e0:	00810034 	movhi	r2,1024
 20000e4:	10950b04 	addi	r2,r2,21548
 20000e8:	10000035 	stwio	zero,0(r2)
// send 4 bytes via UART0 (with waiting 100us)
	transmit(46);
 20000ec:	01000b84 	movi	r4,46
 20000f0:	20000900 	call	2000090 <transmit>
//alt_printf("enter rx data now\n");
//for(n=0;n<1000;n++)
//{
	//usleep(1000);
//alt_printf(".");
ch = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
 20000f4:	00810034 	movhi	r2,1024
 20000f8:	10950a04 	addi	r2,r2,21544
 20000fc:	10800037 	ldwio	r2,0(r2)
 2000100:	d0a01415 	stw	r2,-32688(gp)
// if received some byte, read it
if ((ch&0x80)==0x80)
 2000104:	d0a01417 	ldw	r2,-32688(gp)
 2000108:	1080200c 	andi	r2,r2,128
 200010c:	1005003a 	cmpeq	r2,r2,zero
 2000110:	103ff31e 	bne	r2,zero,20000e0 <main+0x20>
{ ch = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
 2000114:	00810034 	movhi	r2,1024
 2000118:	10950804 	addi	r2,r2,21536
 200011c:	10800037 	ldwio	r2,0(r2)
 2000120:	d0a01415 	stw	r2,-32688(gp)
alt_printf("read\n");
 2000124:	01008034 	movhi	r4,512
 2000128:	211a3904 	addi	r4,r4,26852
 200012c:	20001dc0 	call	20001dc <alt_printf>
transmit(ch);
 2000130:	d0a01417 	ldw	r2,-32688(gp)
 2000134:	11003fcc 	andi	r4,r2,255
 2000138:	20000900 	call	2000090 <transmit>
status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
 200013c:	00810034 	movhi	r2,1024
 2000140:	10950a04 	addi	r2,r2,21544
 2000144:	10800037 	ldwio	r2,0(r2)
 2000148:	d0a01515 	stw	r2,-32684(gp)

if (!(status&0x40)==0x40){alt_printf("not active\n");}//wait for transmit ready signal
txd =  IORD_ALTERA_AVALON_UART_TXDATA(UART_BASE);
 200014c:	00810034 	movhi	r2,1024
 2000150:	10950904 	addi	r2,r2,21540
 2000154:	10800037 	ldwio	r2,0(r2)
 2000158:	d0a01315 	stw	r2,-32692(gp)
alt_printf("%c",txd);
 200015c:	d1601317 	ldw	r5,-32692(gp)
 2000160:	01008034 	movhi	r4,512
 2000164:	211a3b04 	addi	r4,r4,26860
 2000168:	20001dc0 	call	20001dc <alt_printf>
//IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE,rx_buf[n]);
//}
//alt_printf("\n");
//}

}
 200016c:	003fdc06 	br	20000e0 <main+0x20>

02000170 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2000170:	defffd04 	addi	sp,sp,-12
 2000174:	dfc00215 	stw	ra,8(sp)
 2000178:	df000115 	stw	fp,4(sp)
 200017c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2000180:	0009883a 	mov	r4,zero
 2000184:	20004740 	call	2000474 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2000188:	20004b40 	call	20004b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200018c:	01008034 	movhi	r4,512
 2000190:	211a3c04 	addi	r4,r4,26864
 2000194:	01408034 	movhi	r5,512
 2000198:	295a3c04 	addi	r5,r5,26864
 200019c:	01808034 	movhi	r6,512
 20001a0:	319a3c04 	addi	r6,r6,26864
 20001a4:	20033780 	call	2003378 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 20001a8:	200311c0 	call	200311c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 20001ac:	01008034 	movhi	r4,512
 20001b0:	210c6004 	addi	r4,r4,12672
 20001b4:	2003d880 	call	2003d88 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 20001b8:	d1201617 	ldw	r4,-32680(gp)
 20001bc:	d1601717 	ldw	r5,-32676(gp)
 20001c0:	d1a01817 	ldw	r6,-32672(gp)
 20001c4:	20000c00 	call	20000c0 <main>
 20001c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 20001cc:	01000044 	movi	r4,1
 20001d0:	2002e800 	call	2002e80 <close>
  exit (result);
 20001d4:	e13fff17 	ldw	r4,-4(fp)
 20001d8:	2003d9c0 	call	2003d9c <exit>

020001dc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 20001dc:	defff204 	addi	sp,sp,-56
 20001e0:	dfc00a15 	stw	ra,40(sp)
 20001e4:	df000915 	stw	fp,36(sp)
 20001e8:	df000904 	addi	fp,sp,36
 20001ec:	e1400215 	stw	r5,8(fp)
 20001f0:	e1800315 	stw	r6,12(fp)
 20001f4:	e1c00415 	stw	r7,16(fp)
 20001f8:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
 20001fc:	e0800204 	addi	r2,fp,8
 2000200:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 2000204:	e0bfff17 	ldw	r2,-4(fp)
 2000208:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
 200020c:	00007806 	br	20003f0 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 2000210:	e0bffc07 	ldb	r2,-16(fp)
 2000214:	10800960 	cmpeqi	r2,r2,37
 2000218:	1000031e 	bne	r2,zero,2000228 <alt_printf+0x4c>
        {
            alt_putchar(c);
 200021c:	e13ffc07 	ldb	r4,-16(fp)
 2000220:	20004340 	call	2000434 <alt_putchar>
 2000224:	00007206 	br	20003f0 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 2000228:	e0bffd17 	ldw	r2,-12(fp)
 200022c:	10800003 	ldbu	r2,0(r2)
 2000230:	e0bffc05 	stb	r2,-16(fp)
 2000234:	e0bffc07 	ldb	r2,-16(fp)
 2000238:	1004c03a 	cmpne	r2,r2,zero
 200023c:	1007883a 	mov	r3,r2
 2000240:	e0bffd17 	ldw	r2,-12(fp)
 2000244:	10800044 	addi	r2,r2,1
 2000248:	e0bffd15 	stw	r2,-12(fp)
 200024c:	18803fcc 	andi	r2,r3,255
 2000250:	1005003a 	cmpeq	r2,r2,zero
 2000254:	1000721e 	bne	r2,zero,2000420 <alt_printf+0x244>
            {
                if (c == '%')
 2000258:	e0bffc07 	ldb	r2,-16(fp)
 200025c:	10800958 	cmpnei	r2,r2,37
 2000260:	1000031e 	bne	r2,zero,2000270 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 2000264:	e13ffc07 	ldb	r4,-16(fp)
 2000268:	20004340 	call	2000434 <alt_putchar>
 200026c:	00006006 	br	20003f0 <alt_printf+0x214>
                } 
                else if (c == 'c')
 2000270:	e0bffc07 	ldb	r2,-16(fp)
 2000274:	108018d8 	cmpnei	r2,r2,99
 2000278:	1000091e 	bne	r2,zero,20002a0 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
 200027c:	e0fffe17 	ldw	r3,-8(fp)
 2000280:	18800104 	addi	r2,r3,4
 2000284:	e0bffe15 	stw	r2,-8(fp)
 2000288:	1805883a 	mov	r2,r3
 200028c:	10800017 	ldw	r2,0(r2)
 2000290:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
 2000294:	e13ffb17 	ldw	r4,-20(fp)
 2000298:	20004340 	call	2000434 <alt_putchar>
 200029c:	00005406 	br	20003f0 <alt_printf+0x214>
                }
                else if (c == 'x')
 20002a0:	e0bffc07 	ldb	r2,-16(fp)
 20002a4:	10801e18 	cmpnei	r2,r2,120
 20002a8:	1000371e 	bne	r2,zero,2000388 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 20002ac:	e0fffe17 	ldw	r3,-8(fp)
 20002b0:	18800104 	addi	r2,r3,4
 20002b4:	e0bffe15 	stw	r2,-8(fp)
 20002b8:	1805883a 	mov	r2,r3
 20002bc:	10800017 	ldw	r2,0(r2)
 20002c0:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 20002c4:	e0bffa17 	ldw	r2,-24(fp)
 20002c8:	1004c03a 	cmpne	r2,r2,zero
 20002cc:	1000031e 	bne	r2,zero,20002dc <alt_printf+0x100>
                    {
                        alt_putchar('0');
 20002d0:	01000c04 	movi	r4,48
 20002d4:	20004340 	call	2000434 <alt_putchar>
                        continue;
 20002d8:	00004506 	br	20003f0 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 20002dc:	00800704 	movi	r2,28
 20002e0:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
 20002e4:	00000306 	br	20002f4 <alt_printf+0x118>
                        digit_shift -= 4;
 20002e8:	e0bff817 	ldw	r2,-32(fp)
 20002ec:	10bfff04 	addi	r2,r2,-4
 20002f0:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 20002f4:	00c003c4 	movi	r3,15
 20002f8:	e0bff817 	ldw	r2,-32(fp)
 20002fc:	1884983a 	sll	r2,r3,r2
 2000300:	1007883a 	mov	r3,r2
 2000304:	e0bffa17 	ldw	r2,-24(fp)
 2000308:	1884703a 	and	r2,r3,r2
 200030c:	1005003a 	cmpeq	r2,r2,zero
 2000310:	103ff51e 	bne	r2,zero,20002e8 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 2000314:	00001806 	br	2000378 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 2000318:	00c003c4 	movi	r3,15
 200031c:	e0bff817 	ldw	r2,-32(fp)
 2000320:	1884983a 	sll	r2,r3,r2
 2000324:	1007883a 	mov	r3,r2
 2000328:	e0bffa17 	ldw	r2,-24(fp)
 200032c:	1886703a 	and	r3,r3,r2
 2000330:	e0bff817 	ldw	r2,-32(fp)
 2000334:	1884d83a 	srl	r2,r3,r2
 2000338:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
 200033c:	e0bff917 	ldw	r2,-28(fp)
 2000340:	108002a8 	cmpgeui	r2,r2,10
 2000344:	1000041e 	bne	r2,zero,2000358 <alt_printf+0x17c>
                            c = '0' + digit;
 2000348:	e0bff917 	ldw	r2,-28(fp)
 200034c:	10800c04 	addi	r2,r2,48
 2000350:	e0bffc05 	stb	r2,-16(fp)
 2000354:	00000306 	br	2000364 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
 2000358:	e0bff917 	ldw	r2,-28(fp)
 200035c:	108015c4 	addi	r2,r2,87
 2000360:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
 2000364:	e13ffc07 	ldb	r4,-16(fp)
 2000368:	20004340 	call	2000434 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 200036c:	e0bff817 	ldw	r2,-32(fp)
 2000370:	10bfff04 	addi	r2,r2,-4
 2000374:	e0bff815 	stw	r2,-32(fp)
 2000378:	e0bff817 	ldw	r2,-32(fp)
 200037c:	1004403a 	cmpge	r2,r2,zero
 2000380:	103fe51e 	bne	r2,zero,2000318 <alt_printf+0x13c>
 2000384:	00001a06 	br	20003f0 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 2000388:	e0bffc07 	ldb	r2,-16(fp)
 200038c:	10801cd8 	cmpnei	r2,r2,115
 2000390:	1000171e 	bne	r2,zero,20003f0 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 2000394:	e0fffe17 	ldw	r3,-8(fp)
 2000398:	18800104 	addi	r2,r3,4
 200039c:	e0bffe15 	stw	r2,-8(fp)
 20003a0:	1805883a 	mov	r2,r3
 20003a4:	10800017 	ldw	r2,0(r2)
 20003a8:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
 20003ac:	00000906 	br	20003d4 <alt_printf+0x1f8>
                      alt_putchar(*s++);
 20003b0:	e0bff717 	ldw	r2,-36(fp)
 20003b4:	10800003 	ldbu	r2,0(r2)
 20003b8:	11003fcc 	andi	r4,r2,255
 20003bc:	2100201c 	xori	r4,r4,128
 20003c0:	213fe004 	addi	r4,r4,-128
 20003c4:	e0bff717 	ldw	r2,-36(fp)
 20003c8:	10800044 	addi	r2,r2,1
 20003cc:	e0bff715 	stw	r2,-36(fp)
 20003d0:	20004340 	call	2000434 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 20003d4:	e0bff717 	ldw	r2,-36(fp)
 20003d8:	10800003 	ldbu	r2,0(r2)
 20003dc:	10803fcc 	andi	r2,r2,255
 20003e0:	1080201c 	xori	r2,r2,128
 20003e4:	10bfe004 	addi	r2,r2,-128
 20003e8:	1004c03a 	cmpne	r2,r2,zero
 20003ec:	103ff01e 	bne	r2,zero,20003b0 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 20003f0:	e0bffd17 	ldw	r2,-12(fp)
 20003f4:	10800003 	ldbu	r2,0(r2)
 20003f8:	e0bffc05 	stb	r2,-16(fp)
 20003fc:	e0bffc07 	ldb	r2,-16(fp)
 2000400:	1004c03a 	cmpne	r2,r2,zero
 2000404:	1007883a 	mov	r3,r2
 2000408:	e0bffd17 	ldw	r2,-12(fp)
 200040c:	10800044 	addi	r2,r2,1
 2000410:	e0bffd15 	stw	r2,-12(fp)
 2000414:	18803fcc 	andi	r2,r3,255
 2000418:	1004c03a 	cmpne	r2,r2,zero
 200041c:	103f7c1e 	bne	r2,zero,2000210 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
 2000420:	e037883a 	mov	sp,fp
 2000424:	dfc00117 	ldw	ra,4(sp)
 2000428:	df000017 	ldw	fp,0(sp)
 200042c:	dec00504 	addi	sp,sp,20
 2000430:	f800283a 	ret

02000434 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 2000434:	defffd04 	addi	sp,sp,-12
 2000438:	dfc00215 	stw	ra,8(sp)
 200043c:	df000115 	stw	fp,4(sp)
 2000440:	df000104 	addi	fp,sp,4
 2000444:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 2000448:	00808074 	movhi	r2,513
 200044c:	10a17204 	addi	r2,r2,-31288
 2000450:	10800017 	ldw	r2,0(r2)
 2000454:	11400217 	ldw	r5,8(r2)
 2000458:	e13fff17 	ldw	r4,-4(fp)
 200045c:	2003ee80 	call	2003ee8 <putc>
#endif
}
 2000460:	e037883a 	mov	sp,fp
 2000464:	dfc00117 	ldw	ra,4(sp)
 2000468:	df000017 	ldw	fp,0(sp)
 200046c:	dec00204 	addi	sp,sp,8
 2000470:	f800283a 	ret

02000474 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2000474:	defffd04 	addi	sp,sp,-12
 2000478:	dfc00215 	stw	ra,8(sp)
 200047c:	df000115 	stw	fp,4(sp)
 2000480:	df000104 	addi	fp,sp,4
 2000484:	e13fff15 	stw	r4,-4(fp)
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
 2000488:	01008034 	movhi	r4,512
 200048c:	211a5a04 	addi	r4,r4,26984
 2000490:	20025d00 	call	20025d0 <alt_vic_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2000494:	00802034 	movhi	r2,128
 2000498:	10800044 	addi	r2,r2,1
 200049c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20004a0:	e037883a 	mov	sp,fp
 20004a4:	dfc00117 	ldw	ra,4(sp)
 20004a8:	df000017 	ldw	fp,0(sp)
 20004ac:	dec00204 	addi	sp,sp,8
 20004b0:	f800283a 	ret

020004b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20004b4:	defffe04 	addi	sp,sp,-8
 20004b8:	dfc00115 	stw	ra,4(sp)
 20004bc:	df000015 	stw	fp,0(sp)
 20004c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 20004c4:	01010034 	movhi	r4,1024
 20004c8:	21151004 	addi	r4,r4,21568
 20004cc:	000b883a 	mov	r5,zero
 20004d0:	018000c4 	movi	r6,3
 20004d4:	01c01904 	movi	r7,100
 20004d8:	2001a480 	call	2001a48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
 20004dc:	01008034 	movhi	r4,512
 20004e0:	211a8104 	addi	r4,r4,27140
 20004e4:	20005740 	call	2000574 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 20004e8:	01008034 	movhi	r4,512
 20004ec:	211abc04 	addi	r4,r4,27376
 20004f0:	000b883a 	mov	r5,zero
 20004f4:	000d883a 	mov	r6,zero
 20004f8:	2000ff00 	call	2000ff0 <altera_avalon_jtag_uart_init>
 20004fc:	01008034 	movhi	r4,512
 2000500:	211ab204 	addi	r4,r4,27336
 2000504:	200053c0 	call	200053c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_AVALON_UART_INIT ( UART, uart);
 2000508:	01008034 	movhi	r4,512
 200050c:	211ed404 	addi	r4,r4,31568
 2000510:	000b883a 	mov	r5,zero
 2000514:	01800084 	movi	r6,2
 2000518:	2001bd00 	call	2001bd0 <altera_avalon_uart_init>
 200051c:	01008034 	movhi	r4,512
 2000520:	211eca04 	addi	r4,r4,31528
 2000524:	200053c0 	call	200053c <alt_dev_reg>
}
 2000528:	e037883a 	mov	sp,fp
 200052c:	dfc00117 	ldw	ra,4(sp)
 2000530:	df000017 	ldw	fp,0(sp)
 2000534:	dec00204 	addi	sp,sp,8
 2000538:	f800283a 	ret

0200053c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200053c:	defffd04 	addi	sp,sp,-12
 2000540:	dfc00215 	stw	ra,8(sp)
 2000544:	df000115 	stw	fp,4(sp)
 2000548:	df000104 	addi	fp,sp,4
 200054c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2000550:	e13fff17 	ldw	r4,-4(fp)
 2000554:	01408074 	movhi	r5,513
 2000558:	29616a04 	addi	r5,r5,-31320
 200055c:	20030080 	call	2003008 <alt_dev_llist_insert>
}
 2000560:	e037883a 	mov	sp,fp
 2000564:	dfc00117 	ldw	ra,4(sp)
 2000568:	df000017 	ldw	fp,0(sp)
 200056c:	dec00204 	addi	sp,sp,8
 2000570:	f800283a 	ret

02000574 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2000574:	defffc04 	addi	sp,sp,-16
 2000578:	dfc00315 	stw	ra,12(sp)
 200057c:	df000215 	stw	fp,8(sp)
 2000580:	df000204 	addi	fp,sp,8
 2000584:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2000588:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 200058c:	e13fff17 	ldw	r4,-4(fp)
 2000590:	20006000 	call	2000600 <alt_epcs_flash_query>
 2000594:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 2000598:	e0bffe17 	ldw	r2,-8(fp)
 200059c:	1004c03a 	cmpne	r2,r2,zero
 20005a0:	1000031e 	bne	r2,zero,20005b0 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 20005a4:	e13fff17 	ldw	r4,-4(fp)
 20005a8:	20005c80 	call	20005c8 <alt_flash_device_register>
 20005ac:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 20005b0:	e0bffe17 	ldw	r2,-8(fp)
}
 20005b4:	e037883a 	mov	sp,fp
 20005b8:	dfc00117 	ldw	ra,4(sp)
 20005bc:	df000017 	ldw	fp,0(sp)
 20005c0:	dec00204 	addi	sp,sp,8
 20005c4:	f800283a 	ret

020005c8 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 20005c8:	defffd04 	addi	sp,sp,-12
 20005cc:	dfc00215 	stw	ra,8(sp)
 20005d0:	df000115 	stw	fp,4(sp)
 20005d4:	df000104 	addi	fp,sp,4
 20005d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 20005dc:	e13fff17 	ldw	r4,-4(fp)
 20005e0:	01408074 	movhi	r5,513
 20005e4:	29616e04 	addi	r5,r5,-31304
 20005e8:	20030080 	call	2003008 <alt_dev_llist_insert>
}
 20005ec:	e037883a 	mov	sp,fp
 20005f0:	dfc00117 	ldw	ra,4(sp)
 20005f4:	df000017 	ldw	fp,0(sp)
 20005f8:	dec00204 	addi	sp,sp,8
 20005fc:	f800283a 	ret

02000600 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 2000600:	defffc04 	addi	sp,sp,-16
 2000604:	dfc00315 	stw	ra,12(sp)
 2000608:	df000215 	stw	fp,8(sp)
 200060c:	df000204 	addi	fp,sp,8
 2000610:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2000614:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */

  /* Send the RES command sequence */
  flash->silicon_id =
 2000618:	e0bfff17 	ldw	r2,-4(fp)
 200061c:	11002d17 	ldw	r4,180(r2)
 2000620:	2002c2c0 	call	2002c2c <epcs_read_electronic_signature>
 2000624:	10c03fcc 	andi	r3,r2,255
 2000628:	e0bfff17 	ldw	r2,-4(fp)
 200062c:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2000630:	e0bfff17 	ldw	r2,-4(fp)
 2000634:	10802f17 	ldw	r2,188(r2)
 2000638:	10800598 	cmpnei	r2,r2,22
 200063c:	10000a1e 	bne	r2,zero,2000668 <alt_epcs_flash_query+0x68>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2000640:	e0ffff17 	ldw	r3,-4(fp)
 2000644:	00802034 	movhi	r2,128
 2000648:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 200064c:	e0ffff17 	ldw	r3,-4(fp)
 2000650:	00802004 	movi	r2,128
 2000654:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2000658:	e0ffff17 	ldw	r3,-4(fp)
 200065c:	00800074 	movhi	r2,1
 2000660:	18801015 	stw	r2,64(r3)
 2000664:	00004e06 	br	20007a0 <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2000668:	e0bfff17 	ldw	r2,-4(fp)
 200066c:	10802f17 	ldw	r2,188(r2)
 2000670:	10800518 	cmpnei	r2,r2,20
 2000674:	10000a1e 	bne	r2,zero,20006a0 <alt_epcs_flash_query+0xa0>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2000678:	e0ffff17 	ldw	r3,-4(fp)
 200067c:	00800834 	movhi	r2,32
 2000680:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 2000684:	e0ffff17 	ldw	r3,-4(fp)
 2000688:	00800804 	movi	r2,32
 200068c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2000690:	e0ffff17 	ldw	r3,-4(fp)
 2000694:	00800074 	movhi	r2,1
 2000698:	18801015 	stw	r2,64(r3)
 200069c:	00004006 	br	20007a0 <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 20006a0:	e0bfff17 	ldw	r2,-4(fp)
 20006a4:	10802f17 	ldw	r2,188(r2)
 20006a8:	108004d8 	cmpnei	r2,r2,19
 20006ac:	10000a1e 	bne	r2,zero,20006d8 <alt_epcs_flash_query+0xd8>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 20006b0:	e0ffff17 	ldw	r3,-4(fp)
 20006b4:	00800434 	movhi	r2,16
 20006b8:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 20006bc:	e0ffff17 	ldw	r3,-4(fp)
 20006c0:	00800404 	movi	r2,16
 20006c4:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 20006c8:	e0ffff17 	ldw	r3,-4(fp)
 20006cc:	00800074 	movhi	r2,1
 20006d0:	18801015 	stw	r2,64(r3)
 20006d4:	00003206 	br	20007a0 <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 20006d8:	e0bfff17 	ldw	r2,-4(fp)
 20006dc:	10802f17 	ldw	r2,188(r2)
 20006e0:	10800498 	cmpnei	r2,r2,18
 20006e4:	10000a1e 	bne	r2,zero,2000710 <alt_epcs_flash_query+0x110>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 20006e8:	e0ffff17 	ldw	r3,-4(fp)
 20006ec:	00800234 	movhi	r2,8
 20006f0:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 20006f4:	e0ffff17 	ldw	r3,-4(fp)
 20006f8:	00800204 	movi	r2,8
 20006fc:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2000700:	e0ffff17 	ldw	r3,-4(fp)
 2000704:	00800074 	movhi	r2,1
 2000708:	18801015 	stw	r2,64(r3)
 200070c:	00002406 	br	20007a0 <alt_epcs_flash_query+0x1a0>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2000710:	e0bfff17 	ldw	r2,-4(fp)
 2000714:	10802f17 	ldw	r2,188(r2)
 2000718:	10800418 	cmpnei	r2,r2,16
 200071c:	10000a1e 	bne	r2,zero,2000748 <alt_epcs_flash_query+0x148>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2000720:	e0ffff17 	ldw	r3,-4(fp)
 2000724:	008000b4 	movhi	r2,2
 2000728:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 200072c:	e0ffff17 	ldw	r3,-4(fp)
 2000730:	00800104 	movi	r2,4
 2000734:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 2000738:	e0ffff17 	ldw	r3,-4(fp)
 200073c:	00a00014 	movui	r2,32768
 2000740:	18801015 	stw	r2,64(r3)
 2000744:	00001606 	br	20007a0 <alt_epcs_flash_query+0x1a0>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2000748:	e0bfff17 	ldw	r2,-4(fp)
 200074c:	11002d17 	ldw	r4,180(r2)
 2000750:	2002c980 	call	2002c98 <epcs_read_device_id>
 2000754:	10c03fcc 	andi	r3,r2,255
 2000758:	e0bfff17 	ldw	r2,-4(fp)
 200075c:	10c02f15 	stw	r3,188(r2)
    
    if(flash->silicon_id == 0x18) /* EPCS128 */
 2000760:	e0bfff17 	ldw	r2,-4(fp)
 2000764:	10802f17 	ldw	r2,188(r2)
 2000768:	10800618 	cmpnei	r2,r2,24
 200076c:	10000a1e 	bne	r2,zero,2000798 <alt_epcs_flash_query+0x198>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2000770:	e0ffff17 	ldw	r3,-4(fp)
 2000774:	00804034 	movhi	r2,256
 2000778:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 200077c:	e0ffff17 	ldw	r3,-4(fp)
 2000780:	00801004 	movi	r2,64
 2000784:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;     
 2000788:	e0ffff17 	ldw	r3,-4(fp)
 200078c:	00800134 	movhi	r2,4
 2000790:	18801015 	stw	r2,64(r3)
 2000794:	00000206 	br	20007a0 <alt_epcs_flash_query+0x1a0>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 2000798:	00bffb44 	movi	r2,-19
 200079c:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 20007a0:	e0bfff17 	ldw	r2,-4(fp)
 20007a4:	10800e17 	ldw	r2,56(r2)
 20007a8:	1007883a 	mov	r3,r2
 20007ac:	e0bfff17 	ldw	r2,-4(fp)
 20007b0:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 20007b4:	e0ffff17 	ldw	r3,-4(fp)
 20007b8:	00800044 	movi	r2,1
 20007bc:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 20007c0:	e0bfff17 	ldw	r2,-4(fp)
 20007c4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 20007c8:	e0ffff17 	ldw	r3,-4(fp)
 20007cc:	00804004 	movi	r2,256
 20007d0:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 20007d4:	e0bffe17 	ldw	r2,-8(fp)
}
 20007d8:	e037883a 	mov	sp,fp
 20007dc:	dfc00117 	ldw	ra,4(sp)
 20007e0:	df000017 	ldw	fp,0(sp)
 20007e4:	dec00204 	addi	sp,sp,8
 20007e8:	f800283a 	ret

020007ec <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 20007ec:	deffeb04 	addi	sp,sp,-84
 20007f0:	dfc01415 	stw	ra,80(sp)
 20007f4:	df001315 	stw	fp,76(sp)
 20007f8:	df001304 	addi	fp,sp,76
 20007fc:	e13ff915 	stw	r4,-28(fp)
 2000800:	e17ffa15 	stw	r5,-24(fp)
 2000804:	e1bffb15 	stw	r6,-20(fp)
 2000808:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 200080c:	00800804 	movi	r2,32
 2000810:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 2000814:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 2000818:	00002c06 	br	20008cc <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 200081c:	e0bff017 	ldw	r2,-64(fp)
 2000820:	e0bfff15 	stw	r2,-4(fp)
 2000824:	e0fffc17 	ldw	r3,-16(fp)
 2000828:	e0fffe15 	stw	r3,-8(fp)
 200082c:	e0bfff17 	ldw	r2,-4(fp)
 2000830:	e0fffe17 	ldw	r3,-8(fp)
 2000834:	10c0022e 	bgeu	r2,r3,2000840 <alt_epcs_flash_memcmp+0x54>
 2000838:	e0bfff17 	ldw	r2,-4(fp)
 200083c:	e0bffe15 	stw	r2,-8(fp)
 2000840:	e0fffe17 	ldw	r3,-8(fp)
 2000844:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2000848:	e0fffb17 	ldw	r3,-20(fp)
 200084c:	e0bfef17 	ldw	r2,-68(fp)
 2000850:	188b883a 	add	r5,r3,r2
 2000854:	e1bff104 	addi	r6,fp,-60
 2000858:	e13ff917 	ldw	r4,-28(fp)
 200085c:	e1ffee17 	ldw	r7,-72(fp)
 2000860:	2000e1c0 	call	2000e1c <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2000864:	1004403a 	cmpge	r2,r2,zero
 2000868:	1000031e 	bne	r2,zero,2000878 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 200086c:	00bfffc4 	movi	r2,-1
 2000870:	e0bffd15 	stw	r2,-12(fp)
 2000874:	00001906 	br	20008dc <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2000878:	e0fffa17 	ldw	r3,-24(fp)
 200087c:	e0bfef17 	ldw	r2,-68(fp)
 2000880:	1889883a 	add	r4,r3,r2
 2000884:	e1bfee17 	ldw	r6,-72(fp)
 2000888:	e17ff104 	addi	r5,fp,-60
 200088c:	2003dd40 	call	2003dd4 <memcmp>
 2000890:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 2000894:	e0bfed17 	ldw	r2,-76(fp)
 2000898:	1005003a 	cmpeq	r2,r2,zero
 200089c:	1000031e 	bne	r2,zero,20008ac <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 20008a0:	e0ffed17 	ldw	r3,-76(fp)
 20008a4:	e0fffd15 	stw	r3,-12(fp)
 20008a8:	00000c06 	br	20008dc <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 20008ac:	e0ffee17 	ldw	r3,-72(fp)
 20008b0:	e0bffc17 	ldw	r2,-16(fp)
 20008b4:	10c5c83a 	sub	r2,r2,r3
 20008b8:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 20008bc:	e0ffef17 	ldw	r3,-68(fp)
 20008c0:	e0bfee17 	ldw	r2,-72(fp)
 20008c4:	1885883a 	add	r2,r3,r2
 20008c8:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 20008cc:	e0bffc17 	ldw	r2,-16(fp)
 20008d0:	1004c03a 	cmpne	r2,r2,zero
 20008d4:	103fd11e 	bne	r2,zero,200081c <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 20008d8:	e03ffd15 	stw	zero,-12(fp)
 20008dc:	e0bffd17 	ldw	r2,-12(fp)
}
 20008e0:	e037883a 	mov	sp,fp
 20008e4:	dfc00117 	ldw	ra,4(sp)
 20008e8:	df000017 	ldw	fp,0(sp)
 20008ec:	dec00204 	addi	sp,sp,8
 20008f0:	f800283a 	ret

020008f4 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 20008f4:	defff204 	addi	sp,sp,-56
 20008f8:	dfc00d15 	stw	ra,52(sp)
 20008fc:	df000c15 	stw	fp,48(sp)
 2000900:	df000c04 	addi	fp,sp,48
 2000904:	e13ffa15 	stw	r4,-24(fp)
 2000908:	e17ffb15 	stw	r5,-20(fp)
 200090c:	e1bffc15 	stw	r6,-16(fp)
 2000910:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 2000914:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2000918:	e03ff815 	stw	zero,-32(fp)
 200091c:	00008b06 	br	2000b4c <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2000920:	e0bff817 	ldw	r2,-32(fp)
 2000924:	e0fffa17 	ldw	r3,-24(fp)
 2000928:	1004913a 	slli	r2,r2,4
 200092c:	10c5883a 	add	r2,r2,r3
 2000930:	10800d04 	addi	r2,r2,52
 2000934:	10c00017 	ldw	r3,0(r2)
 2000938:	e0bffb17 	ldw	r2,-20(fp)
 200093c:	10c08016 	blt	r2,r3,2000b40 <alt_epcs_flash_write+0x24c>
 2000940:	e0bff817 	ldw	r2,-32(fp)
 2000944:	e0fffa17 	ldw	r3,-24(fp)
 2000948:	1004913a 	slli	r2,r2,4
 200094c:	10c5883a 	add	r2,r2,r3
 2000950:	10800d04 	addi	r2,r2,52
 2000954:	11000017 	ldw	r4,0(r2)
 2000958:	e0bff817 	ldw	r2,-32(fp)
 200095c:	e0fffa17 	ldw	r3,-24(fp)
 2000960:	1004913a 	slli	r2,r2,4
 2000964:	10c5883a 	add	r2,r2,r3
 2000968:	10800e04 	addi	r2,r2,56
 200096c:	10800017 	ldw	r2,0(r2)
 2000970:	2087883a 	add	r3,r4,r2
 2000974:	e0bffb17 	ldw	r2,-20(fp)
 2000978:	10c0710e 	bge	r2,r3,2000b40 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 200097c:	e0bff817 	ldw	r2,-32(fp)
 2000980:	e0fffa17 	ldw	r3,-24(fp)
 2000984:	1004913a 	slli	r2,r2,4
 2000988:	10c5883a 	add	r2,r2,r3
 200098c:	10800d04 	addi	r2,r2,52
 2000990:	10800017 	ldw	r2,0(r2)
 2000994:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2000998:	e03ff715 	stw	zero,-36(fp)
 200099c:	00006006 	br	2000b20 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 20009a0:	e0fffb17 	ldw	r3,-20(fp)
 20009a4:	e0bff517 	ldw	r2,-44(fp)
 20009a8:	18805116 	blt	r3,r2,2000af0 <alt_epcs_flash_write+0x1fc>
 20009ac:	e0bff817 	ldw	r2,-32(fp)
 20009b0:	e0fffa17 	ldw	r3,-24(fp)
 20009b4:	1004913a 	slli	r2,r2,4
 20009b8:	10c5883a 	add	r2,r2,r3
 20009bc:	10801004 	addi	r2,r2,64
 20009c0:	10c00017 	ldw	r3,0(r2)
 20009c4:	e0bff517 	ldw	r2,-44(fp)
 20009c8:	1887883a 	add	r3,r3,r2
 20009cc:	e0bffb17 	ldw	r2,-20(fp)
 20009d0:	10c0470e 	bge	r2,r3,2000af0 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 20009d4:	e0bff817 	ldw	r2,-32(fp)
 20009d8:	e0fffa17 	ldw	r3,-24(fp)
 20009dc:	1004913a 	slli	r2,r2,4
 20009e0:	10c5883a 	add	r2,r2,r3
 20009e4:	10801004 	addi	r2,r2,64
 20009e8:	10c00017 	ldw	r3,0(r2)
 20009ec:	e0bff517 	ldw	r2,-44(fp)
 20009f0:	1887883a 	add	r3,r3,r2
 20009f4:	e0bffb17 	ldw	r2,-20(fp)
 20009f8:	1885c83a 	sub	r2,r3,r2
 20009fc:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2000a00:	e0bff617 	ldw	r2,-40(fp)
 2000a04:	e0bfff15 	stw	r2,-4(fp)
 2000a08:	e0fffd17 	ldw	r3,-12(fp)
 2000a0c:	e0fffe15 	stw	r3,-8(fp)
 2000a10:	e0bfff17 	ldw	r2,-4(fp)
 2000a14:	e0fffe17 	ldw	r3,-8(fp)
 2000a18:	10c0020e 	bge	r2,r3,2000a24 <alt_epcs_flash_write+0x130>
 2000a1c:	e0bfff17 	ldw	r2,-4(fp)
 2000a20:	e0bffe15 	stw	r2,-8(fp)
 2000a24:	e0fffe17 	ldw	r3,-8(fp)
 2000a28:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2000a2c:	e1fff617 	ldw	r7,-40(fp)
 2000a30:	e13ffa17 	ldw	r4,-24(fp)
 2000a34:	e17ffc17 	ldw	r5,-16(fp)
 2000a38:	e1bffb17 	ldw	r6,-20(fp)
 2000a3c:	20007ec0 	call	20007ec <alt_epcs_flash_memcmp>
 2000a40:	1005003a 	cmpeq	r2,r2,zero
 2000a44:	1000131e 	bne	r2,zero,2000a94 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2000a48:	e0bffa17 	ldw	r2,-24(fp)
 2000a4c:	10800817 	ldw	r2,32(r2)
 2000a50:	e13ffa17 	ldw	r4,-24(fp)
 2000a54:	e17ff517 	ldw	r5,-44(fp)
 2000a58:	103ee83a 	callr	r2
 2000a5c:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 2000a60:	e0bff917 	ldw	r2,-28(fp)
 2000a64:	1004c03a 	cmpne	r2,r2,zero
 2000a68:	10000a1e 	bne	r2,zero,2000a94 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 2000a6c:	e0bffa17 	ldw	r2,-24(fp)
 2000a70:	10c00917 	ldw	r3,36(r2)
 2000a74:	e0bff617 	ldw	r2,-40(fp)
 2000a78:	d8800015 	stw	r2,0(sp)
 2000a7c:	e13ffa17 	ldw	r4,-24(fp)
 2000a80:	e17ff517 	ldw	r5,-44(fp)
 2000a84:	e1bffb17 	ldw	r6,-20(fp)
 2000a88:	e1fffc17 	ldw	r7,-16(fp)
 2000a8c:	183ee83a 	callr	r3
 2000a90:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2000a94:	e0fffd17 	ldw	r3,-12(fp)
 2000a98:	e0bff617 	ldw	r2,-40(fp)
 2000a9c:	18802f26 	beq	r3,r2,2000b5c <alt_epcs_flash_write+0x268>
 2000aa0:	e0bff917 	ldw	r2,-28(fp)
 2000aa4:	1004c03a 	cmpne	r2,r2,zero
 2000aa8:	10002c1e 	bne	r2,zero,2000b5c <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 2000aac:	e0fffd17 	ldw	r3,-12(fp)
 2000ab0:	e0bff617 	ldw	r2,-40(fp)
 2000ab4:	1885c83a 	sub	r2,r3,r2
 2000ab8:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2000abc:	e0bff817 	ldw	r2,-32(fp)
 2000ac0:	e0fffa17 	ldw	r3,-24(fp)
 2000ac4:	1004913a 	slli	r2,r2,4
 2000ac8:	10c5883a 	add	r2,r2,r3
 2000acc:	10801004 	addi	r2,r2,64
 2000ad0:	10c00017 	ldw	r3,0(r2)
 2000ad4:	e0bff517 	ldw	r2,-44(fp)
 2000ad8:	1885883a 	add	r2,r3,r2
 2000adc:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2000ae0:	e0fffc17 	ldw	r3,-16(fp)
 2000ae4:	e0bff617 	ldw	r2,-40(fp)
 2000ae8:	1885883a 	add	r2,r3,r2
 2000aec:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2000af0:	e0bff817 	ldw	r2,-32(fp)
 2000af4:	e0fffa17 	ldw	r3,-24(fp)
 2000af8:	1004913a 	slli	r2,r2,4
 2000afc:	10c5883a 	add	r2,r2,r3
 2000b00:	10801004 	addi	r2,r2,64
 2000b04:	10c00017 	ldw	r3,0(r2)
 2000b08:	e0bff517 	ldw	r2,-44(fp)
 2000b0c:	10c5883a 	add	r2,r2,r3
 2000b10:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2000b14:	e0bff717 	ldw	r2,-36(fp)
 2000b18:	10800044 	addi	r2,r2,1
 2000b1c:	e0bff715 	stw	r2,-36(fp)
 2000b20:	e0bff817 	ldw	r2,-32(fp)
 2000b24:	e0fffa17 	ldw	r3,-24(fp)
 2000b28:	1004913a 	slli	r2,r2,4
 2000b2c:	10c5883a 	add	r2,r2,r3
 2000b30:	10800f04 	addi	r2,r2,60
 2000b34:	10c00017 	ldw	r3,0(r2)
 2000b38:	e0bff717 	ldw	r2,-36(fp)
 2000b3c:	10ff9816 	blt	r2,r3,20009a0 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2000b40:	e0bff817 	ldw	r2,-32(fp)
 2000b44:	10800044 	addi	r2,r2,1
 2000b48:	e0bff815 	stw	r2,-32(fp)
 2000b4c:	e0bffa17 	ldw	r2,-24(fp)
 2000b50:	10c00c17 	ldw	r3,48(r2)
 2000b54:	e0bff817 	ldw	r2,-32(fp)
 2000b58:	10ff7116 	blt	r2,r3,2000920 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 2000b5c:	e0bff917 	ldw	r2,-28(fp)
}
 2000b60:	e037883a 	mov	sp,fp
 2000b64:	dfc00117 	ldw	ra,4(sp)
 2000b68:	df000017 	ldw	fp,0(sp)
 2000b6c:	dec00204 	addi	sp,sp,8
 2000b70:	f800283a 	ret

02000b74 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2000b74:	defffa04 	addi	sp,sp,-24
 2000b78:	df000515 	stw	fp,20(sp)
 2000b7c:	df000504 	addi	fp,sp,20
 2000b80:	e13ffd15 	stw	r4,-12(fp)
 2000b84:	e17ffe15 	stw	r5,-8(fp)
 2000b88:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2000b8c:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2000b90:	e0bffd17 	ldw	r2,-12(fp)
 2000b94:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 2000b98:	e0bffb17 	ldw	r2,-20(fp)
 2000b9c:	10c00c17 	ldw	r3,48(r2)
 2000ba0:	e0bfff17 	ldw	r2,-4(fp)
 2000ba4:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2000ba8:	e0bffb17 	ldw	r2,-20(fp)
 2000bac:	10800c17 	ldw	r2,48(r2)
 2000bb0:	1004c03a 	cmpne	r2,r2,zero
 2000bb4:	1000031e 	bne	r2,zero,2000bc4 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 2000bb8:	00bffec4 	movi	r2,-5
 2000bbc:	e0bffc15 	stw	r2,-16(fp)
 2000bc0:	00000b06 	br	2000bf0 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2000bc4:	e0bffb17 	ldw	r2,-20(fp)
 2000bc8:	10800c17 	ldw	r2,48(r2)
 2000bcc:	10800250 	cmplti	r2,r2,9
 2000bd0:	1000031e 	bne	r2,zero,2000be0 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 2000bd4:	00bffd04 	movi	r2,-12
 2000bd8:	e0bffc15 	stw	r2,-16(fp)
 2000bdc:	00000406 	br	2000bf0 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 2000be0:	e0bffb17 	ldw	r2,-20(fp)
 2000be4:	10c00d04 	addi	r3,r2,52
 2000be8:	e0bffe17 	ldw	r2,-8(fp)
 2000bec:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2000bf0:	e0bffc17 	ldw	r2,-16(fp)
}
 2000bf4:	e037883a 	mov	sp,fp
 2000bf8:	df000017 	ldw	fp,0(sp)
 2000bfc:	dec00104 	addi	sp,sp,4
 2000c00:	f800283a 	ret

02000c04 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2000c04:	defffa04 	addi	sp,sp,-24
 2000c08:	dfc00515 	stw	ra,20(sp)
 2000c0c:	df000415 	stw	fp,16(sp)
 2000c10:	df000404 	addi	fp,sp,16
 2000c14:	e13ffe15 	stw	r4,-8(fp)
 2000c18:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2000c1c:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2000c20:	e0bffe17 	ldw	r2,-8(fp)
 2000c24:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2000c28:	e13ffe17 	ldw	r4,-8(fp)
 2000c2c:	e17fff17 	ldw	r5,-4(fp)
 2000c30:	2000c780 	call	2000c78 <alt_epcs_test_address>
 2000c34:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 2000c38:	e0bffd17 	ldw	r2,-12(fp)
 2000c3c:	1004803a 	cmplt	r2,r2,zero
 2000c40:	1000071e 	bne	r2,zero,2000c60 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Execute a WREN instruction */
    epcs_write_enable(f->register_base);
 2000c44:	e0bffc17 	ldw	r2,-16(fp)
 2000c48:	11002d17 	ldw	r4,180(r2)
 2000c4c:	2002aa00 	call	2002aa0 <epcs_write_enable>

    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset);
 2000c50:	e0bffc17 	ldw	r2,-16(fp)
 2000c54:	11002d17 	ldw	r4,180(r2)
 2000c58:	e17fff17 	ldw	r5,-4(fp)
 2000c5c:	20029000 	call	2002900 <epcs_sector_erase>
  }
  return ret_code;
 2000c60:	e0bffd17 	ldw	r2,-12(fp)
}
 2000c64:	e037883a 	mov	sp,fp
 2000c68:	dfc00117 	ldw	ra,4(sp)
 2000c6c:	df000017 	ldw	fp,0(sp)
 2000c70:	dec00204 	addi	sp,sp,8
 2000c74:	f800283a 	ret

02000c78 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2000c78:	defff904 	addi	sp,sp,-28
 2000c7c:	df000615 	stw	fp,24(sp)
 2000c80:	df000604 	addi	fp,sp,24
 2000c84:	e13ffe15 	stw	r4,-8(fp)
 2000c88:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2000c8c:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2000c90:	e0bffe17 	ldw	r2,-8(fp)
 2000c94:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2000c98:	e0bffc17 	ldw	r2,-16(fp)
 2000c9c:	10800c17 	ldw	r2,48(r2)
 2000ca0:	10bfffc4 	addi	r2,r2,-1
 2000ca4:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2000ca8:	e0bffb17 	ldw	r2,-20(fp)
 2000cac:	e0fffc17 	ldw	r3,-16(fp)
 2000cb0:	1004913a 	slli	r2,r2,4
 2000cb4:	10c5883a 	add	r2,r2,r3
 2000cb8:	10800d04 	addi	r2,r2,52
 2000cbc:	11000017 	ldw	r4,0(r2)
 2000cc0:	e0bffb17 	ldw	r2,-20(fp)
 2000cc4:	e0fffc17 	ldw	r3,-16(fp)
 2000cc8:	1004913a 	slli	r2,r2,4
 2000ccc:	10c5883a 	add	r2,r2,r3
 2000cd0:	10800e04 	addi	r2,r2,56
 2000cd4:	10800017 	ldw	r2,0(r2)
 2000cd8:	2085883a 	add	r2,r4,r2
 2000cdc:	10bfffc4 	addi	r2,r2,-1
 2000ce0:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 2000ce4:	e0ffff17 	ldw	r3,-4(fp)
 2000ce8:	e0bffa17 	ldw	r2,-24(fp)
 2000cec:	10c0022e 	bgeu	r2,r3,2000cf8 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2000cf0:	00bffec4 	movi	r2,-5
 2000cf4:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 2000cf8:	e0bffd17 	ldw	r2,-12(fp)
}
 2000cfc:	e037883a 	mov	sp,fp
 2000d00:	df000017 	ldw	fp,0(sp)
 2000d04:	dec00104 	addi	sp,sp,4
 2000d08:	f800283a 	ret

02000d0c <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 2000d0c:	defff304 	addi	sp,sp,-52
 2000d10:	dfc00c15 	stw	ra,48(sp)
 2000d14:	df000b15 	stw	fp,44(sp)
 2000d18:	df000b04 	addi	fp,sp,44
 2000d1c:	e13ffa15 	stw	r4,-24(fp)
 2000d20:	e17ffb15 	stw	r5,-20(fp)
 2000d24:	e1bffc15 	stw	r6,-16(fp)
 2000d28:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2000d2c:	e0bffa17 	ldw	r2,-24(fp)
 2000d30:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2000d34:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2000d38:	e13ffa17 	ldw	r4,-24(fp)
 2000d3c:	e17ffc17 	ldw	r5,-16(fp)
 2000d40:	2000c780 	call	2000c78 <alt_epcs_test_address>
 2000d44:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2000d48:	e0bff917 	ldw	r2,-28(fp)
 2000d4c:	1004803a 	cmplt	r2,r2,zero
 2000d50:	10002c1e 	bne	r2,zero,2000e04 <alt_epcs_flash_write_block+0xf8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2000d54:	00002806 	br	2000df8 <alt_epcs_flash_write_block+0xec>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2000d58:	e0bff817 	ldw	r2,-32(fp)
 2000d5c:	10c03017 	ldw	r3,192(r2)
 2000d60:	e0bffc17 	ldw	r2,-16(fp)
 2000d64:	1887883a 	add	r3,r3,r2
 2000d68:	e0bff817 	ldw	r2,-32(fp)
 2000d6c:	10803017 	ldw	r2,192(r2)
 2000d70:	0085c83a 	sub	r2,zero,r2
 2000d74:	1884703a 	and	r2,r3,r2
 2000d78:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2000d7c:	e0fff517 	ldw	r3,-44(fp)
 2000d80:	e0bffc17 	ldw	r2,-16(fp)
 2000d84:	1885c83a 	sub	r2,r3,r2
 2000d88:	e0c00217 	ldw	r3,8(fp)
 2000d8c:	e0ffff15 	stw	r3,-4(fp)
 2000d90:	e0bffe15 	stw	r2,-8(fp)
 2000d94:	e0bfff17 	ldw	r2,-4(fp)
 2000d98:	e0fffe17 	ldw	r3,-8(fp)
 2000d9c:	10c0020e 	bge	r2,r3,2000da8 <alt_epcs_flash_write_block+0x9c>
 2000da0:	e0bfff17 	ldw	r2,-4(fp)
 2000da4:	e0bffe15 	stw	r2,-8(fp)
 2000da8:	e0fffe17 	ldw	r3,-8(fp)
 2000dac:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write);
 2000db0:	e0bff817 	ldw	r2,-32(fp)
 2000db4:	11002d17 	ldw	r4,180(r2)
 2000db8:	e0fffd17 	ldw	r3,-12(fp)
 2000dbc:	e0bff717 	ldw	r2,-36(fp)
 2000dc0:	188d883a 	add	r6,r3,r2
 2000dc4:	e17ffc17 	ldw	r5,-16(fp)
 2000dc8:	e1fff617 	ldw	r7,-40(fp)
 2000dcc:	2002b540 	call	2002b54 <epcs_write_buffer>

      length -= length_of_current_write;
 2000dd0:	e0c00217 	ldw	r3,8(fp)
 2000dd4:	e0bff617 	ldw	r2,-40(fp)
 2000dd8:	1885c83a 	sub	r2,r3,r2
 2000ddc:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2000de0:	e0fff717 	ldw	r3,-36(fp)
 2000de4:	e0bff617 	ldw	r2,-40(fp)
 2000de8:	1885883a 	add	r2,r3,r2
 2000dec:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2000df0:	e0bff517 	ldw	r2,-44(fp)
 2000df4:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2000df8:	e0800217 	ldw	r2,8(fp)
 2000dfc:	1004c03a 	cmpne	r2,r2,zero
 2000e00:	103fd51e 	bne	r2,zero,2000d58 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 2000e04:	e0bff917 	ldw	r2,-28(fp)
}
 2000e08:	e037883a 	mov	sp,fp
 2000e0c:	dfc00117 	ldw	ra,4(sp)
 2000e10:	df000017 	ldw	fp,0(sp)
 2000e14:	dec00204 	addi	sp,sp,8
 2000e18:	f800283a 	ret

02000e1c <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 2000e1c:	defff804 	addi	sp,sp,-32
 2000e20:	dfc00715 	stw	ra,28(sp)
 2000e24:	df000615 	stw	fp,24(sp)
 2000e28:	df000604 	addi	fp,sp,24
 2000e2c:	e13ffc15 	stw	r4,-16(fp)
 2000e30:	e17ffd15 	stw	r5,-12(fp)
 2000e34:	e1bffe15 	stw	r6,-8(fp)
 2000e38:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 2000e3c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2000e40:	e0bffc17 	ldw	r2,-16(fp)
 2000e44:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 2000e48:	e13ffc17 	ldw	r4,-16(fp)
 2000e4c:	e17ffd17 	ldw	r5,-12(fp)
 2000e50:	2000c780 	call	2000c78 <alt_epcs_test_address>
 2000e54:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 2000e58:	e0bffb17 	ldw	r2,-20(fp)
 2000e5c:	1004803a 	cmplt	r2,r2,zero
 2000e60:	10000b1e 	bne	r2,zero,2000e90 <alt_epcs_flash_read+0x74>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length);
 2000e64:	e0bffa17 	ldw	r2,-24(fp)
 2000e68:	11002d17 	ldw	r4,180(r2)
 2000e6c:	e1bffe17 	ldw	r6,-8(fp)
 2000e70:	e17ffd17 	ldw	r5,-12(fp)
 2000e74:	e1ffff17 	ldw	r7,-4(fp)
 2000e78:	20029ec0 	call	20029ec <epcs_read_buffer>
 2000e7c:	e0bffb15 	stw	r2,-20(fp)

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 2000e80:	e0fffb17 	ldw	r3,-20(fp)
 2000e84:	e0bfff17 	ldw	r2,-4(fp)
 2000e88:	1880011e 	bne	r3,r2,2000e90 <alt_epcs_flash_read+0x74>
    {
      ret_code = 0;
 2000e8c:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 2000e90:	e0bffb17 	ldw	r2,-20(fp)
}
 2000e94:	e037883a 	mov	sp,fp
 2000e98:	dfc00117 	ldw	ra,4(sp)
 2000e9c:	df000017 	ldw	fp,0(sp)
 2000ea0:	dec00204 	addi	sp,sp,8
 2000ea4:	f800283a 	ret

02000ea8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2000ea8:	defffa04 	addi	sp,sp,-24
 2000eac:	dfc00515 	stw	ra,20(sp)
 2000eb0:	df000415 	stw	fp,16(sp)
 2000eb4:	df000404 	addi	fp,sp,16
 2000eb8:	e13ffd15 	stw	r4,-12(fp)
 2000ebc:	e17ffe15 	stw	r5,-8(fp)
 2000ec0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2000ec4:	e0bffd17 	ldw	r2,-12(fp)
 2000ec8:	10800017 	ldw	r2,0(r2)
 2000ecc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2000ed0:	e0bffc17 	ldw	r2,-16(fp)
 2000ed4:	11000a04 	addi	r4,r2,40
 2000ed8:	e0bffd17 	ldw	r2,-12(fp)
 2000edc:	11c00217 	ldw	r7,8(r2)
 2000ee0:	e17ffe17 	ldw	r5,-8(fp)
 2000ee4:	e1bfff17 	ldw	r6,-4(fp)
 2000ee8:	20014f00 	call	20014f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2000eec:	e037883a 	mov	sp,fp
 2000ef0:	dfc00117 	ldw	ra,4(sp)
 2000ef4:	df000017 	ldw	fp,0(sp)
 2000ef8:	dec00204 	addi	sp,sp,8
 2000efc:	f800283a 	ret

02000f00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2000f00:	defffa04 	addi	sp,sp,-24
 2000f04:	dfc00515 	stw	ra,20(sp)
 2000f08:	df000415 	stw	fp,16(sp)
 2000f0c:	df000404 	addi	fp,sp,16
 2000f10:	e13ffd15 	stw	r4,-12(fp)
 2000f14:	e17ffe15 	stw	r5,-8(fp)
 2000f18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2000f1c:	e0bffd17 	ldw	r2,-12(fp)
 2000f20:	10800017 	ldw	r2,0(r2)
 2000f24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2000f28:	e0bffc17 	ldw	r2,-16(fp)
 2000f2c:	11000a04 	addi	r4,r2,40
 2000f30:	e0bffd17 	ldw	r2,-12(fp)
 2000f34:	11c00217 	ldw	r7,8(r2)
 2000f38:	e17ffe17 	ldw	r5,-8(fp)
 2000f3c:	e1bfff17 	ldw	r6,-4(fp)
 2000f40:	20017400 	call	2001740 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2000f44:	e037883a 	mov	sp,fp
 2000f48:	dfc00117 	ldw	ra,4(sp)
 2000f4c:	df000017 	ldw	fp,0(sp)
 2000f50:	dec00204 	addi	sp,sp,8
 2000f54:	f800283a 	ret

02000f58 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2000f58:	defffc04 	addi	sp,sp,-16
 2000f5c:	dfc00315 	stw	ra,12(sp)
 2000f60:	df000215 	stw	fp,8(sp)
 2000f64:	df000204 	addi	fp,sp,8
 2000f68:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2000f6c:	e0bfff17 	ldw	r2,-4(fp)
 2000f70:	10800017 	ldw	r2,0(r2)
 2000f74:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2000f78:	e0bffe17 	ldw	r2,-8(fp)
 2000f7c:	11000a04 	addi	r4,r2,40
 2000f80:	e0bfff17 	ldw	r2,-4(fp)
 2000f84:	11400217 	ldw	r5,8(r2)
 2000f88:	20013880 	call	2001388 <altera_avalon_jtag_uart_close>
}
 2000f8c:	e037883a 	mov	sp,fp
 2000f90:	dfc00117 	ldw	ra,4(sp)
 2000f94:	df000017 	ldw	fp,0(sp)
 2000f98:	dec00204 	addi	sp,sp,8
 2000f9c:	f800283a 	ret

02000fa0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2000fa0:	defffa04 	addi	sp,sp,-24
 2000fa4:	dfc00515 	stw	ra,20(sp)
 2000fa8:	df000415 	stw	fp,16(sp)
 2000fac:	df000404 	addi	fp,sp,16
 2000fb0:	e13ffd15 	stw	r4,-12(fp)
 2000fb4:	e17ffe15 	stw	r5,-8(fp)
 2000fb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2000fbc:	e0bffd17 	ldw	r2,-12(fp)
 2000fc0:	10800017 	ldw	r2,0(r2)
 2000fc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2000fc8:	e0bffc17 	ldw	r2,-16(fp)
 2000fcc:	11000a04 	addi	r4,r2,40
 2000fd0:	e17ffe17 	ldw	r5,-8(fp)
 2000fd4:	e1bfff17 	ldw	r6,-4(fp)
 2000fd8:	20013fc0 	call	20013fc <altera_avalon_jtag_uart_ioctl>
}
 2000fdc:	e037883a 	mov	sp,fp
 2000fe0:	dfc00117 	ldw	ra,4(sp)
 2000fe4:	df000017 	ldw	fp,0(sp)
 2000fe8:	dec00204 	addi	sp,sp,8
 2000fec:	f800283a 	ret

02000ff0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2000ff0:	defffa04 	addi	sp,sp,-24
 2000ff4:	dfc00515 	stw	ra,20(sp)
 2000ff8:	df000415 	stw	fp,16(sp)
 2000ffc:	df000404 	addi	fp,sp,16
 2001000:	e13ffd15 	stw	r4,-12(fp)
 2001004:	e17ffe15 	stw	r5,-8(fp)
 2001008:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200100c:	e0fffd17 	ldw	r3,-12(fp)
 2001010:	00800044 	movi	r2,1
 2001014:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2001018:	e0bffd17 	ldw	r2,-12(fp)
 200101c:	10800017 	ldw	r2,0(r2)
 2001020:	11000104 	addi	r4,r2,4
 2001024:	e0bffd17 	ldw	r2,-12(fp)
 2001028:	10800817 	ldw	r2,32(r2)
 200102c:	1007883a 	mov	r3,r2
 2001030:	2005883a 	mov	r2,r4
 2001034:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2001038:	e13ffe17 	ldw	r4,-8(fp)
 200103c:	e17fff17 	ldw	r5,-4(fp)
 2001040:	d8000015 	stw	zero,0(sp)
 2001044:	01808034 	movhi	r6,512
 2001048:	31842c04 	addi	r6,r6,4272
 200104c:	e1fffd17 	ldw	r7,-12(fp)
 2001050:	200272c0 	call	200272c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2001054:	e0bffd17 	ldw	r2,-12(fp)
 2001058:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200105c:	e0bffd17 	ldw	r2,-12(fp)
 2001060:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2001064:	00808074 	movhi	r2,513
 2001068:	10a18104 	addi	r2,r2,-31228
 200106c:	10800017 	ldw	r2,0(r2)
 2001070:	100b883a 	mov	r5,r2
 2001074:	01808034 	movhi	r6,512
 2001078:	3184b604 	addi	r6,r6,4824
 200107c:	e1fffd17 	ldw	r7,-12(fp)
 2001080:	2002d000 	call	2002d00 <alt_alarm_start>
 2001084:	1004403a 	cmpge	r2,r2,zero
 2001088:	1000041e 	bne	r2,zero,200109c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200108c:	e0fffd17 	ldw	r3,-12(fp)
 2001090:	00a00034 	movhi	r2,32768
 2001094:	10bfffc4 	addi	r2,r2,-1
 2001098:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200109c:	e037883a 	mov	sp,fp
 20010a0:	dfc00117 	ldw	ra,4(sp)
 20010a4:	df000017 	ldw	fp,0(sp)
 20010a8:	dec00204 	addi	sp,sp,8
 20010ac:	f800283a 	ret

020010b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 20010b0:	defff804 	addi	sp,sp,-32
 20010b4:	df000715 	stw	fp,28(sp)
 20010b8:	df000704 	addi	fp,sp,28
 20010bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 20010c0:	e0bfff17 	ldw	r2,-4(fp)
 20010c4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 20010c8:	e0bffe17 	ldw	r2,-8(fp)
 20010cc:	10800017 	ldw	r2,0(r2)
 20010d0:	e0bffd15 	stw	r2,-12(fp)
 20010d4:	00000006 	br	20010d8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20010d8:	e0bffd17 	ldw	r2,-12(fp)
 20010dc:	10800104 	addi	r2,r2,4
 20010e0:	10800037 	ldwio	r2,0(r2)
 20010e4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 20010e8:	e0bffc17 	ldw	r2,-16(fp)
 20010ec:	1080c00c 	andi	r2,r2,768
 20010f0:	1005003a 	cmpeq	r2,r2,zero
 20010f4:	1000741e 	bne	r2,zero,20012c8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 20010f8:	e0bffc17 	ldw	r2,-16(fp)
 20010fc:	1080400c 	andi	r2,r2,256
 2001100:	1005003a 	cmpeq	r2,r2,zero
 2001104:	1000351e 	bne	r2,zero,20011dc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2001108:	00800074 	movhi	r2,1
 200110c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001110:	e0bffe17 	ldw	r2,-8(fp)
 2001114:	10800a17 	ldw	r2,40(r2)
 2001118:	10800044 	addi	r2,r2,1
 200111c:	1081ffcc 	andi	r2,r2,2047
 2001120:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 2001124:	e0bffe17 	ldw	r2,-8(fp)
 2001128:	10c00b17 	ldw	r3,44(r2)
 200112c:	e0bffa17 	ldw	r2,-24(fp)
 2001130:	18801626 	beq	r3,r2,200118c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2001134:	e0bffd17 	ldw	r2,-12(fp)
 2001138:	10800037 	ldwio	r2,0(r2)
 200113c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2001140:	e0bffb17 	ldw	r2,-20(fp)
 2001144:	10a0000c 	andi	r2,r2,32768
 2001148:	1005003a 	cmpeq	r2,r2,zero
 200114c:	10000f1e 	bne	r2,zero,200118c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2001150:	e0bffe17 	ldw	r2,-8(fp)
 2001154:	10c00a17 	ldw	r3,40(r2)
 2001158:	e0bffb17 	ldw	r2,-20(fp)
 200115c:	1009883a 	mov	r4,r2
 2001160:	e0bffe17 	ldw	r2,-8(fp)
 2001164:	1885883a 	add	r2,r3,r2
 2001168:	10800e04 	addi	r2,r2,56
 200116c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001170:	e0bffe17 	ldw	r2,-8(fp)
 2001174:	10800a17 	ldw	r2,40(r2)
 2001178:	10800044 	addi	r2,r2,1
 200117c:	10c1ffcc 	andi	r3,r2,2047
 2001180:	e0bffe17 	ldw	r2,-8(fp)
 2001184:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2001188:	003fe106 	br	2001110 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200118c:	e0bffb17 	ldw	r2,-20(fp)
 2001190:	10bfffec 	andhi	r2,r2,65535
 2001194:	1005003a 	cmpeq	r2,r2,zero
 2001198:	1000101e 	bne	r2,zero,20011dc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200119c:	e0bffe17 	ldw	r2,-8(fp)
 20011a0:	10c00817 	ldw	r3,32(r2)
 20011a4:	00bfff84 	movi	r2,-2
 20011a8:	1886703a 	and	r3,r3,r2
 20011ac:	e0bffe17 	ldw	r2,-8(fp)
 20011b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 20011b4:	e0bffd17 	ldw	r2,-12(fp)
 20011b8:	11000104 	addi	r4,r2,4
 20011bc:	e0bffe17 	ldw	r2,-8(fp)
 20011c0:	10800817 	ldw	r2,32(r2)
 20011c4:	1007883a 	mov	r3,r2
 20011c8:	2005883a 	mov	r2,r4
 20011cc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20011d0:	e0bffd17 	ldw	r2,-12(fp)
 20011d4:	10800104 	addi	r2,r2,4
 20011d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 20011dc:	e0bffc17 	ldw	r2,-16(fp)
 20011e0:	1080800c 	andi	r2,r2,512
 20011e4:	1005003a 	cmpeq	r2,r2,zero
 20011e8:	103fbb1e 	bne	r2,zero,20010d8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20011ec:	e0bffc17 	ldw	r2,-16(fp)
 20011f0:	10bfffec 	andhi	r2,r2,65535
 20011f4:	1004d43a 	srli	r2,r2,16
 20011f8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20011fc:	00001506 	br	2001254 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2001200:	e13ffd17 	ldw	r4,-12(fp)
 2001204:	e0bffe17 	ldw	r2,-8(fp)
 2001208:	10c00d17 	ldw	r3,52(r2)
 200120c:	e0bffe17 	ldw	r2,-8(fp)
 2001210:	1885883a 	add	r2,r3,r2
 2001214:	10820e04 	addi	r2,r2,2104
 2001218:	10800003 	ldbu	r2,0(r2)
 200121c:	10c03fcc 	andi	r3,r2,255
 2001220:	18c0201c 	xori	r3,r3,128
 2001224:	18ffe004 	addi	r3,r3,-128
 2001228:	2005883a 	mov	r2,r4
 200122c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001230:	e0bffe17 	ldw	r2,-8(fp)
 2001234:	10800d17 	ldw	r2,52(r2)
 2001238:	10800044 	addi	r2,r2,1
 200123c:	10c1ffcc 	andi	r3,r2,2047
 2001240:	e0bffe17 	ldw	r2,-8(fp)
 2001244:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2001248:	e0bff917 	ldw	r2,-28(fp)
 200124c:	10bfffc4 	addi	r2,r2,-1
 2001250:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2001254:	e0bff917 	ldw	r2,-28(fp)
 2001258:	1005003a 	cmpeq	r2,r2,zero
 200125c:	1000051e 	bne	r2,zero,2001274 <altera_avalon_jtag_uart_irq+0x1c4>
 2001260:	e0bffe17 	ldw	r2,-8(fp)
 2001264:	10c00d17 	ldw	r3,52(r2)
 2001268:	e0bffe17 	ldw	r2,-8(fp)
 200126c:	10800c17 	ldw	r2,48(r2)
 2001270:	18bfe31e 	bne	r3,r2,2001200 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2001274:	e0bff917 	ldw	r2,-28(fp)
 2001278:	1005003a 	cmpeq	r2,r2,zero
 200127c:	103f961e 	bne	r2,zero,20010d8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2001280:	e0bffe17 	ldw	r2,-8(fp)
 2001284:	10c00817 	ldw	r3,32(r2)
 2001288:	00bfff44 	movi	r2,-3
 200128c:	1886703a 	and	r3,r3,r2
 2001290:	e0bffe17 	ldw	r2,-8(fp)
 2001294:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001298:	e0bffe17 	ldw	r2,-8(fp)
 200129c:	10800017 	ldw	r2,0(r2)
 20012a0:	11000104 	addi	r4,r2,4
 20012a4:	e0bffe17 	ldw	r2,-8(fp)
 20012a8:	10800817 	ldw	r2,32(r2)
 20012ac:	1007883a 	mov	r3,r2
 20012b0:	2005883a 	mov	r2,r4
 20012b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20012b8:	e0bffd17 	ldw	r2,-12(fp)
 20012bc:	10800104 	addi	r2,r2,4
 20012c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 20012c4:	003f8406 	br	20010d8 <altera_avalon_jtag_uart_irq+0x28>
}
 20012c8:	e037883a 	mov	sp,fp
 20012cc:	df000017 	ldw	fp,0(sp)
 20012d0:	dec00104 	addi	sp,sp,4
 20012d4:	f800283a 	ret

020012d8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20012d8:	defffc04 	addi	sp,sp,-16
 20012dc:	df000315 	stw	fp,12(sp)
 20012e0:	df000304 	addi	fp,sp,12
 20012e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 20012e8:	e0bfff17 	ldw	r2,-4(fp)
 20012ec:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 20012f0:	e0bffe17 	ldw	r2,-8(fp)
 20012f4:	10800017 	ldw	r2,0(r2)
 20012f8:	10800104 	addi	r2,r2,4
 20012fc:	10800037 	ldwio	r2,0(r2)
 2001300:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2001304:	e0bffd17 	ldw	r2,-12(fp)
 2001308:	1081000c 	andi	r2,r2,1024
 200130c:	1005003a 	cmpeq	r2,r2,zero
 2001310:	10000c1e 	bne	r2,zero,2001344 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2001314:	e0bffe17 	ldw	r2,-8(fp)
 2001318:	10800017 	ldw	r2,0(r2)
 200131c:	11000104 	addi	r4,r2,4
 2001320:	e0bffe17 	ldw	r2,-8(fp)
 2001324:	10800817 	ldw	r2,32(r2)
 2001328:	10810014 	ori	r2,r2,1024
 200132c:	1007883a 	mov	r3,r2
 2001330:	2005883a 	mov	r2,r4
 2001334:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2001338:	e0bffe17 	ldw	r2,-8(fp)
 200133c:	10000915 	stw	zero,36(r2)
 2001340:	00000a06 	br	200136c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2001344:	e0bffe17 	ldw	r2,-8(fp)
 2001348:	10c00917 	ldw	r3,36(r2)
 200134c:	00a00034 	movhi	r2,32768
 2001350:	10bfff04 	addi	r2,r2,-4
 2001354:	10c00536 	bltu	r2,r3,200136c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2001358:	e0bffe17 	ldw	r2,-8(fp)
 200135c:	10800917 	ldw	r2,36(r2)
 2001360:	10c00044 	addi	r3,r2,1
 2001364:	e0bffe17 	ldw	r2,-8(fp)
 2001368:	10c00915 	stw	r3,36(r2)
 200136c:	00808074 	movhi	r2,513
 2001370:	10a18104 	addi	r2,r2,-31228
 2001374:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2001378:	e037883a 	mov	sp,fp
 200137c:	df000017 	ldw	fp,0(sp)
 2001380:	dec00104 	addi	sp,sp,4
 2001384:	f800283a 	ret

02001388 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2001388:	defffc04 	addi	sp,sp,-16
 200138c:	df000315 	stw	fp,12(sp)
 2001390:	df000304 	addi	fp,sp,12
 2001394:	e13ffd15 	stw	r4,-12(fp)
 2001398:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200139c:	00000706 	br	20013bc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 20013a0:	e0bffe17 	ldw	r2,-8(fp)
 20013a4:	1090000c 	andi	r2,r2,16384
 20013a8:	1005003a 	cmpeq	r2,r2,zero
 20013ac:	1000031e 	bne	r2,zero,20013bc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 20013b0:	00bffd44 	movi	r2,-11
 20013b4:	e0bfff15 	stw	r2,-4(fp)
 20013b8:	00000b06 	br	20013e8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20013bc:	e0bffd17 	ldw	r2,-12(fp)
 20013c0:	10c00d17 	ldw	r3,52(r2)
 20013c4:	e0bffd17 	ldw	r2,-12(fp)
 20013c8:	10800c17 	ldw	r2,48(r2)
 20013cc:	18800526 	beq	r3,r2,20013e4 <altera_avalon_jtag_uart_close+0x5c>
 20013d0:	e0bffd17 	ldw	r2,-12(fp)
 20013d4:	10c00917 	ldw	r3,36(r2)
 20013d8:	e0bffd17 	ldw	r2,-12(fp)
 20013dc:	10800117 	ldw	r2,4(r2)
 20013e0:	18bfef36 	bltu	r3,r2,20013a0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20013e4:	e03fff15 	stw	zero,-4(fp)
 20013e8:	e0bfff17 	ldw	r2,-4(fp)
}
 20013ec:	e037883a 	mov	sp,fp
 20013f0:	df000017 	ldw	fp,0(sp)
 20013f4:	dec00104 	addi	sp,sp,4
 20013f8:	f800283a 	ret

020013fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 20013fc:	defff804 	addi	sp,sp,-32
 2001400:	df000715 	stw	fp,28(sp)
 2001404:	df000704 	addi	fp,sp,28
 2001408:	e13ffb15 	stw	r4,-20(fp)
 200140c:	e17ffc15 	stw	r5,-16(fp)
 2001410:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2001414:	00bff9c4 	movi	r2,-25
 2001418:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 200141c:	e0bffc17 	ldw	r2,-16(fp)
 2001420:	e0bfff15 	stw	r2,-4(fp)
 2001424:	e0ffff17 	ldw	r3,-4(fp)
 2001428:	189a8060 	cmpeqi	r2,r3,27137
 200142c:	1000041e 	bne	r2,zero,2001440 <altera_avalon_jtag_uart_ioctl+0x44>
 2001430:	e0ffff17 	ldw	r3,-4(fp)
 2001434:	189a80a0 	cmpeqi	r2,r3,27138
 2001438:	10001b1e 	bne	r2,zero,20014a8 <altera_avalon_jtag_uart_ioctl+0xac>
 200143c:	00002706 	br	20014dc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2001440:	e0bffb17 	ldw	r2,-20(fp)
 2001444:	10c00117 	ldw	r3,4(r2)
 2001448:	00a00034 	movhi	r2,32768
 200144c:	10bfffc4 	addi	r2,r2,-1
 2001450:	18802226 	beq	r3,r2,20014dc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2001454:	e0bffd17 	ldw	r2,-12(fp)
 2001458:	10800017 	ldw	r2,0(r2)
 200145c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2001460:	e0bff917 	ldw	r2,-28(fp)
 2001464:	10800090 	cmplti	r2,r2,2
 2001468:	1000071e 	bne	r2,zero,2001488 <altera_avalon_jtag_uart_ioctl+0x8c>
 200146c:	e0fff917 	ldw	r3,-28(fp)
 2001470:	00a00034 	movhi	r2,32768
 2001474:	10bfffc4 	addi	r2,r2,-1
 2001478:	18800326 	beq	r3,r2,2001488 <altera_avalon_jtag_uart_ioctl+0x8c>
 200147c:	e0bff917 	ldw	r2,-28(fp)
 2001480:	e0bffe15 	stw	r2,-8(fp)
 2001484:	00000306 	br	2001494 <altera_avalon_jtag_uart_ioctl+0x98>
 2001488:	00e00034 	movhi	r3,32768
 200148c:	18ffff84 	addi	r3,r3,-2
 2001490:	e0fffe15 	stw	r3,-8(fp)
 2001494:	e0bffb17 	ldw	r2,-20(fp)
 2001498:	e0fffe17 	ldw	r3,-8(fp)
 200149c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 20014a0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 20014a4:	00000d06 	br	20014dc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 20014a8:	e0bffb17 	ldw	r2,-20(fp)
 20014ac:	10c00117 	ldw	r3,4(r2)
 20014b0:	00a00034 	movhi	r2,32768
 20014b4:	10bfffc4 	addi	r2,r2,-1
 20014b8:	18800826 	beq	r3,r2,20014dc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 20014bc:	e13ffd17 	ldw	r4,-12(fp)
 20014c0:	e0bffb17 	ldw	r2,-20(fp)
 20014c4:	10c00917 	ldw	r3,36(r2)
 20014c8:	e0bffb17 	ldw	r2,-20(fp)
 20014cc:	10800117 	ldw	r2,4(r2)
 20014d0:	1885803a 	cmpltu	r2,r3,r2
 20014d4:	20800015 	stw	r2,0(r4)
      rc = 0;
 20014d8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 20014dc:	e0bffa17 	ldw	r2,-24(fp)
}
 20014e0:	e037883a 	mov	sp,fp
 20014e4:	df000017 	ldw	fp,0(sp)
 20014e8:	dec00104 	addi	sp,sp,4
 20014ec:	f800283a 	ret

020014f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 20014f0:	defff104 	addi	sp,sp,-60
 20014f4:	dfc00e15 	stw	ra,56(sp)
 20014f8:	df000d15 	stw	fp,52(sp)
 20014fc:	df000d04 	addi	fp,sp,52
 2001500:	e13ffb15 	stw	r4,-20(fp)
 2001504:	e17ffc15 	stw	r5,-16(fp)
 2001508:	e1bffd15 	stw	r6,-12(fp)
 200150c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2001510:	e0bffc17 	ldw	r2,-16(fp)
 2001514:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2001518:	00004806 	br	200163c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200151c:	e0bffb17 	ldw	r2,-20(fp)
 2001520:	10800a17 	ldw	r2,40(r2)
 2001524:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2001528:	e0bffb17 	ldw	r2,-20(fp)
 200152c:	10800b17 	ldw	r2,44(r2)
 2001530:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2001534:	e0fff717 	ldw	r3,-36(fp)
 2001538:	e0bff617 	ldw	r2,-40(fp)
 200153c:	18800536 	bltu	r3,r2,2001554 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2001540:	e0bff717 	ldw	r2,-36(fp)
 2001544:	e0fff617 	ldw	r3,-40(fp)
 2001548:	10c5c83a 	sub	r2,r2,r3
 200154c:	e0bff815 	stw	r2,-32(fp)
 2001550:	00000406 	br	2001564 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2001554:	00820004 	movi	r2,2048
 2001558:	e0fff617 	ldw	r3,-40(fp)
 200155c:	10c5c83a 	sub	r2,r2,r3
 2001560:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2001564:	e0bff817 	ldw	r2,-32(fp)
 2001568:	1005003a 	cmpeq	r2,r2,zero
 200156c:	10001f1e 	bne	r2,zero,20015ec <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 2001570:	e0fffd17 	ldw	r3,-12(fp)
 2001574:	e0bff817 	ldw	r2,-32(fp)
 2001578:	1880022e 	bgeu	r3,r2,2001584 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 200157c:	e0bffd17 	ldw	r2,-12(fp)
 2001580:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2001584:	e0bffb17 	ldw	r2,-20(fp)
 2001588:	10c00e04 	addi	r3,r2,56
 200158c:	e0bff617 	ldw	r2,-40(fp)
 2001590:	1887883a 	add	r3,r3,r2
 2001594:	e0bffa17 	ldw	r2,-24(fp)
 2001598:	1009883a 	mov	r4,r2
 200159c:	180b883a 	mov	r5,r3
 20015a0:	e1bff817 	ldw	r6,-32(fp)
 20015a4:	2003e480 	call	2003e48 <memcpy>
      ptr   += n;
 20015a8:	e0fff817 	ldw	r3,-32(fp)
 20015ac:	e0bffa17 	ldw	r2,-24(fp)
 20015b0:	10c5883a 	add	r2,r2,r3
 20015b4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 20015b8:	e0fffd17 	ldw	r3,-12(fp)
 20015bc:	e0bff817 	ldw	r2,-32(fp)
 20015c0:	1885c83a 	sub	r2,r3,r2
 20015c4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20015c8:	e0fff617 	ldw	r3,-40(fp)
 20015cc:	e0bff817 	ldw	r2,-32(fp)
 20015d0:	1885883a 	add	r2,r3,r2
 20015d4:	10c1ffcc 	andi	r3,r2,2047
 20015d8:	e0bffb17 	ldw	r2,-20(fp)
 20015dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 20015e0:	e0bffd17 	ldw	r2,-12(fp)
 20015e4:	10800048 	cmpgei	r2,r2,1
 20015e8:	103fcc1e 	bne	r2,zero,200151c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 20015ec:	e0fffa17 	ldw	r3,-24(fp)
 20015f0:	e0bffc17 	ldw	r2,-16(fp)
 20015f4:	1880141e 	bne	r3,r2,2001648 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20015f8:	e0bffe17 	ldw	r2,-8(fp)
 20015fc:	1090000c 	andi	r2,r2,16384
 2001600:	1004c03a 	cmpne	r2,r2,zero
 2001604:	1000101e 	bne	r2,zero,2001648 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2001608:	e0bffb17 	ldw	r2,-20(fp)
 200160c:	10c00a17 	ldw	r3,40(r2)
 2001610:	e0bff717 	ldw	r2,-36(fp)
 2001614:	1880051e 	bne	r3,r2,200162c <altera_avalon_jtag_uart_read+0x13c>
 2001618:	e0bffb17 	ldw	r2,-20(fp)
 200161c:	10c00917 	ldw	r3,36(r2)
 2001620:	e0bffb17 	ldw	r2,-20(fp)
 2001624:	10800117 	ldw	r2,4(r2)
 2001628:	18bff736 	bltu	r3,r2,2001608 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200162c:	e0bffb17 	ldw	r2,-20(fp)
 2001630:	10c00a17 	ldw	r3,40(r2)
 2001634:	e0bff717 	ldw	r2,-36(fp)
 2001638:	18800326 	beq	r3,r2,2001648 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200163c:	e0bffd17 	ldw	r2,-12(fp)
 2001640:	10800048 	cmpgei	r2,r2,1
 2001644:	103fb51e 	bne	r2,zero,200151c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2001648:	e0fffa17 	ldw	r3,-24(fp)
 200164c:	e0bffc17 	ldw	r2,-16(fp)
 2001650:	18802426 	beq	r3,r2,20016e4 <altera_avalon_jtag_uart_read+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001654:	0005303a 	rdctl	r2,status
 2001658:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200165c:	e0fff517 	ldw	r3,-44(fp)
 2001660:	00bfff84 	movi	r2,-2
 2001664:	1884703a 	and	r2,r3,r2
 2001668:	1001703a 	wrctl	status,r2
  
  return context;
 200166c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2001670:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2001674:	e0bffb17 	ldw	r2,-20(fp)
 2001678:	10800817 	ldw	r2,32(r2)
 200167c:	10c00054 	ori	r3,r2,1
 2001680:	e0bffb17 	ldw	r2,-20(fp)
 2001684:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001688:	e0bffb17 	ldw	r2,-20(fp)
 200168c:	10800017 	ldw	r2,0(r2)
 2001690:	11000104 	addi	r4,r2,4
 2001694:	e0bffb17 	ldw	r2,-20(fp)
 2001698:	10800817 	ldw	r2,32(r2)
 200169c:	1007883a 	mov	r3,r2
 20016a0:	2005883a 	mov	r2,r4
 20016a4:	10c00035 	stwio	r3,0(r2)
 20016a8:	e0bff917 	ldw	r2,-28(fp)
 20016ac:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 20016b0:	0005303a 	rdctl	r2,status
 20016b4:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 20016b8:	e0fff417 	ldw	r3,-48(fp)
 20016bc:	00bfff84 	movi	r2,-2
 20016c0:	1884703a 	and	r2,r3,r2
 20016c4:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 20016c8:	e0bff317 	ldw	r2,-52(fp)
 20016cc:	10c0004c 	andi	r3,r2,1
 20016d0:	e0bff417 	ldw	r2,-48(fp)
 20016d4:	10c4b03a 	or	r2,r2,r3
 20016d8:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
 20016dc:	e0bff417 	ldw	r2,-48(fp)
 20016e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 20016e4:	e0fffa17 	ldw	r3,-24(fp)
 20016e8:	e0bffc17 	ldw	r2,-16(fp)
 20016ec:	18800526 	beq	r3,r2,2001704 <altera_avalon_jtag_uart_read+0x214>
    return ptr - buffer;
 20016f0:	e0fffa17 	ldw	r3,-24(fp)
 20016f4:	e0bffc17 	ldw	r2,-16(fp)
 20016f8:	1887c83a 	sub	r3,r3,r2
 20016fc:	e0ffff15 	stw	r3,-4(fp)
 2001700:	00000906 	br	2001728 <altera_avalon_jtag_uart_read+0x238>
  else if (flags & O_NONBLOCK)
 2001704:	e0bffe17 	ldw	r2,-8(fp)
 2001708:	1090000c 	andi	r2,r2,16384
 200170c:	1005003a 	cmpeq	r2,r2,zero
 2001710:	1000031e 	bne	r2,zero,2001720 <altera_avalon_jtag_uart_read+0x230>
    return -EWOULDBLOCK;
 2001714:	00bffd44 	movi	r2,-11
 2001718:	e0bfff15 	stw	r2,-4(fp)
 200171c:	00000206 	br	2001728 <altera_avalon_jtag_uart_read+0x238>
  else
    return -EIO;
 2001720:	00bffec4 	movi	r2,-5
 2001724:	e0bfff15 	stw	r2,-4(fp)
 2001728:	e0bfff17 	ldw	r2,-4(fp)
}
 200172c:	e037883a 	mov	sp,fp
 2001730:	dfc00117 	ldw	ra,4(sp)
 2001734:	df000017 	ldw	fp,0(sp)
 2001738:	dec00204 	addi	sp,sp,8
 200173c:	f800283a 	ret

02001740 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2001740:	defff104 	addi	sp,sp,-60
 2001744:	dfc00e15 	stw	ra,56(sp)
 2001748:	df000d15 	stw	fp,52(sp)
 200174c:	df000d04 	addi	fp,sp,52
 2001750:	e13ffb15 	stw	r4,-20(fp)
 2001754:	e17ffc15 	stw	r5,-16(fp)
 2001758:	e1bffd15 	stw	r6,-12(fp)
 200175c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2001760:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2001764:	e0bffc17 	ldw	r2,-16(fp)
 2001768:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200176c:	00003a06 	br	2001858 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2001770:	e0bffb17 	ldw	r2,-20(fp)
 2001774:	10800c17 	ldw	r2,48(r2)
 2001778:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 200177c:	e0bffb17 	ldw	r2,-20(fp)
 2001780:	10800d17 	ldw	r2,52(r2)
 2001784:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 2001788:	e0fffa17 	ldw	r3,-24(fp)
 200178c:	e0bff917 	ldw	r2,-28(fp)
 2001790:	1880062e 	bgeu	r3,r2,20017ac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2001794:	e0fff917 	ldw	r3,-28(fp)
 2001798:	e0bffa17 	ldw	r2,-24(fp)
 200179c:	1885c83a 	sub	r2,r3,r2
 20017a0:	10bfffc4 	addi	r2,r2,-1
 20017a4:	e0bff815 	stw	r2,-32(fp)
 20017a8:	00000c06 	br	20017dc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 20017ac:	e0bff917 	ldw	r2,-28(fp)
 20017b0:	1005003a 	cmpeq	r2,r2,zero
 20017b4:	1000051e 	bne	r2,zero,20017cc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 20017b8:	00820004 	movi	r2,2048
 20017bc:	e0fffa17 	ldw	r3,-24(fp)
 20017c0:	10c5c83a 	sub	r2,r2,r3
 20017c4:	e0bff815 	stw	r2,-32(fp)
 20017c8:	00000406 	br	20017dc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 20017cc:	0081ffc4 	movi	r2,2047
 20017d0:	e0fffa17 	ldw	r3,-24(fp)
 20017d4:	10c5c83a 	sub	r2,r2,r3
 20017d8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 20017dc:	e0bff817 	ldw	r2,-32(fp)
 20017e0:	1005003a 	cmpeq	r2,r2,zero
 20017e4:	10001f1e 	bne	r2,zero,2001864 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 20017e8:	e0fffd17 	ldw	r3,-12(fp)
 20017ec:	e0bff817 	ldw	r2,-32(fp)
 20017f0:	1880022e 	bgeu	r3,r2,20017fc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 20017f4:	e0bffd17 	ldw	r2,-12(fp)
 20017f8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 20017fc:	e0bffb17 	ldw	r2,-20(fp)
 2001800:	10c20e04 	addi	r3,r2,2104
 2001804:	e0bffa17 	ldw	r2,-24(fp)
 2001808:	1885883a 	add	r2,r3,r2
 200180c:	e0fffc17 	ldw	r3,-16(fp)
 2001810:	1009883a 	mov	r4,r2
 2001814:	180b883a 	mov	r5,r3
 2001818:	e1bff817 	ldw	r6,-32(fp)
 200181c:	2003e480 	call	2003e48 <memcpy>
      ptr   += n;
 2001820:	e0fff817 	ldw	r3,-32(fp)
 2001824:	e0bffc17 	ldw	r2,-16(fp)
 2001828:	10c5883a 	add	r2,r2,r3
 200182c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2001830:	e0fffd17 	ldw	r3,-12(fp)
 2001834:	e0bff817 	ldw	r2,-32(fp)
 2001838:	1885c83a 	sub	r2,r3,r2
 200183c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001840:	e0fffa17 	ldw	r3,-24(fp)
 2001844:	e0bff817 	ldw	r2,-32(fp)
 2001848:	1885883a 	add	r2,r3,r2
 200184c:	10c1ffcc 	andi	r3,r2,2047
 2001850:	e0bffb17 	ldw	r2,-20(fp)
 2001854:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2001858:	e0bffd17 	ldw	r2,-12(fp)
 200185c:	10800048 	cmpgei	r2,r2,1
 2001860:	103fc31e 	bne	r2,zero,2001770 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001864:	0005303a 	rdctl	r2,status
 2001868:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200186c:	e0fff517 	ldw	r3,-44(fp)
 2001870:	00bfff84 	movi	r2,-2
 2001874:	1884703a 	and	r2,r3,r2
 2001878:	1001703a 	wrctl	status,r2
  
  return context;
 200187c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2001880:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2001884:	e0bffb17 	ldw	r2,-20(fp)
 2001888:	10800817 	ldw	r2,32(r2)
 200188c:	10c00094 	ori	r3,r2,2
 2001890:	e0bffb17 	ldw	r2,-20(fp)
 2001894:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001898:	e0bffb17 	ldw	r2,-20(fp)
 200189c:	10800017 	ldw	r2,0(r2)
 20018a0:	11000104 	addi	r4,r2,4
 20018a4:	e0bffb17 	ldw	r2,-20(fp)
 20018a8:	10800817 	ldw	r2,32(r2)
 20018ac:	1007883a 	mov	r3,r2
 20018b0:	2005883a 	mov	r2,r4
 20018b4:	10c00035 	stwio	r3,0(r2)
 20018b8:	e0bff717 	ldw	r2,-36(fp)
 20018bc:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 20018c0:	0005303a 	rdctl	r2,status
 20018c4:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 20018c8:	e0fff417 	ldw	r3,-48(fp)
 20018cc:	00bfff84 	movi	r2,-2
 20018d0:	1884703a 	and	r2,r3,r2
 20018d4:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 20018d8:	e0bff317 	ldw	r2,-52(fp)
 20018dc:	10c0004c 	andi	r3,r2,1
 20018e0:	e0bff417 	ldw	r2,-48(fp)
 20018e4:	10c4b03a 	or	r2,r2,r3
 20018e8:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
 20018ec:	e0bff417 	ldw	r2,-48(fp)
 20018f0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 20018f4:	e0bffd17 	ldw	r2,-12(fp)
 20018f8:	10800050 	cmplti	r2,r2,1
 20018fc:	1000111e 	bne	r2,zero,2001944 <altera_avalon_jtag_uart_write+0x204>
    {
      if (flags & O_NONBLOCK)
 2001900:	e0bffe17 	ldw	r2,-8(fp)
 2001904:	1090000c 	andi	r2,r2,16384
 2001908:	1004c03a 	cmpne	r2,r2,zero
 200190c:	1000101e 	bne	r2,zero,2001950 <altera_avalon_jtag_uart_write+0x210>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2001910:	e0bffb17 	ldw	r2,-20(fp)
 2001914:	10c00d17 	ldw	r3,52(r2)
 2001918:	e0bff917 	ldw	r2,-28(fp)
 200191c:	1880051e 	bne	r3,r2,2001934 <altera_avalon_jtag_uart_write+0x1f4>
 2001920:	e0bffb17 	ldw	r2,-20(fp)
 2001924:	10c00917 	ldw	r3,36(r2)
 2001928:	e0bffb17 	ldw	r2,-20(fp)
 200192c:	10800117 	ldw	r2,4(r2)
 2001930:	18bff736 	bltu	r3,r2,2001910 <altera_avalon_jtag_uart_write+0x1d0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2001934:	e0bffb17 	ldw	r2,-20(fp)
 2001938:	10c00d17 	ldw	r3,52(r2)
 200193c:	e0bff917 	ldw	r2,-28(fp)
 2001940:	18800326 	beq	r3,r2,2001950 <altera_avalon_jtag_uart_write+0x210>
        break;
    }
  }
  while (count > 0);
 2001944:	e0bffd17 	ldw	r2,-12(fp)
 2001948:	10800048 	cmpgei	r2,r2,1
 200194c:	103fc21e 	bne	r2,zero,2001858 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2001950:	e0fffc17 	ldw	r3,-16(fp)
 2001954:	e0bff617 	ldw	r2,-40(fp)
 2001958:	18800526 	beq	r3,r2,2001970 <altera_avalon_jtag_uart_write+0x230>
    return ptr - start;
 200195c:	e0fffc17 	ldw	r3,-16(fp)
 2001960:	e0bff617 	ldw	r2,-40(fp)
 2001964:	1887c83a 	sub	r3,r3,r2
 2001968:	e0ffff15 	stw	r3,-4(fp)
 200196c:	00000906 	br	2001994 <altera_avalon_jtag_uart_write+0x254>
  else if (flags & O_NONBLOCK)
 2001970:	e0bffe17 	ldw	r2,-8(fp)
 2001974:	1090000c 	andi	r2,r2,16384
 2001978:	1005003a 	cmpeq	r2,r2,zero
 200197c:	1000031e 	bne	r2,zero,200198c <altera_avalon_jtag_uart_write+0x24c>
    return -EWOULDBLOCK;
 2001980:	00bffd44 	movi	r2,-11
 2001984:	e0bfff15 	stw	r2,-4(fp)
 2001988:	00000206 	br	2001994 <altera_avalon_jtag_uart_write+0x254>
  else
    return -EIO; /* Host not connected */
 200198c:	00bffec4 	movi	r2,-5
 2001990:	e0bfff15 	stw	r2,-4(fp)
 2001994:	e0bfff17 	ldw	r2,-4(fp)
}
 2001998:	e037883a 	mov	sp,fp
 200199c:	dfc00117 	ldw	ra,4(sp)
 20019a0:	df000017 	ldw	fp,0(sp)
 20019a4:	dec00204 	addi	sp,sp,8
 20019a8:	f800283a 	ret

020019ac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 20019ac:	defff904 	addi	sp,sp,-28
 20019b0:	dfc00615 	stw	ra,24(sp)
 20019b4:	df000515 	stw	fp,20(sp)
 20019b8:	df000504 	addi	fp,sp,20
 20019bc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 20019c0:	e0bfff17 	ldw	r2,-4(fp)
 20019c4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 20019c8:	e0bfff17 	ldw	r2,-4(fp)
 20019cc:	10800104 	addi	r2,r2,4
 20019d0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20019d4:	0005303a 	rdctl	r2,status
 20019d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20019dc:	e0fffd17 	ldw	r3,-12(fp)
 20019e0:	00bfff84 	movi	r2,-2
 20019e4:	1884703a 	and	r2,r3,r2
 20019e8:	1001703a 	wrctl	status,r2
  
  return context;
 20019ec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 20019f0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 20019f4:	20037d80 	call	20037d8 <alt_tick>
 20019f8:	e0bffe17 	ldw	r2,-8(fp)
 20019fc:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2001a00:	0005303a 	rdctl	r2,status
 2001a04:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2001a08:	e0fffc17 	ldw	r3,-16(fp)
 2001a0c:	00bfff84 	movi	r2,-2
 2001a10:	1884703a 	and	r2,r3,r2
 2001a14:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2001a18:	e0bffb17 	ldw	r2,-20(fp)
 2001a1c:	10c0004c 	andi	r3,r2,1
 2001a20:	e0bffc17 	ldw	r2,-16(fp)
 2001a24:	10c4b03a 	or	r2,r2,r3
 2001a28:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
 2001a2c:	e0bffc17 	ldw	r2,-16(fp)
 2001a30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2001a34:	e037883a 	mov	sp,fp
 2001a38:	dfc00117 	ldw	ra,4(sp)
 2001a3c:	df000017 	ldw	fp,0(sp)
 2001a40:	dec00204 	addi	sp,sp,8
 2001a44:	f800283a 	ret

02001a48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2001a48:	defff804 	addi	sp,sp,-32
 2001a4c:	dfc00715 	stw	ra,28(sp)
 2001a50:	df000615 	stw	fp,24(sp)
 2001a54:	df000604 	addi	fp,sp,24
 2001a58:	e13ffc15 	stw	r4,-16(fp)
 2001a5c:	e17ffd15 	stw	r5,-12(fp)
 2001a60:	e1bffe15 	stw	r6,-8(fp)
 2001a64:	e1ffff15 	stw	r7,-4(fp)
 2001a68:	e0bfff17 	ldw	r2,-4(fp)
 2001a6c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2001a70:	00808074 	movhi	r2,513
 2001a74:	10a18104 	addi	r2,r2,-31228
 2001a78:	10800017 	ldw	r2,0(r2)
 2001a7c:	1004c03a 	cmpne	r2,r2,zero
 2001a80:	1000041e 	bne	r2,zero,2001a94 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 2001a84:	00c08074 	movhi	r3,513
 2001a88:	18e18104 	addi	r3,r3,-31228
 2001a8c:	e0bffb17 	ldw	r2,-20(fp)
 2001a90:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2001a94:	e0bffc17 	ldw	r2,-16(fp)
 2001a98:	10800104 	addi	r2,r2,4
 2001a9c:	1007883a 	mov	r3,r2
 2001aa0:	008001c4 	movi	r2,7
 2001aa4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2001aa8:	d8000015 	stw	zero,0(sp)
 2001aac:	e13ffd17 	ldw	r4,-12(fp)
 2001ab0:	e17ffe17 	ldw	r5,-8(fp)
 2001ab4:	01808034 	movhi	r6,512
 2001ab8:	31866b04 	addi	r6,r6,6572
 2001abc:	e1fffc17 	ldw	r7,-16(fp)
 2001ac0:	200272c0 	call	200272c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2001ac4:	e037883a 	mov	sp,fp
 2001ac8:	dfc00117 	ldw	ra,4(sp)
 2001acc:	df000017 	ldw	fp,0(sp)
 2001ad0:	dec00204 	addi	sp,sp,8
 2001ad4:	f800283a 	ret

02001ad8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2001ad8:	defffa04 	addi	sp,sp,-24
 2001adc:	dfc00515 	stw	ra,20(sp)
 2001ae0:	df000415 	stw	fp,16(sp)
 2001ae4:	df000404 	addi	fp,sp,16
 2001ae8:	e13ffd15 	stw	r4,-12(fp)
 2001aec:	e17ffe15 	stw	r5,-8(fp)
 2001af0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2001af4:	e0bffd17 	ldw	r2,-12(fp)
 2001af8:	10800017 	ldw	r2,0(r2)
 2001afc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2001b00:	e0bffc17 	ldw	r2,-16(fp)
 2001b04:	11000a04 	addi	r4,r2,40
 2001b08:	e0bffd17 	ldw	r2,-12(fp)
 2001b0c:	11c00217 	ldw	r7,8(r2)
 2001b10:	e17ffe17 	ldw	r5,-8(fp)
 2001b14:	e1bfff17 	ldw	r6,-4(fp)
 2001b18:	2001fd00 	call	2001fd0 <altera_avalon_uart_read>
      fd->fd_flags);
}
 2001b1c:	e037883a 	mov	sp,fp
 2001b20:	dfc00117 	ldw	ra,4(sp)
 2001b24:	df000017 	ldw	fp,0(sp)
 2001b28:	dec00204 	addi	sp,sp,8
 2001b2c:	f800283a 	ret

02001b30 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2001b30:	defffa04 	addi	sp,sp,-24
 2001b34:	dfc00515 	stw	ra,20(sp)
 2001b38:	df000415 	stw	fp,16(sp)
 2001b3c:	df000404 	addi	fp,sp,16
 2001b40:	e13ffd15 	stw	r4,-12(fp)
 2001b44:	e17ffe15 	stw	r5,-8(fp)
 2001b48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2001b4c:	e0bffd17 	ldw	r2,-12(fp)
 2001b50:	10800017 	ldw	r2,0(r2)
 2001b54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 2001b58:	e0bffc17 	ldw	r2,-16(fp)
 2001b5c:	11000a04 	addi	r4,r2,40
 2001b60:	e0bffd17 	ldw	r2,-12(fp)
 2001b64:	11c00217 	ldw	r7,8(r2)
 2001b68:	e17ffe17 	ldw	r5,-8(fp)
 2001b6c:	e1bfff17 	ldw	r6,-4(fp)
 2001b70:	20022b80 	call	20022b8 <altera_avalon_uart_write>
      fd->fd_flags);
}
 2001b74:	e037883a 	mov	sp,fp
 2001b78:	dfc00117 	ldw	ra,4(sp)
 2001b7c:	df000017 	ldw	fp,0(sp)
 2001b80:	dec00204 	addi	sp,sp,8
 2001b84:	f800283a 	ret

02001b88 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 2001b88:	defffc04 	addi	sp,sp,-16
 2001b8c:	dfc00315 	stw	ra,12(sp)
 2001b90:	df000215 	stw	fp,8(sp)
 2001b94:	df000204 	addi	fp,sp,8
 2001b98:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2001b9c:	e0bfff17 	ldw	r2,-4(fp)
 2001ba0:	10800017 	ldw	r2,0(r2)
 2001ba4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 2001ba8:	e0bffe17 	ldw	r2,-8(fp)
 2001bac:	11000a04 	addi	r4,r2,40
 2001bb0:	e0bfff17 	ldw	r2,-4(fp)
 2001bb4:	11400217 	ldw	r5,8(r2)
 2001bb8:	2001f700 	call	2001f70 <altera_avalon_uart_close>
}
 2001bbc:	e037883a 	mov	sp,fp
 2001bc0:	dfc00117 	ldw	ra,4(sp)
 2001bc4:	df000017 	ldw	fp,0(sp)
 2001bc8:	dec00204 	addi	sp,sp,8
 2001bcc:	f800283a 	ret

02001bd0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 2001bd0:	defff704 	addi	sp,sp,-36
 2001bd4:	dfc00815 	stw	ra,32(sp)
 2001bd8:	df000715 	stw	fp,28(sp)
 2001bdc:	df000704 	addi	fp,sp,28
 2001be0:	e13ffc15 	stw	r4,-16(fp)
 2001be4:	e17ffd15 	stw	r5,-12(fp)
 2001be8:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
 2001bec:	e0bffc17 	ldw	r2,-16(fp)
 2001bf0:	10800017 	ldw	r2,0(r2)
 2001bf4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 2001bf8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2001bfc:	1004c03a 	cmpne	r2,r2,zero
 2001c00:	1000061e 	bne	r2,zero,2001c1c <altera_avalon_uart_init+0x4c>
 2001c04:	0005883a 	mov	r2,zero
 2001c08:	1004c03a 	cmpne	r2,r2,zero
 2001c0c:	1000031e 	bne	r2,zero,2001c1c <altera_avalon_uart_init+0x4c>
 2001c10:	0005883a 	mov	r2,zero
 2001c14:	1005003a 	cmpeq	r2,r2,zero
 2001c18:	1000031e 	bne	r2,zero,2001c28 <altera_avalon_uart_init+0x58>
 2001c1c:	00800044 	movi	r2,1
 2001c20:	e0bfff15 	stw	r2,-4(fp)
 2001c24:	00000106 	br	2001c2c <altera_avalon_uart_init+0x5c>
 2001c28:	e03fff15 	stw	zero,-4(fp)
 2001c2c:	e0bfff17 	ldw	r2,-4(fp)
 2001c30:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 2001c34:	e0bffa17 	ldw	r2,-24(fp)
 2001c38:	1004c03a 	cmpne	r2,r2,zero
 2001c3c:	1000111e 	bne	r2,zero,2001c84 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 2001c40:	e0fffc17 	ldw	r3,-16(fp)
 2001c44:	00832004 	movi	r2,3200
 2001c48:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 2001c4c:	e0bffb17 	ldw	r2,-20(fp)
 2001c50:	11000304 	addi	r4,r2,12
 2001c54:	e0bffc17 	ldw	r2,-16(fp)
 2001c58:	10800117 	ldw	r2,4(r2)
 2001c5c:	1007883a 	mov	r3,r2
 2001c60:	2005883a 	mov	r2,r4
 2001c64:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 2001c68:	d8000015 	stw	zero,0(sp)
 2001c6c:	e13ffd17 	ldw	r4,-12(fp)
 2001c70:	e17ffe17 	ldw	r5,-8(fp)
 2001c74:	01808034 	movhi	r6,512
 2001c78:	31872604 	addi	r6,r6,7320
 2001c7c:	e1fffc17 	ldw	r7,-16(fp)
 2001c80:	200272c0 	call	200272c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 2001c84:	e037883a 	mov	sp,fp
 2001c88:	dfc00117 	ldw	ra,4(sp)
 2001c8c:	df000017 	ldw	fp,0(sp)
 2001c90:	dec00204 	addi	sp,sp,8
 2001c94:	f800283a 	ret

02001c98 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 2001c98:	defffa04 	addi	sp,sp,-24
 2001c9c:	dfc00515 	stw	ra,20(sp)
 2001ca0:	df000415 	stw	fp,16(sp)
 2001ca4:	df000404 	addi	fp,sp,16
 2001ca8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 2001cac:	e0bfff17 	ldw	r2,-4(fp)
 2001cb0:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
 2001cb4:	e0bffd17 	ldw	r2,-12(fp)
 2001cb8:	10800017 	ldw	r2,0(r2)
 2001cbc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 2001cc0:	e0bffc17 	ldw	r2,-16(fp)
 2001cc4:	10800204 	addi	r2,r2,8
 2001cc8:	10800037 	ldwio	r2,0(r2)
 2001ccc:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 2001cd0:	e0bffc17 	ldw	r2,-16(fp)
 2001cd4:	10800204 	addi	r2,r2,8
 2001cd8:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 2001cdc:	e0bffc17 	ldw	r2,-16(fp)
 2001ce0:	10800204 	addi	r2,r2,8
 2001ce4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 2001ce8:	e0bffe17 	ldw	r2,-8(fp)
 2001cec:	1080200c 	andi	r2,r2,128
 2001cf0:	1005003a 	cmpeq	r2,r2,zero
 2001cf4:	1000031e 	bne	r2,zero,2001d04 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 2001cf8:	e13ffd17 	ldw	r4,-12(fp)
 2001cfc:	e17ffe17 	ldw	r5,-8(fp)
 2001d00:	2001d340 	call	2001d34 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 2001d04:	e0bffe17 	ldw	r2,-8(fp)
 2001d08:	1081100c 	andi	r2,r2,1088
 2001d0c:	1005003a 	cmpeq	r2,r2,zero
 2001d10:	1000031e 	bne	r2,zero,2001d20 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 2001d14:	e13ffd17 	ldw	r4,-12(fp)
 2001d18:	e17ffe17 	ldw	r5,-8(fp)
 2001d1c:	2001e140 	call	2001e14 <altera_avalon_uart_txirq>
  }
  

}
 2001d20:	e037883a 	mov	sp,fp
 2001d24:	dfc00117 	ldw	ra,4(sp)
 2001d28:	df000017 	ldw	fp,0(sp)
 2001d2c:	dec00204 	addi	sp,sp,8
 2001d30:	f800283a 	ret

02001d34 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 2001d34:	defffc04 	addi	sp,sp,-16
 2001d38:	df000315 	stw	fp,12(sp)
 2001d3c:	df000304 	addi	fp,sp,12
 2001d40:	e13ffe15 	stw	r4,-8(fp)
 2001d44:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 2001d48:	e0bfff17 	ldw	r2,-4(fp)
 2001d4c:	108000cc 	andi	r2,r2,3
 2001d50:	1004c03a 	cmpne	r2,r2,zero
 2001d54:	10002b1e 	bne	r2,zero,2001e04 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 2001d58:	e0bffe17 	ldw	r2,-8(fp)
 2001d5c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2001d60:	e0bffe17 	ldw	r2,-8(fp)
 2001d64:	10800317 	ldw	r2,12(r2)
 2001d68:	10800044 	addi	r2,r2,1
 2001d6c:	10800fcc 	andi	r2,r2,63
 2001d70:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 2001d74:	e0bffe17 	ldw	r2,-8(fp)
 2001d78:	11000317 	ldw	r4,12(r2)
 2001d7c:	e0bffe17 	ldw	r2,-8(fp)
 2001d80:	10800017 	ldw	r2,0(r2)
 2001d84:	10800037 	ldwio	r2,0(r2)
 2001d88:	1007883a 	mov	r3,r2
 2001d8c:	e0bffe17 	ldw	r2,-8(fp)
 2001d90:	2085883a 	add	r2,r4,r2
 2001d94:	10800704 	addi	r2,r2,28
 2001d98:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 2001d9c:	e0fffe17 	ldw	r3,-8(fp)
 2001da0:	e0bffd17 	ldw	r2,-12(fp)
 2001da4:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2001da8:	e0bffe17 	ldw	r2,-8(fp)
 2001dac:	10800317 	ldw	r2,12(r2)
 2001db0:	10800044 	addi	r2,r2,1
 2001db4:	10800fcc 	andi	r2,r2,63
 2001db8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 2001dbc:	e0bffe17 	ldw	r2,-8(fp)
 2001dc0:	10c00217 	ldw	r3,8(r2)
 2001dc4:	e0bffd17 	ldw	r2,-12(fp)
 2001dc8:	18800e1e 	bne	r3,r2,2001e04 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2001dcc:	e0bffe17 	ldw	r2,-8(fp)
 2001dd0:	10c00117 	ldw	r3,4(r2)
 2001dd4:	00bfdfc4 	movi	r2,-129
 2001dd8:	1886703a 	and	r3,r3,r2
 2001ddc:	e0bffe17 	ldw	r2,-8(fp)
 2001de0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 2001de4:	e0bffe17 	ldw	r2,-8(fp)
 2001de8:	10800017 	ldw	r2,0(r2)
 2001dec:	11000304 	addi	r4,r2,12
 2001df0:	e0bffe17 	ldw	r2,-8(fp)
 2001df4:	10800117 	ldw	r2,4(r2)
 2001df8:	1007883a 	mov	r3,r2
 2001dfc:	2005883a 	mov	r2,r4
 2001e00:	10c00035 	stwio	r3,0(r2)
  }   
}
 2001e04:	e037883a 	mov	sp,fp
 2001e08:	df000017 	ldw	fp,0(sp)
 2001e0c:	dec00104 	addi	sp,sp,4
 2001e10:	f800283a 	ret

02001e14 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 2001e14:	defffd04 	addi	sp,sp,-12
 2001e18:	df000215 	stw	fp,8(sp)
 2001e1c:	df000204 	addi	fp,sp,8
 2001e20:	e13ffe15 	stw	r4,-8(fp)
 2001e24:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 2001e28:	e0bffe17 	ldw	r2,-8(fp)
 2001e2c:	10c00417 	ldw	r3,16(r2)
 2001e30:	e0bffe17 	ldw	r2,-8(fp)
 2001e34:	10800517 	ldw	r2,20(r2)
 2001e38:	18803626 	beq	r3,r2,2001f14 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2001e3c:	e0bffe17 	ldw	r2,-8(fp)
 2001e40:	10800617 	ldw	r2,24(r2)
 2001e44:	1080008c 	andi	r2,r2,2
 2001e48:	1005003a 	cmpeq	r2,r2,zero
 2001e4c:	1000041e 	bne	r2,zero,2001e60 <altera_avalon_uart_txirq+0x4c>
 2001e50:	e0bfff17 	ldw	r2,-4(fp)
 2001e54:	1082000c 	andi	r2,r2,2048
 2001e58:	1005003a 	cmpeq	r2,r2,zero
 2001e5c:	10001e1e 	bne	r2,zero,2001ed8 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 2001e60:	e0bffe17 	ldw	r2,-8(fp)
 2001e64:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 2001e68:	e0bffe17 	ldw	r2,-8(fp)
 2001e6c:	10800017 	ldw	r2,0(r2)
 2001e70:	11000104 	addi	r4,r2,4
 2001e74:	e0bffe17 	ldw	r2,-8(fp)
 2001e78:	10c00417 	ldw	r3,16(r2)
 2001e7c:	e0bffe17 	ldw	r2,-8(fp)
 2001e80:	1885883a 	add	r2,r3,r2
 2001e84:	10801704 	addi	r2,r2,92
 2001e88:	10800003 	ldbu	r2,0(r2)
 2001e8c:	10c03fcc 	andi	r3,r2,255
 2001e90:	2005883a 	mov	r2,r4
 2001e94:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 2001e98:	e0bffe17 	ldw	r2,-8(fp)
 2001e9c:	10800417 	ldw	r2,16(r2)
 2001ea0:	10c00044 	addi	r3,r2,1
 2001ea4:	e0bffe17 	ldw	r2,-8(fp)
 2001ea8:	10c00415 	stw	r3,16(r2)
 2001eac:	e0bffe17 	ldw	r2,-8(fp)
 2001eb0:	10800417 	ldw	r2,16(r2)
 2001eb4:	10c00fcc 	andi	r3,r2,63
 2001eb8:	e0bffe17 	ldw	r2,-8(fp)
 2001ebc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2001ec0:	e0bffe17 	ldw	r2,-8(fp)
 2001ec4:	10800117 	ldw	r2,4(r2)
 2001ec8:	10c01014 	ori	r3,r2,64
 2001ecc:	e0bffe17 	ldw	r2,-8(fp)
 2001ed0:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 2001ed4:	00000f06 	br	2001f14 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 2001ed8:	e0bffe17 	ldw	r2,-8(fp)
 2001edc:	10800017 	ldw	r2,0(r2)
 2001ee0:	10800204 	addi	r2,r2,8
 2001ee4:	10800037 	ldwio	r2,0(r2)
 2001ee8:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2001eec:	e0bfff17 	ldw	r2,-4(fp)
 2001ef0:	1082000c 	andi	r2,r2,2048
 2001ef4:	1004c03a 	cmpne	r2,r2,zero
 2001ef8:	1000061e 	bne	r2,zero,2001f14 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2001efc:	e0bffe17 	ldw	r2,-8(fp)
 2001f00:	10c00117 	ldw	r3,4(r2)
 2001f04:	00bfefc4 	movi	r2,-65
 2001f08:	1886703a 	and	r3,r3,r2
 2001f0c:	e0bffe17 	ldw	r2,-8(fp)
 2001f10:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 2001f14:	e0bffe17 	ldw	r2,-8(fp)
 2001f18:	10c00417 	ldw	r3,16(r2)
 2001f1c:	e0bffe17 	ldw	r2,-8(fp)
 2001f20:	10800517 	ldw	r2,20(r2)
 2001f24:	1880061e 	bne	r3,r2,2001f40 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2001f28:	e0bffe17 	ldw	r2,-8(fp)
 2001f2c:	10c00117 	ldw	r3,4(r2)
 2001f30:	00beefc4 	movi	r2,-1089
 2001f34:	1886703a 	and	r3,r3,r2
 2001f38:	e0bffe17 	ldw	r2,-8(fp)
 2001f3c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2001f40:	e0bffe17 	ldw	r2,-8(fp)
 2001f44:	10800017 	ldw	r2,0(r2)
 2001f48:	11000304 	addi	r4,r2,12
 2001f4c:	e0bffe17 	ldw	r2,-8(fp)
 2001f50:	10800117 	ldw	r2,4(r2)
 2001f54:	1007883a 	mov	r3,r2
 2001f58:	2005883a 	mov	r2,r4
 2001f5c:	10c00035 	stwio	r3,0(r2)
}
 2001f60:	e037883a 	mov	sp,fp
 2001f64:	df000017 	ldw	fp,0(sp)
 2001f68:	dec00104 	addi	sp,sp,4
 2001f6c:	f800283a 	ret

02001f70 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 2001f70:	defffc04 	addi	sp,sp,-16
 2001f74:	df000315 	stw	fp,12(sp)
 2001f78:	df000304 	addi	fp,sp,12
 2001f7c:	e13ffd15 	stw	r4,-12(fp)
 2001f80:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 2001f84:	00000706 	br	2001fa4 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2001f88:	e0bffe17 	ldw	r2,-8(fp)
 2001f8c:	1090000c 	andi	r2,r2,16384
 2001f90:	1005003a 	cmpeq	r2,r2,zero
 2001f94:	1000031e 	bne	r2,zero,2001fa4 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
 2001f98:	00bffd44 	movi	r2,-11
 2001f9c:	e0bfff15 	stw	r2,-4(fp)
 2001fa0:	00000606 	br	2001fbc <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 2001fa4:	e0bffd17 	ldw	r2,-12(fp)
 2001fa8:	10c00417 	ldw	r3,16(r2)
 2001fac:	e0bffd17 	ldw	r2,-12(fp)
 2001fb0:	10800517 	ldw	r2,20(r2)
 2001fb4:	18bff41e 	bne	r3,r2,2001f88 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2001fb8:	e03fff15 	stw	zero,-4(fp)
 2001fbc:	e0bfff17 	ldw	r2,-4(fp)
}
 2001fc0:	e037883a 	mov	sp,fp
 2001fc4:	df000017 	ldw	fp,0(sp)
 2001fc8:	dec00104 	addi	sp,sp,4
 2001fcc:	f800283a 	ret

02001fd0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 2001fd0:	deffee04 	addi	sp,sp,-72
 2001fd4:	dfc01115 	stw	ra,68(sp)
 2001fd8:	df001015 	stw	fp,64(sp)
 2001fdc:	df001004 	addi	fp,sp,64
 2001fe0:	e13ffb15 	stw	r4,-20(fp)
 2001fe4:	e17ffc15 	stw	r5,-16(fp)
 2001fe8:	e1bffd15 	stw	r6,-12(fp)
 2001fec:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 2001ff0:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
 2001ff4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 2001ff8:	e0bffe17 	ldw	r2,-8(fp)
 2001ffc:	1090000c 	andi	r2,r2,16384
 2002000:	1005003a 	cmpeq	r2,r2,zero
 2002004:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 2002008:	e0bffb17 	ldw	r2,-20(fp)
 200200c:	10800217 	ldw	r2,8(r2)
 2002010:	10800044 	addi	r2,r2,1
 2002014:	10800fcc 	andi	r2,r2,63
 2002018:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 200201c:	00001906 	br	2002084 <altera_avalon_uart_read+0xb4>
    {
      count++;
 2002020:	e0bff617 	ldw	r2,-40(fp)
 2002024:	10800044 	addi	r2,r2,1
 2002028:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 200202c:	e0bffb17 	ldw	r2,-20(fp)
 2002030:	10c00217 	ldw	r3,8(r2)
 2002034:	e0bffb17 	ldw	r2,-20(fp)
 2002038:	1885883a 	add	r2,r3,r2
 200203c:	10800704 	addi	r2,r2,28
 2002040:	10800003 	ldbu	r2,0(r2)
 2002044:	1007883a 	mov	r3,r2
 2002048:	e0bffc17 	ldw	r2,-16(fp)
 200204c:	10c00005 	stb	r3,0(r2)
 2002050:	e0bffc17 	ldw	r2,-16(fp)
 2002054:	10800044 	addi	r2,r2,1
 2002058:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 200205c:	e0bffb17 	ldw	r2,-20(fp)
 2002060:	10800217 	ldw	r2,8(r2)
 2002064:	10c00044 	addi	r3,r2,1
 2002068:	e0bffb17 	ldw	r2,-20(fp)
 200206c:	10c00215 	stw	r3,8(r2)
 2002070:	e0bffb17 	ldw	r2,-20(fp)
 2002074:	10800217 	ldw	r2,8(r2)
 2002078:	10c00fcc 	andi	r3,r2,63
 200207c:	e0bffb17 	ldw	r2,-20(fp)
 2002080:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2002084:	e0fff617 	ldw	r3,-40(fp)
 2002088:	e0bffd17 	ldw	r2,-12(fp)
 200208c:	1880050e 	bge	r3,r2,20020a4 <altera_avalon_uart_read+0xd4>
 2002090:	e0bffb17 	ldw	r2,-20(fp)
 2002094:	10c00217 	ldw	r3,8(r2)
 2002098:	e0bffb17 	ldw	r2,-20(fp)
 200209c:	10800317 	ldw	r2,12(r2)
 20020a0:	18bfdf1e 	bne	r3,r2,2002020 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 20020a4:	e0bff617 	ldw	r2,-40(fp)
 20020a8:	1004c03a 	cmpne	r2,r2,zero
 20020ac:	1000321e 	bne	r2,zero,2002178 <altera_avalon_uart_read+0x1a8>
 20020b0:	e0bffb17 	ldw	r2,-20(fp)
 20020b4:	10c00217 	ldw	r3,8(r2)
 20020b8:	e0bffb17 	ldw	r2,-20(fp)
 20020bc:	10800317 	ldw	r2,12(r2)
 20020c0:	18802d1e 	bne	r3,r2,2002178 <altera_avalon_uart_read+0x1a8>
    {
      if (!block)
 20020c4:	e0bff917 	ldw	r2,-28(fp)
 20020c8:	1004c03a 	cmpne	r2,r2,zero
 20020cc:	1000061e 	bne	r2,zero,20020e8 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 20020d0:	20022580 	call	2002258 <alt_get_errno>
 20020d4:	00c002c4 	movi	r3,11
 20020d8:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 20020dc:	00800044 	movi	r2,1
 20020e0:	e0bff705 	stb	r2,-36(fp)
        break;
 20020e4:	00002a06 	br	2002190 <altera_avalon_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20020e8:	0005303a 	rdctl	r2,status
 20020ec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20020f0:	e0fff517 	ldw	r3,-44(fp)
 20020f4:	00bfff84 	movi	r2,-2
 20020f8:	1884703a 	and	r2,r3,r2
 20020fc:	1001703a 	wrctl	status,r2
  
  return context;
 2002100:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 2002104:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2002108:	e0bffb17 	ldw	r2,-20(fp)
 200210c:	10800117 	ldw	r2,4(r2)
 2002110:	10c02014 	ori	r3,r2,128
 2002114:	e0bffb17 	ldw	r2,-20(fp)
 2002118:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200211c:	e0bffb17 	ldw	r2,-20(fp)
 2002120:	10800017 	ldw	r2,0(r2)
 2002124:	11000304 	addi	r4,r2,12
 2002128:	e0bffb17 	ldw	r2,-20(fp)
 200212c:	10800117 	ldw	r2,4(r2)
 2002130:	1007883a 	mov	r3,r2
 2002134:	2005883a 	mov	r2,r4
 2002138:	10c00035 	stwio	r3,0(r2)
 200213c:	e0bffa17 	ldw	r2,-24(fp)
 2002140:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2002144:	0005303a 	rdctl	r2,status
 2002148:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 200214c:	e0fff417 	ldw	r3,-48(fp)
 2002150:	00bfff84 	movi	r2,-2
 2002154:	1884703a 	and	r2,r3,r2
 2002158:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 200215c:	e0bff317 	ldw	r2,-52(fp)
 2002160:	10c0004c 	andi	r3,r2,1
 2002164:	e0bff417 	ldw	r2,-48(fp)
 2002168:	10c4b03a 	or	r2,r2,r3
 200216c:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
 2002170:	e0bff417 	ldw	r2,-48(fp)
 2002174:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 2002178:	e0bff617 	ldw	r2,-40(fp)
 200217c:	1004c03a 	cmpne	r2,r2,zero
 2002180:	1000031e 	bne	r2,zero,2002190 <altera_avalon_uart_read+0x1c0>
 2002184:	e0bffd17 	ldw	r2,-12(fp)
 2002188:	1004c03a 	cmpne	r2,r2,zero
 200218c:	103fbd1e 	bne	r2,zero,2002084 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002190:	0005303a 	rdctl	r2,status
 2002194:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002198:	e0fff217 	ldw	r3,-56(fp)
 200219c:	00bfff84 	movi	r2,-2
 20021a0:	1884703a 	and	r2,r3,r2
 20021a4:	1001703a 	wrctl	status,r2
  
  return context;
 20021a8:	e0bff217 	ldw	r2,-56(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 20021ac:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 20021b0:	e0bffb17 	ldw	r2,-20(fp)
 20021b4:	10800117 	ldw	r2,4(r2)
 20021b8:	10c02014 	ori	r3,r2,128
 20021bc:	e0bffb17 	ldw	r2,-20(fp)
 20021c0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20021c4:	e0bffb17 	ldw	r2,-20(fp)
 20021c8:	10800017 	ldw	r2,0(r2)
 20021cc:	11000304 	addi	r4,r2,12
 20021d0:	e0bffb17 	ldw	r2,-20(fp)
 20021d4:	10800117 	ldw	r2,4(r2)
 20021d8:	1007883a 	mov	r3,r2
 20021dc:	2005883a 	mov	r2,r4
 20021e0:	10c00035 	stwio	r3,0(r2)
 20021e4:	e0bffa17 	ldw	r2,-24(fp)
 20021e8:	e0bff015 	stw	r2,-64(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 20021ec:	0005303a 	rdctl	r2,status
 20021f0:	e0bff115 	stw	r2,-60(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 20021f4:	e0fff117 	ldw	r3,-60(fp)
 20021f8:	00bfff84 	movi	r2,-2
 20021fc:	1884703a 	and	r2,r3,r2
 2002200:	e0bff115 	stw	r2,-60(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2002204:	e0bff017 	ldw	r2,-64(fp)
 2002208:	10c0004c 	andi	r3,r2,1
 200220c:	e0bff117 	ldw	r2,-60(fp)
 2002210:	10c4b03a 	or	r2,r2,r3
 2002214:	e0bff115 	stw	r2,-60(fp)
  
  NIOS2_WRITE_STATUS (status);
 2002218:	e0bff117 	ldw	r2,-60(fp)
 200221c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 2002220:	e0bff703 	ldbu	r2,-36(fp)
 2002224:	1005003a 	cmpeq	r2,r2,zero
 2002228:	1000031e 	bne	r2,zero,2002238 <altera_avalon_uart_read+0x268>
    return ~EWOULDBLOCK;
 200222c:	00bffd04 	movi	r2,-12
 2002230:	e0bfff15 	stw	r2,-4(fp)
 2002234:	00000206 	br	2002240 <altera_avalon_uart_read+0x270>
  }
  else {
    return count;
 2002238:	e0bff617 	ldw	r2,-40(fp)
 200223c:	e0bfff15 	stw	r2,-4(fp)
 2002240:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 2002244:	e037883a 	mov	sp,fp
 2002248:	dfc00117 	ldw	ra,4(sp)
 200224c:	df000017 	ldw	fp,0(sp)
 2002250:	dec00204 	addi	sp,sp,8
 2002254:	f800283a 	ret

02002258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002258:	defffd04 	addi	sp,sp,-12
 200225c:	dfc00215 	stw	ra,8(sp)
 2002260:	df000115 	stw	fp,4(sp)
 2002264:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002268:	00808074 	movhi	r2,513
 200226c:	10a16d04 	addi	r2,r2,-31308
 2002270:	10800017 	ldw	r2,0(r2)
 2002274:	1005003a 	cmpeq	r2,r2,zero
 2002278:	1000061e 	bne	r2,zero,2002294 <alt_get_errno+0x3c>
 200227c:	00808074 	movhi	r2,513
 2002280:	10a16d04 	addi	r2,r2,-31308
 2002284:	10800017 	ldw	r2,0(r2)
 2002288:	103ee83a 	callr	r2
 200228c:	e0bfff15 	stw	r2,-4(fp)
 2002290:	00000306 	br	20022a0 <alt_get_errno+0x48>
 2002294:	00808074 	movhi	r2,513
 2002298:	10a18304 	addi	r2,r2,-31220
 200229c:	e0bfff15 	stw	r2,-4(fp)
 20022a0:	e0bfff17 	ldw	r2,-4(fp)
}
 20022a4:	e037883a 	mov	sp,fp
 20022a8:	dfc00117 	ldw	ra,4(sp)
 20022ac:	df000017 	ldw	fp,0(sp)
 20022b0:	dec00204 	addi	sp,sp,8
 20022b4:	f800283a 	ret

020022b8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 20022b8:	defff004 	addi	sp,sp,-64
 20022bc:	dfc00f15 	stw	ra,60(sp)
 20022c0:	df000e15 	stw	fp,56(sp)
 20022c4:	df000e04 	addi	fp,sp,56
 20022c8:	e13ffc15 	stw	r4,-16(fp)
 20022cc:	e17ffd15 	stw	r5,-12(fp)
 20022d0:	e1bffe15 	stw	r6,-8(fp)
 20022d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 20022d8:	e0bffe17 	ldw	r2,-8(fp)
 20022dc:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 20022e0:	e0bfff17 	ldw	r2,-4(fp)
 20022e4:	1090000c 	andi	r2,r2,16384
 20022e8:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 20022ec:	00004b06 	br	200241c <altera_avalon_uart_write+0x164>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20022f0:	e0bffc17 	ldw	r2,-16(fp)
 20022f4:	10800517 	ldw	r2,20(r2)
 20022f8:	10800044 	addi	r2,r2,1
 20022fc:	10800fcc 	andi	r2,r2,63
 2002300:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 2002304:	e0bffc17 	ldw	r2,-16(fp)
 2002308:	10c00417 	ldw	r3,16(r2)
 200230c:	e0bff917 	ldw	r2,-28(fp)
 2002310:	1880301e 	bne	r3,r2,20023d4 <altera_avalon_uart_write+0x11c>
    {
      if (no_block)
 2002314:	e0bffa17 	ldw	r2,-24(fp)
 2002318:	1005003a 	cmpeq	r2,r2,zero
 200231c:	1000051e 	bne	r2,zero,2002334 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 2002320:	20024d80 	call	20024d8 <alt_get_errno>
 2002324:	1007883a 	mov	r3,r2
 2002328:	008002c4 	movi	r2,11
 200232c:	18800015 	stw	r2,0(r3)
        break;
 2002330:	00003d06 	br	2002428 <altera_avalon_uart_write+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002334:	0005303a 	rdctl	r2,status
 2002338:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200233c:	e0fff717 	ldw	r3,-36(fp)
 2002340:	00bfff84 	movi	r2,-2
 2002344:	1884703a 	and	r2,r3,r2
 2002348:	1001703a 	wrctl	status,r2
  
  return context;
 200234c:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 2002350:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2002354:	e0bffc17 	ldw	r2,-16(fp)
 2002358:	10800117 	ldw	r2,4(r2)
 200235c:	10c11014 	ori	r3,r2,1088
 2002360:	e0bffc17 	ldw	r2,-16(fp)
 2002364:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2002368:	e0bffc17 	ldw	r2,-16(fp)
 200236c:	10800017 	ldw	r2,0(r2)
 2002370:	11000304 	addi	r4,r2,12
 2002374:	e0bffc17 	ldw	r2,-16(fp)
 2002378:	10800117 	ldw	r2,4(r2)
 200237c:	1007883a 	mov	r3,r2
 2002380:	2005883a 	mov	r2,r4
 2002384:	10c00035 	stwio	r3,0(r2)
 2002388:	e0bffb17 	ldw	r2,-20(fp)
 200238c:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2002390:	0005303a 	rdctl	r2,status
 2002394:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2002398:	e0fff617 	ldw	r3,-40(fp)
 200239c:	00bfff84 	movi	r2,-2
 20023a0:	1884703a 	and	r2,r3,r2
 20023a4:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 20023a8:	e0bff517 	ldw	r2,-44(fp)
 20023ac:	10c0004c 	andi	r3,r2,1
 20023b0:	e0bff617 	ldw	r2,-40(fp)
 20023b4:	10c4b03a 	or	r2,r2,r3
 20023b8:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
 20023bc:	e0bff617 	ldw	r2,-40(fp)
 20023c0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 20023c4:	e0bffc17 	ldw	r2,-16(fp)
 20023c8:	10c00417 	ldw	r3,16(r2)
 20023cc:	e0bff917 	ldw	r2,-28(fp)
 20023d0:	18bffc26 	beq	r3,r2,20023c4 <altera_avalon_uart_write+0x10c>
      }
    }

    count--;
 20023d4:	e0bff817 	ldw	r2,-32(fp)
 20023d8:	10bfffc4 	addi	r2,r2,-1
 20023dc:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 20023e0:	e0bffc17 	ldw	r2,-16(fp)
 20023e4:	10c00517 	ldw	r3,20(r2)
 20023e8:	e0bffd17 	ldw	r2,-12(fp)
 20023ec:	10800003 	ldbu	r2,0(r2)
 20023f0:	1009883a 	mov	r4,r2
 20023f4:	e0bffc17 	ldw	r2,-16(fp)
 20023f8:	1885883a 	add	r2,r3,r2
 20023fc:	10801704 	addi	r2,r2,92
 2002400:	11000005 	stb	r4,0(r2)
 2002404:	e0bffd17 	ldw	r2,-12(fp)
 2002408:	10800044 	addi	r2,r2,1
 200240c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 2002410:	e0fffc17 	ldw	r3,-16(fp)
 2002414:	e0bff917 	ldw	r2,-28(fp)
 2002418:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 200241c:	e0bff817 	ldw	r2,-32(fp)
 2002420:	1004c03a 	cmpne	r2,r2,zero
 2002424:	103fb21e 	bne	r2,zero,20022f0 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002428:	0005303a 	rdctl	r2,status
 200242c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002430:	e0fff417 	ldw	r3,-48(fp)
 2002434:	00bfff84 	movi	r2,-2
 2002438:	1884703a 	and	r2,r3,r2
 200243c:	1001703a 	wrctl	status,r2
  
  return context;
 2002440:	e0bff417 	ldw	r2,-48(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 2002444:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2002448:	e0bffc17 	ldw	r2,-16(fp)
 200244c:	10800117 	ldw	r2,4(r2)
 2002450:	10c11014 	ori	r3,r2,1088
 2002454:	e0bffc17 	ldw	r2,-16(fp)
 2002458:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200245c:	e0bffc17 	ldw	r2,-16(fp)
 2002460:	10800017 	ldw	r2,0(r2)
 2002464:	11000304 	addi	r4,r2,12
 2002468:	e0bffc17 	ldw	r2,-16(fp)
 200246c:	10800117 	ldw	r2,4(r2)
 2002470:	1007883a 	mov	r3,r2
 2002474:	2005883a 	mov	r2,r4
 2002478:	10c00035 	stwio	r3,0(r2)
 200247c:	e0bffb17 	ldw	r2,-20(fp)
 2002480:	e0bff215 	stw	r2,-56(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2002484:	0005303a 	rdctl	r2,status
 2002488:	e0bff315 	stw	r2,-52(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 200248c:	e0fff317 	ldw	r3,-52(fp)
 2002490:	00bfff84 	movi	r2,-2
 2002494:	1884703a 	and	r2,r3,r2
 2002498:	e0bff315 	stw	r2,-52(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 200249c:	e0bff217 	ldw	r2,-56(fp)
 20024a0:	10c0004c 	andi	r3,r2,1
 20024a4:	e0bff317 	ldw	r2,-52(fp)
 20024a8:	10c4b03a 	or	r2,r2,r3
 20024ac:	e0bff315 	stw	r2,-52(fp)
  
  NIOS2_WRITE_STATUS (status);
 20024b0:	e0bff317 	ldw	r2,-52(fp)
 20024b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 20024b8:	e0fffe17 	ldw	r3,-8(fp)
 20024bc:	e0bff817 	ldw	r2,-32(fp)
 20024c0:	1885c83a 	sub	r2,r3,r2
}
 20024c4:	e037883a 	mov	sp,fp
 20024c8:	dfc00117 	ldw	ra,4(sp)
 20024cc:	df000017 	ldw	fp,0(sp)
 20024d0:	dec00204 	addi	sp,sp,8
 20024d4:	f800283a 	ret

020024d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20024d8:	defffd04 	addi	sp,sp,-12
 20024dc:	dfc00215 	stw	ra,8(sp)
 20024e0:	df000115 	stw	fp,4(sp)
 20024e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20024e8:	00808074 	movhi	r2,513
 20024ec:	10a16d04 	addi	r2,r2,-31308
 20024f0:	10800017 	ldw	r2,0(r2)
 20024f4:	1005003a 	cmpeq	r2,r2,zero
 20024f8:	1000061e 	bne	r2,zero,2002514 <alt_get_errno+0x3c>
 20024fc:	00808074 	movhi	r2,513
 2002500:	10a16d04 	addi	r2,r2,-31308
 2002504:	10800017 	ldw	r2,0(r2)
 2002508:	103ee83a 	callr	r2
 200250c:	e0bfff15 	stw	r2,-4(fp)
 2002510:	00000306 	br	2002520 <alt_get_errno+0x48>
 2002514:	00808074 	movhi	r2,513
 2002518:	10a18304 	addi	r2,r2,-31220
 200251c:	e0bfff15 	stw	r2,-4(fp)
 2002520:	e0bfff17 	ldw	r2,-4(fp)
}
 2002524:	e037883a 	mov	sp,fp
 2002528:	dfc00117 	ldw	ra,4(sp)
 200252c:	df000017 	ldw	fp,0(sp)
 2002530:	dec00204 	addi	sp,sp,8
 2002534:	f800283a 	ret

02002538 <VIC_0_VECTOR_TABLE>:

    .section .text, "xa"
    .align 2
    .globl VIC_0_VECTOR_TABLE
VIC_0_VECTOR_TABLE:
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2002538:	0030e03a 	nextpc	et
 200253c:	20025b81 	jmpi	20025b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2002548:	0030e03a 	nextpc	et
 200254c:	20025b81 	jmpi	20025b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2002558:	0030e03a 	nextpc	et
 200255c:	20025b81 	jmpi	20025b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2002568:	0030e03a 	nextpc	et
 200256c:	20025b81 	jmpi	20025b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2002578:	0030e03a 	nextpc	et
 200257c:	20025b81 	jmpi	20025b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2002588:	0030e03a 	nextpc	et
 200258c:	20025b81 	jmpi	20025b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 2002598:	0030e03a 	nextpc	et
 200259c:	20025b81 	jmpi	20025b8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
 20025a8:	0030e03a 	nextpc	et
 20025ac:	20025b81 	jmpi	20025b8 <alt_shadow_non_preemptive_interrupt>
	...

020025b8 <alt_shadow_non_preemptive_interrupt>:
    .section ALTERA_VIC_DRIVER_LINKER_SECTION
    .set nobreak
    .globl alt_shadow_non_preemptive_interrupt
alt_shadow_non_preemptive_interrupt:

    ldw r16, 4(et)               /* load ISR pointer */
 20025b8:	c4000117 	ldw	r16,4(et)

     /*
      * Get SP from previous register set.
      */

    rdprs sp, sp, 0
 20025bc:	dec00038 	rdprs	sp,sp,0
  /*
   * Notify the operating system that we are at interrupt level.
   */
    ALT_OS_INT_ENTER_ASM

    ldw r4, 8(et)               /* load isr_context */
 20025c0:	c1000217 	ldw	r4,8(et)
    callr r16                   /* call ISR */
 20025c4:	803ee83a 	callr	r16
    /*
     * Notify the operating system that interrupt processing is complete.
     */
    ALT_OS_INT_EXIT_ASM

    addi ea, ea, -4             /* instruction that caused exception */
 20025c8:	ef7fff04 	addi	ea,ea,-4
    eret
 20025cc:	ef80083a 	eret

020025d0 <alt_vic_irq_init>:
  * @API Type:              Internal
  * @param pdev             pointer of type alt_vic_dev, main Device Structure.
  * @return                 None
  */
void alt_vic_irq_init (alt_vic_dev* pdev)
{
 20025d0:	defffd04 	addi	sp,sp,-12
 20025d4:	df000215 	stw	fp,8(sp)
 20025d8:	df000204 	addi	fp,sp,8
 20025dc:	e13fff15 	stw	r4,-4(fp)
    alt_u32 i;
    static const int VEC_SIZE_ARRAY[]={4, 8, 16, 32, 64, 128, 256, 512};

    /* Stores the VIC instance to list */
    alt_vic_dev_list[pdev->intr_controller_id] = pdev;
 20025e0:	e0bfff17 	ldw	r2,-4(fp)
 20025e4:	10800117 	ldw	r2,4(r2)
 20025e8:	1085883a 	add	r2,r2,r2
 20025ec:	1087883a 	add	r3,r2,r2
 20025f0:	d0a01904 	addi	r2,gp,-32668
 20025f4:	1887883a 	add	r3,r3,r2
 20025f8:	e0bfff17 	ldw	r2,-4(fp)
 20025fc:	18800015 	stw	r2,0(r3)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);
 2002600:	e0bfff17 	ldw	r2,-4(fp)
 2002604:	10800017 	ldw	r2,0(r2)
 2002608:	10802204 	addi	r2,r2,136
 200260c:	1007883a 	mov	r3,r2
 2002610:	00bfffc4 	movi	r2,-1
 2002614:	18800035 	stwio	r2,0(r3)

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
 2002618:	e03ffe15 	stw	zero,-8(fp)
 200261c:	00001406 	br	2002670 <alt_vic_irq_init+0xa0>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
 2002620:	e0bfff17 	ldw	r2,-4(fp)
 2002624:	10800017 	ldw	r2,0(r2)
 2002628:	1007883a 	mov	r3,r2
 200262c:	e0bffe17 	ldw	r2,-8(fp)
 2002630:	1085883a 	add	r2,r2,r2
 2002634:	1085883a 	add	r2,r2,r2
 2002638:	1889883a 	add	r4,r3,r2
 200263c:	e0bffe17 	ldw	r2,-8(fp)
 2002640:	e0ffff17 	ldw	r3,-4(fp)
 2002644:	1085883a 	add	r2,r2,r2
 2002648:	1085883a 	add	r2,r2,r2
 200264c:	10c5883a 	add	r2,r2,r3
 2002650:	10800704 	addi	r2,r2,28
 2002654:	10800017 	ldw	r2,0(r2)
 2002658:	1007883a 	mov	r3,r2
 200265c:	2005883a 	mov	r2,r4
 2002660:	10c00035 	stwio	r3,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
 2002664:	e0bffe17 	ldw	r2,-8(fp)
 2002668:	10800044 	addi	r2,r2,1
 200266c:	e0bffe15 	stw	r2,-8(fp)
 2002670:	e0bfff17 	ldw	r2,-4(fp)
 2002674:	10c00217 	ldw	r3,8(r2)
 2002678:	e0bffe17 	ldw	r2,-8(fp)
 200267c:	10ffe836 	bltu	r2,r3,2002620 <alt_vic_irq_init+0x50>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
 2002680:	e03ffe15 	stw	zero,-8(fp)
 2002684:	00001a06 	br	20026f0 <alt_vic_irq_init+0x120>
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
 2002688:	e0bffe17 	ldw	r2,-8(fp)
 200268c:	00c08034 	movhi	r3,512
 2002690:	18da4e04 	addi	r3,r3,26936
 2002694:	1085883a 	add	r2,r2,r2
 2002698:	1085883a 	add	r2,r2,r2
 200269c:	10c5883a 	add	r2,r2,r3
 20026a0:	10800017 	ldw	r2,0(r2)
 20026a4:	1007883a 	mov	r3,r2
 20026a8:	e0bfff17 	ldw	r2,-4(fp)
 20026ac:	10800517 	ldw	r2,20(r2)
 20026b0:	18800c1e 	bne	r3,r2,20026e4 <alt_vic_irq_init+0x114>
        {
            IOWR_ALTERA_VIC_CONFIG(pdev->base,
 20026b4:	e0bfff17 	ldw	r2,-4(fp)
 20026b8:	10800017 	ldw	r2,0(r2)
 20026bc:	11002804 	addi	r4,r2,160
 20026c0:	e0bfff17 	ldw	r2,-4(fp)
 20026c4:	10800417 	ldw	r2,16(r2)
 20026c8:	100690fa 	slli	r3,r2,3
 20026cc:	e0bffe17 	ldw	r2,-8(fp)
 20026d0:	1884b03a 	or	r2,r3,r2
 20026d4:	1007883a 	mov	r3,r2
 20026d8:	2005883a 	mov	r2,r4
 20026dc:	10c00035 	stwio	r3,0(r2)
                (i | (pdev->daisy_chain_present << ALTERA_VIC_CONFIG_DC_OFST)));
            break;
 20026e0:	00000606 	br	20026fc <alt_vic_irq_init+0x12c>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
 20026e4:	e0bffe17 	ldw	r2,-8(fp)
 20026e8:	10800044 	addi	r2,r2,1
 20026ec:	e0bffe15 	stw	r2,-8(fp)
 20026f0:	e0bffe17 	ldw	r2,-8(fp)
 20026f4:	10800230 	cmpltui	r2,r2,8
 20026f8:	103fe31e 	bne	r2,zero,2002688 <alt_vic_irq_init+0xb8>
            break;
        }
    }

    /* Set vector table base address */
    IOWR_ALTERA_VIC_VEC_TBL_BASE(pdev->base,((alt_u32)pdev->vec_addr));
 20026fc:	e0bfff17 	ldw	r2,-4(fp)
 2002700:	10800017 	ldw	r2,0(r2)
 2002704:	11002a04 	addi	r4,r2,168
 2002708:	e0bfff17 	ldw	r2,-4(fp)
 200270c:	10800617 	ldw	r2,24(r2)
 2002710:	1007883a 	mov	r3,r2
 2002714:	2005883a 	mov	r2,r4
 2002718:	10c00035 	stwio	r3,0(r2)
}
 200271c:	e037883a 	mov	sp,fp
 2002720:	df000017 	ldw	fp,0(sp)
 2002724:	dec00104 	addi	sp,sp,4
 2002728:	f800283a 	ret

0200272c <alt_ic_isr_register>:
int alt_ic_isr_register(alt_u32 ic_id,
                        alt_u32 irq,
                        alt_isr_func isr,
                        void *isr_context,
                        void* flags)
{
 200272c:	defff404 	addi	sp,sp,-48
 2002730:	df000b15 	stw	fp,44(sp)
 2002734:	df000b04 	addi	fp,sp,44
 2002738:	e13ffb15 	stw	r4,-20(fp)
 200273c:	e17ffc15 	stw	r5,-16(fp)
 2002740:	e1bffd15 	stw	r6,-12(fp)
 2002744:	e1fffe15 	stw	r7,-8(fp)
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
 2002748:	e0bffb17 	ldw	r2,-20(fp)
 200274c:	1005003a 	cmpeq	r2,r2,zero
 2002750:	1000031e 	bne	r2,zero,2002760 <alt_ic_isr_register+0x34>
        return -1;
 2002754:	00bfffc4 	movi	r2,-1
 2002758:	e0bfff15 	stw	r2,-4(fp)
 200275c:	00004b06 	br	200288c <alt_ic_isr_register+0x160>

    /* Get VIC handle */
    pdev = alt_vic_dev_list[ic_id];
 2002760:	e0bffb17 	ldw	r2,-20(fp)
 2002764:	00c08074 	movhi	r3,513
 2002768:	18e18004 	addi	r3,r3,-31232
 200276c:	1085883a 	add	r2,r2,r2
 2002770:	1085883a 	add	r2,r2,r2
 2002774:	10c5883a 	add	r2,r2,r3
 2002778:	10800017 	ldw	r2,0(r2)
 200277c:	e0bffa15 	stw	r2,-24(fp)

    if(irq < pdev->num_of_intr_ports)
 2002780:	e0bffa17 	ldw	r2,-24(fp)
 2002784:	10c00217 	ldw	r3,8(r2)
 2002788:	e0bffc17 	ldw	r2,-16(fp)
 200278c:	10c03d2e 	bgeu	r2,r3,2002884 <alt_ic_isr_register+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002790:	0005303a 	rdctl	r2,status
 2002794:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002798:	e0fff717 	ldw	r3,-36(fp)
 200279c:	00bfff84 	movi	r2,-2
 20027a0:	1884703a 	and	r2,r3,r2
 20027a4:	1001703a 	wrctl	status,r2
  
  return context;
 20027a8:	e0bff717 	ldw	r2,-36(fp)
    {
        /* Disable all interrupts */
        status = alt_irq_disable_all ();
 20027ac:	e0bff815 	stw	r2,-32(fp)

        /* Get table offset */
        offset = pdev->vec_addr + (irq * pdev->vec_size);
 20027b0:	e0bffa17 	ldw	r2,-24(fp)
 20027b4:	11000617 	ldw	r4,24(r2)
 20027b8:	e0bffa17 	ldw	r2,-24(fp)
 20027bc:	10c00517 	ldw	r3,20(r2)
 20027c0:	e0bffc17 	ldw	r2,-16(fp)
 20027c4:	1885383a 	mul	r2,r3,r2
 20027c8:	2085883a 	add	r2,r4,r2
 20027cc:	e0bff915 	stw	r2,-28(fp)

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
 20027d0:	e0bff917 	ldw	r2,-28(fp)
 20027d4:	10c00204 	addi	r3,r2,8
 20027d8:	e0bffd17 	ldw	r2,-12(fp)
 20027dc:	18800015 	stw	r2,0(r3)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);
 20027e0:	e0bff917 	ldw	r2,-28(fp)
 20027e4:	10c00304 	addi	r3,r2,12
 20027e8:	e0bffe17 	ldw	r2,-8(fp)
 20027ec:	18800015 	stw	r2,0(r3)

        if(isr)
 20027f0:	e0bffd17 	ldw	r2,-12(fp)
 20027f4:	1005003a 	cmpeq	r2,r2,zero
 20027f8:	1000091e 	bne	r2,zero,2002820 <alt_ic_isr_register+0xf4>
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
 20027fc:	e0bffa17 	ldw	r2,-24(fp)
 2002800:	10800017 	ldw	r2,0(r2)
 2002804:	11002104 	addi	r4,r2,132
 2002808:	e0fffc17 	ldw	r3,-16(fp)
 200280c:	00800044 	movi	r2,1
 2002810:	10c6983a 	sll	r3,r2,r3
 2002814:	2005883a 	mov	r2,r4
 2002818:	10c00035 	stwio	r3,0(r2)
 200281c:	00000806 	br	2002840 <alt_ic_isr_register+0x114>
        }
        else
        {
            /* Disable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 1 << irq);
 2002820:	e0bffa17 	ldw	r2,-24(fp)
 2002824:	10800017 	ldw	r2,0(r2)
 2002828:	11002204 	addi	r4,r2,136
 200282c:	e0fffc17 	ldw	r3,-16(fp)
 2002830:	00800044 	movi	r2,1
 2002834:	10c6983a 	sll	r3,r2,r3
 2002838:	2005883a 	mov	r2,r4
 200283c:	10c00035 	stwio	r3,0(r2)
 2002840:	e0bff817 	ldw	r2,-32(fp)
 2002844:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2002848:	0005303a 	rdctl	r2,status
 200284c:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2002850:	e0fff617 	ldw	r3,-40(fp)
 2002854:	00bfff84 	movi	r2,-2
 2002858:	1884703a 	and	r2,r3,r2
 200285c:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2002860:	e0bff517 	ldw	r2,-44(fp)
 2002864:	10c0004c 	andi	r3,r2,1
 2002868:	e0bff617 	ldw	r2,-40(fp)
 200286c:	10c4b03a 	or	r2,r2,r3
 2002870:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
 2002874:	e0bff617 	ldw	r2,-40(fp)
 2002878:	1001703a 	wrctl	status,r2
        }

        /* Re-enable all interrupts */
        alt_irq_enable_all(status);

        return 0;
 200287c:	e03fff15 	stw	zero,-4(fp)
 2002880:	00000206 	br	200288c <alt_ic_isr_register+0x160>
    }

    return -1;
 2002884:	00bfffc4 	movi	r2,-1
 2002888:	e0bfff15 	stw	r2,-4(fp)
 200288c:	e0bfff17 	ldw	r2,-4(fp)
}
 2002890:	e037883a 	mov	sp,fp
 2002894:	df000017 	ldw	fp,0(sp)
 2002898:	dec00104 	addi	sp,sp,4
 200289c:	f800283a 	ret

020028a0 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 20028a0:	defff904 	addi	sp,sp,-28
 20028a4:	dfc00615 	stw	ra,24(sp)
 20028a8:	df000515 	stw	fp,20(sp)
 20028ac:	df000504 	addi	fp,sp,20
 20028b0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 20028b4:	00800144 	movi	r2,5
 20028b8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 20028bc:	00800044 	movi	r2,1
 20028c0:	d8800015 	stw	r2,0(sp)
 20028c4:	e0bffe44 	addi	r2,fp,-7
 20028c8:	d8800115 	stw	r2,4(sp)
 20028cc:	d8000215 	stw	zero,8(sp)
 20028d0:	e13fff17 	ldw	r4,-4(fp)
 20028d4:	000b883a 	mov	r5,zero
 20028d8:	01800044 	movi	r6,1
 20028dc:	e1fffe04 	addi	r7,fp,-8
 20028e0:	20038e40 	call	20038e4 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 20028e4:	e0bffe43 	ldbu	r2,-7(fp)
 20028e8:	10803fcc 	andi	r2,r2,255
}
 20028ec:	e037883a 	mov	sp,fp
 20028f0:	dfc00117 	ldw	ra,4(sp)
 20028f4:	df000017 	ldw	fp,0(sp)
 20028f8:	dec00204 	addi	sp,sp,8
 20028fc:	f800283a 	ret

02002900 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset)
{
 2002900:	defff804 	addi	sp,sp,-32
 2002904:	dfc00715 	stw	ra,28(sp)
 2002908:	df000615 	stw	fp,24(sp)
 200290c:	df000604 	addi	fp,sp,24
 2002910:	e13ffe15 	stw	r4,-8(fp)
 2002914:	e17fff15 	stw	r5,-4(fp)
  alt_u8 se[4];
  
  se[0] = epcs_se;
 2002918:	00bff604 	movi	r2,-40
 200291c:	e0bffd05 	stb	r2,-12(fp)
  se[1] = (offset >> 16) & 0xFF;
 2002920:	e0bfff17 	ldw	r2,-4(fp)
 2002924:	1004d43a 	srli	r2,r2,16
 2002928:	e0bffd45 	stb	r2,-11(fp)
  se[2] = (offset >> 8) & 0xFF;
 200292c:	e0bfff17 	ldw	r2,-4(fp)
 2002930:	1004d23a 	srli	r2,r2,8
 2002934:	e0bffd85 	stb	r2,-10(fp)
  se[3] = offset & 0xFF;
 2002938:	e0bfff17 	ldw	r2,-4(fp)
 200293c:	e0bffdc5 	stb	r2,-9(fp)

  alt_avalon_spi_command(
 2002940:	d8000015 	stw	zero,0(sp)
 2002944:	d8000115 	stw	zero,4(sp)
 2002948:	d8000215 	stw	zero,8(sp)
 200294c:	e13ffe17 	ldw	r4,-8(fp)
 2002950:	000b883a 	mov	r5,zero
 2002954:	01800104 	movi	r6,4
 2002958:	e1fffd04 	addi	r7,fp,-12
 200295c:	20038e40 	call	20038e4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2002960:	e13ffe17 	ldw	r4,-8(fp)
 2002964:	200297c0 	call	200297c <epcs_await_wip_released>
}
 2002968:	e037883a 	mov	sp,fp
 200296c:	dfc00117 	ldw	ra,4(sp)
 2002970:	df000017 	ldw	fp,0(sp)
 2002974:	dec00204 	addi	sp,sp,8
 2002978:	f800283a 	ret

0200297c <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 200297c:	defffd04 	addi	sp,sp,-12
 2002980:	dfc00215 	stw	ra,8(sp)
 2002984:	df000115 	stw	fp,4(sp)
 2002988:	df000104 	addi	fp,sp,4
 200298c:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2002990:	e13fff17 	ldw	r4,-4(fp)
 2002994:	20029b40 	call	20029b4 <epcs_test_wip>
 2002998:	1004c03a 	cmpne	r2,r2,zero
 200299c:	103ffc1e 	bne	r2,zero,2002990 <epcs_await_wip_released+0x14>
  {
  }
}
 20029a0:	e037883a 	mov	sp,fp
 20029a4:	dfc00117 	ldw	ra,4(sp)
 20029a8:	df000017 	ldw	fp,0(sp)
 20029ac:	dec00204 	addi	sp,sp,8
 20029b0:	f800283a 	ret

020029b4 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 20029b4:	defffd04 	addi	sp,sp,-12
 20029b8:	dfc00215 	stw	ra,8(sp)
 20029bc:	df000115 	stw	fp,4(sp)
 20029c0:	df000104 	addi	fp,sp,4
 20029c4:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 20029c8:	e13fff17 	ldw	r4,-4(fp)
 20029cc:	20028a00 	call	20028a0 <epcs_read_status_register>
 20029d0:	10803fcc 	andi	r2,r2,255
 20029d4:	1080004c 	andi	r2,r2,1
}
 20029d8:	e037883a 	mov	sp,fp
 20029dc:	dfc00117 	ldw	ra,4(sp)
 20029e0:	df000017 	ldw	fp,0(sp)
 20029e4:	dec00204 	addi	sp,sp,8
 20029e8:	f800283a 	ret

020029ec <epcs_read_buffer>:

  epcs_await_wip_released(base);
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length)
{
 20029ec:	defff604 	addi	sp,sp,-40
 20029f0:	dfc00915 	stw	ra,36(sp)
 20029f4:	df000815 	stw	fp,32(sp)
 20029f8:	df000804 	addi	fp,sp,32
 20029fc:	e13ffc15 	stw	r4,-16(fp)
 2002a00:	e17ffd15 	stw	r5,-12(fp)
 2002a04:	e1bffe15 	stw	r6,-8(fp)
 2002a08:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[4];
  
  read_command[0] = epcs_read;
 2002a0c:	008000c4 	movi	r2,3
 2002a10:	e0bffb05 	stb	r2,-20(fp)
  read_command[1] = (offset >> 16) & 0xFF;
 2002a14:	e0bffd17 	ldw	r2,-12(fp)
 2002a18:	1005d43a 	srai	r2,r2,16
 2002a1c:	1007883a 	mov	r3,r2
 2002a20:	00bfffc4 	movi	r2,-1
 2002a24:	1884703a 	and	r2,r3,r2
 2002a28:	e0bffb45 	stb	r2,-19(fp)
  read_command[2] = (offset >> 8) & 0xFF;
 2002a2c:	e0bffd17 	ldw	r2,-12(fp)
 2002a30:	1005d23a 	srai	r2,r2,8
 2002a34:	1007883a 	mov	r3,r2
 2002a38:	00bfffc4 	movi	r2,-1
 2002a3c:	1884703a 	and	r2,r3,r2
 2002a40:	e0bffb85 	stb	r2,-18(fp)
  read_command[3] = offset & 0xFF;
 2002a44:	e0bffd17 	ldw	r2,-12(fp)
 2002a48:	1007883a 	mov	r3,r2
 2002a4c:	00bfffc4 	movi	r2,-1
 2002a50:	1884703a 	and	r2,r3,r2
 2002a54:	e0bffbc5 	stb	r2,-17(fp)
    return 0;
#endif
  /* I don't know why this is necessary, since I call await-wip after
   * all writing commands.
  */
  epcs_await_wip_released(base);
 2002a58:	e13ffc17 	ldw	r4,-16(fp)
 2002a5c:	200297c0 	call	200297c <epcs_await_wip_released>

  alt_avalon_spi_command(
 2002a60:	e0bfff17 	ldw	r2,-4(fp)
 2002a64:	d8800015 	stw	r2,0(sp)
 2002a68:	e0bffe17 	ldw	r2,-8(fp)
 2002a6c:	d8800115 	stw	r2,4(sp)
 2002a70:	d8000215 	stw	zero,8(sp)
 2002a74:	e13ffc17 	ldw	r4,-16(fp)
 2002a78:	000b883a 	mov	r5,zero
 2002a7c:	01800104 	movi	r6,4
 2002a80:	e1fffb04 	addi	r7,fp,-20
 2002a84:	20038e40 	call	20038e4 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  return length;
 2002a88:	e0bfff17 	ldw	r2,-4(fp)
}
 2002a8c:	e037883a 	mov	sp,fp
 2002a90:	dfc00117 	ldw	ra,4(sp)
 2002a94:	df000017 	ldw	fp,0(sp)
 2002a98:	dec00204 	addi	sp,sp,8
 2002a9c:	f800283a 	ret

02002aa0 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2002aa0:	defff904 	addi	sp,sp,-28
 2002aa4:	dfc00615 	stw	ra,24(sp)
 2002aa8:	df000515 	stw	fp,20(sp)
 2002aac:	df000504 	addi	fp,sp,20
 2002ab0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2002ab4:	00800184 	movi	r2,6
 2002ab8:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2002abc:	d8000015 	stw	zero,0(sp)
 2002ac0:	d8000115 	stw	zero,4(sp)
 2002ac4:	d8000215 	stw	zero,8(sp)
 2002ac8:	e13fff17 	ldw	r4,-4(fp)
 2002acc:	000b883a 	mov	r5,zero
 2002ad0:	01800044 	movi	r6,1
 2002ad4:	e1fffe04 	addi	r7,fp,-8
 2002ad8:	20038e40 	call	20038e4 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2002adc:	e037883a 	mov	sp,fp
 2002ae0:	dfc00117 	ldw	ra,4(sp)
 2002ae4:	df000017 	ldw	fp,0(sp)
 2002ae8:	dec00204 	addi	sp,sp,8
 2002aec:	f800283a 	ret

02002af0 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2002af0:	defff804 	addi	sp,sp,-32
 2002af4:	dfc00715 	stw	ra,28(sp)
 2002af8:	df000615 	stw	fp,24(sp)
 2002afc:	df000604 	addi	fp,sp,24
 2002b00:	e13ffe15 	stw	r4,-8(fp)
 2002b04:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2002b08:	00800044 	movi	r2,1
 2002b0c:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2002b10:	e0bfff03 	ldbu	r2,-4(fp)
 2002b14:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2002b18:	d8000015 	stw	zero,0(sp)
 2002b1c:	d8000115 	stw	zero,4(sp)
 2002b20:	d8000215 	stw	zero,8(sp)
 2002b24:	e13ffe17 	ldw	r4,-8(fp)
 2002b28:	000b883a 	mov	r5,zero
 2002b2c:	01800084 	movi	r6,2
 2002b30:	e1fffd04 	addi	r7,fp,-12
 2002b34:	20038e40 	call	20038e4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2002b38:	e13ffe17 	ldw	r4,-8(fp)
 2002b3c:	200297c0 	call	200297c <epcs_await_wip_released>
}
 2002b40:	e037883a 	mov	sp,fp
 2002b44:	dfc00117 	ldw	ra,4(sp)
 2002b48:	df000017 	ldw	fp,0(sp)
 2002b4c:	dec00204 	addi	sp,sp,8
 2002b50:	f800283a 	ret

02002b54 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, int length)
{
 2002b54:	defff604 	addi	sp,sp,-40
 2002b58:	dfc00915 	stw	ra,36(sp)
 2002b5c:	df000815 	stw	fp,32(sp)
 2002b60:	df000804 	addi	fp,sp,32
 2002b64:	e13ffc15 	stw	r4,-16(fp)
 2002b68:	e17ffd15 	stw	r5,-12(fp)
 2002b6c:	e1bffe15 	stw	r6,-8(fp)
 2002b70:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[4];
  
  pp[0] = epcs_pp;
 2002b74:	00800084 	movi	r2,2
 2002b78:	e0bffb05 	stb	r2,-20(fp)
  pp[1] = (offset >> 16) & 0xFF;
 2002b7c:	e0bffd17 	ldw	r2,-12(fp)
 2002b80:	1005d43a 	srai	r2,r2,16
 2002b84:	1007883a 	mov	r3,r2
 2002b88:	00bfffc4 	movi	r2,-1
 2002b8c:	1884703a 	and	r2,r3,r2
 2002b90:	e0bffb45 	stb	r2,-19(fp)
  pp[2] = (offset >> 8) & 0xFF;
 2002b94:	e0bffd17 	ldw	r2,-12(fp)
 2002b98:	1005d23a 	srai	r2,r2,8
 2002b9c:	1007883a 	mov	r3,r2
 2002ba0:	00bfffc4 	movi	r2,-1
 2002ba4:	1884703a 	and	r2,r3,r2
 2002ba8:	e0bffb85 	stb	r2,-18(fp)
  pp[3] = offset & 0xFF;
 2002bac:	e0bffd17 	ldw	r2,-12(fp)
 2002bb0:	1007883a 	mov	r3,r2
 2002bb4:	00bfffc4 	movi	r2,-1
 2002bb8:	1884703a 	and	r2,r3,r2
 2002bbc:	e0bffbc5 	stb	r2,-17(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2002bc0:	e13ffc17 	ldw	r4,-16(fp)
 2002bc4:	2002aa00 	call	2002aa0 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 2002bc8:	d8000015 	stw	zero,0(sp)
 2002bcc:	d8000115 	stw	zero,4(sp)
 2002bd0:	00800044 	movi	r2,1
 2002bd4:	d8800215 	stw	r2,8(sp)
 2002bd8:	e13ffc17 	ldw	r4,-16(fp)
 2002bdc:	000b883a 	mov	r5,zero
 2002be0:	01800104 	movi	r6,4
 2002be4:	e1fffb04 	addi	r7,fp,-20
 2002be8:	20038e40 	call	20038e4 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2002bec:	e1bfff17 	ldw	r6,-4(fp)
 2002bf0:	d8000015 	stw	zero,0(sp)
 2002bf4:	d8000115 	stw	zero,4(sp)
 2002bf8:	d8000215 	stw	zero,8(sp)
 2002bfc:	e13ffc17 	ldw	r4,-16(fp)
 2002c00:	000b883a 	mov	r5,zero
 2002c04:	e1fffe17 	ldw	r7,-8(fp)
 2002c08:	20038e40 	call	20038e4 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2002c0c:	e13ffc17 	ldw	r4,-16(fp)
 2002c10:	200297c0 	call	200297c <epcs_await_wip_released>

  return length;
 2002c14:	e0bfff17 	ldw	r2,-4(fp)
}
 2002c18:	e037883a 	mov	sp,fp
 2002c1c:	dfc00117 	ldw	ra,4(sp)
 2002c20:	df000017 	ldw	fp,0(sp)
 2002c24:	dec00204 	addi	sp,sp,8
 2002c28:	f800283a 	ret

02002c2c <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2002c2c:	defff804 	addi	sp,sp,-32
 2002c30:	dfc00715 	stw	ra,28(sp)
 2002c34:	df000615 	stw	fp,24(sp)
 2002c38:	df000604 	addi	fp,sp,24
 2002c3c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2002c40:	00bfeac4 	movi	r2,-85
 2002c44:	e0bffd05 	stb	r2,-12(fp)
 2002c48:	e03ffd45 	stb	zero,-11(fp)
 2002c4c:	e03ffd85 	stb	zero,-10(fp)
 2002c50:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2002c54:	00800044 	movi	r2,1
 2002c58:	d8800015 	stw	r2,0(sp)
 2002c5c:	e0bffe04 	addi	r2,fp,-8
 2002c60:	d8800115 	stw	r2,4(sp)
 2002c64:	d8000215 	stw	zero,8(sp)
 2002c68:	e13fff17 	ldw	r4,-4(fp)
 2002c6c:	000b883a 	mov	r5,zero
 2002c70:	01800104 	movi	r6,4
 2002c74:	e1fffd04 	addi	r7,fp,-12
 2002c78:	20038e40 	call	20038e4 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2002c7c:	e0bffe03 	ldbu	r2,-8(fp)
 2002c80:	10803fcc 	andi	r2,r2,255
}
 2002c84:	e037883a 	mov	sp,fp
 2002c88:	dfc00117 	ldw	ra,4(sp)
 2002c8c:	df000017 	ldw	fp,0(sp)
 2002c90:	dec00204 	addi	sp,sp,8
 2002c94:	f800283a 	ret

02002c98 <epcs_read_device_id>:

alt_u8 epcs_read_device_id(alt_u32 base)
{
 2002c98:	defff904 	addi	sp,sp,-28
 2002c9c:	dfc00615 	stw	ra,24(sp)
 2002ca0:	df000515 	stw	fp,20(sp)
 2002ca4:	df000504 	addi	fp,sp,20
 2002ca8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid, 0, 0};
 2002cac:	00bfe7c4 	movi	r2,-97
 2002cb0:	e0bffe05 	stb	r2,-8(fp)
 2002cb4:	e03ffe45 	stb	zero,-7(fp)
 2002cb8:	e03ffe85 	stb	zero,-6(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2002cbc:	00800044 	movi	r2,1
 2002cc0:	d8800015 	stw	r2,0(sp)
 2002cc4:	e0bffec4 	addi	r2,fp,-5
 2002cc8:	d8800115 	stw	r2,4(sp)
 2002ccc:	d8000215 	stw	zero,8(sp)
 2002cd0:	e13fff17 	ldw	r4,-4(fp)
 2002cd4:	000b883a 	mov	r5,zero
 2002cd8:	018000c4 	movi	r6,3
 2002cdc:	e1fffe04 	addi	r7,fp,-8
 2002ce0:	20038e40 	call	20038e4 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2002ce4:	e0bffec3 	ldbu	r2,-5(fp)
 2002ce8:	10803fcc 	andi	r2,r2,255
}
 2002cec:	e037883a 	mov	sp,fp
 2002cf0:	dfc00117 	ldw	ra,4(sp)
 2002cf4:	df000017 	ldw	fp,0(sp)
 2002cf8:	dec00204 	addi	sp,sp,8
 2002cfc:	f800283a 	ret

02002d00 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2002d00:	defff304 	addi	sp,sp,-52
 2002d04:	df000c15 	stw	fp,48(sp)
 2002d08:	df000c04 	addi	fp,sp,48
 2002d0c:	e13ffb15 	stw	r4,-20(fp)
 2002d10:	e17ffc15 	stw	r5,-16(fp)
 2002d14:	e1bffd15 	stw	r6,-12(fp)
 2002d18:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2002d1c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2002d20:	00808074 	movhi	r2,513
 2002d24:	10a18104 	addi	r2,r2,-31228
 2002d28:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2002d2c:	1005003a 	cmpeq	r2,r2,zero
 2002d30:	10004c1e 	bne	r2,zero,2002e64 <alt_alarm_start+0x164>
  {
    if (alarm)
 2002d34:	e0bffb17 	ldw	r2,-20(fp)
 2002d38:	1005003a 	cmpeq	r2,r2,zero
 2002d3c:	1000461e 	bne	r2,zero,2002e58 <alt_alarm_start+0x158>
    {
      alarm->callback = callback;
 2002d40:	e0fffb17 	ldw	r3,-20(fp)
 2002d44:	e0bffd17 	ldw	r2,-12(fp)
 2002d48:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 2002d4c:	e0fffb17 	ldw	r3,-20(fp)
 2002d50:	e0bffe17 	ldw	r2,-8(fp)
 2002d54:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002d58:	0005303a 	rdctl	r2,status
 2002d5c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002d60:	e0fff817 	ldw	r3,-32(fp)
 2002d64:	00bfff84 	movi	r2,-2
 2002d68:	1884703a 	and	r2,r3,r2
 2002d6c:	1001703a 	wrctl	status,r2
  
  return context;
 2002d70:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2002d74:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2002d78:	00808074 	movhi	r2,513
 2002d7c:	10a18204 	addi	r2,r2,-31224
 2002d80:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2002d84:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2002d88:	e0fffc17 	ldw	r3,-16(fp)
 2002d8c:	e0bff917 	ldw	r2,-28(fp)
 2002d90:	1885883a 	add	r2,r3,r2
 2002d94:	10c00044 	addi	r3,r2,1
 2002d98:	e0bffb17 	ldw	r2,-20(fp)
 2002d9c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2002da0:	e0bffb17 	ldw	r2,-20(fp)
 2002da4:	10c00217 	ldw	r3,8(r2)
 2002da8:	e0bff917 	ldw	r2,-28(fp)
 2002dac:	1880042e 	bgeu	r3,r2,2002dc0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 2002db0:	e0fffb17 	ldw	r3,-20(fp)
 2002db4:	00800044 	movi	r2,1
 2002db8:	18800405 	stb	r2,16(r3)
 2002dbc:	00000206 	br	2002dc8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 2002dc0:	e0bffb17 	ldw	r2,-20(fp)
 2002dc4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2002dc8:	e0fffb17 	ldw	r3,-20(fp)
 2002dcc:	00808074 	movhi	r2,513
 2002dd0:	10a17004 	addi	r2,r2,-31296
 2002dd4:	e0bff615 	stw	r2,-40(fp)
 2002dd8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2002ddc:	e0fff717 	ldw	r3,-36(fp)
 2002de0:	e0bff617 	ldw	r2,-40(fp)
 2002de4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2002de8:	e0bff617 	ldw	r2,-40(fp)
 2002dec:	10c00017 	ldw	r3,0(r2)
 2002df0:	e0bff717 	ldw	r2,-36(fp)
 2002df4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2002df8:	e0bff617 	ldw	r2,-40(fp)
 2002dfc:	10c00017 	ldw	r3,0(r2)
 2002e00:	e0bff717 	ldw	r2,-36(fp)
 2002e04:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2002e08:	e0fff617 	ldw	r3,-40(fp)
 2002e0c:	e0bff717 	ldw	r2,-36(fp)
 2002e10:	18800015 	stw	r2,0(r3)
 2002e14:	e0bffa17 	ldw	r2,-24(fp)
 2002e18:	e0bff415 	stw	r2,-48(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2002e1c:	0005303a 	rdctl	r2,status
 2002e20:	e0bff515 	stw	r2,-44(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2002e24:	e0fff517 	ldw	r3,-44(fp)
 2002e28:	00bfff84 	movi	r2,-2
 2002e2c:	1884703a 	and	r2,r3,r2
 2002e30:	e0bff515 	stw	r2,-44(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2002e34:	e0bff417 	ldw	r2,-48(fp)
 2002e38:	10c0004c 	andi	r3,r2,1
 2002e3c:	e0bff517 	ldw	r2,-44(fp)
 2002e40:	10c4b03a 	or	r2,r2,r3
 2002e44:	e0bff515 	stw	r2,-44(fp)
  
  NIOS2_WRITE_STATUS (status);
 2002e48:	e0bff517 	ldw	r2,-44(fp)
 2002e4c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2002e50:	e03fff15 	stw	zero,-4(fp)
 2002e54:	00000506 	br	2002e6c <alt_alarm_start+0x16c>
    }
    else
    {
      return -EINVAL;
 2002e58:	00bffa84 	movi	r2,-22
 2002e5c:	e0bfff15 	stw	r2,-4(fp)
 2002e60:	00000206 	br	2002e6c <alt_alarm_start+0x16c>
    }
  }
  else
  {
    return -ENOTSUP;
 2002e64:	00bfde84 	movi	r2,-134
 2002e68:	e0bfff15 	stw	r2,-4(fp)
 2002e6c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 2002e70:	e037883a 	mov	sp,fp
 2002e74:	df000017 	ldw	fp,0(sp)
 2002e78:	dec00104 	addi	sp,sp,4
 2002e7c:	f800283a 	ret

02002e80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2002e80:	defff804 	addi	sp,sp,-32
 2002e84:	dfc00715 	stw	ra,28(sp)
 2002e88:	df000615 	stw	fp,24(sp)
 2002e8c:	df000604 	addi	fp,sp,24
 2002e90:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2002e94:	e0bffc17 	ldw	r2,-16(fp)
 2002e98:	1004803a 	cmplt	r2,r2,zero
 2002e9c:	1000081e 	bne	r2,zero,2002ec0 <close+0x40>
 2002ea0:	e0bffc17 	ldw	r2,-16(fp)
 2002ea4:	10800324 	muli	r2,r2,12
 2002ea8:	1007883a 	mov	r3,r2
 2002eac:	00808034 	movhi	r2,512
 2002eb0:	109f0504 	addi	r2,r2,31764
 2002eb4:	1887883a 	add	r3,r3,r2
 2002eb8:	e0ffff15 	stw	r3,-4(fp)
 2002ebc:	00000106 	br	2002ec4 <close+0x44>
 2002ec0:	e03fff15 	stw	zero,-4(fp)
 2002ec4:	e0bfff17 	ldw	r2,-4(fp)
 2002ec8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2002ecc:	e0bffb17 	ldw	r2,-20(fp)
 2002ed0:	1005003a 	cmpeq	r2,r2,zero
 2002ed4:	10001d1e 	bne	r2,zero,2002f4c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2002ed8:	e0bffb17 	ldw	r2,-20(fp)
 2002edc:	10800017 	ldw	r2,0(r2)
 2002ee0:	10800417 	ldw	r2,16(r2)
 2002ee4:	1005003a 	cmpeq	r2,r2,zero
 2002ee8:	1000071e 	bne	r2,zero,2002f08 <close+0x88>
 2002eec:	e0bffb17 	ldw	r2,-20(fp)
 2002ef0:	10800017 	ldw	r2,0(r2)
 2002ef4:	10800417 	ldw	r2,16(r2)
 2002ef8:	e13ffb17 	ldw	r4,-20(fp)
 2002efc:	103ee83a 	callr	r2
 2002f00:	e0bffe15 	stw	r2,-8(fp)
 2002f04:	00000106 	br	2002f0c <close+0x8c>
 2002f08:	e03ffe15 	stw	zero,-8(fp)
 2002f0c:	e0bffe17 	ldw	r2,-8(fp)
 2002f10:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2002f14:	e13ffc17 	ldw	r4,-16(fp)
 2002f18:	20036b40 	call	20036b4 <alt_release_fd>
    if (rval < 0)
 2002f1c:	e0bffa17 	ldw	r2,-24(fp)
 2002f20:	1004403a 	cmpge	r2,r2,zero
 2002f24:	1000071e 	bne	r2,zero,2002f44 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 2002f28:	2002f7c0 	call	2002f7c <alt_get_errno>
 2002f2c:	e0fffa17 	ldw	r3,-24(fp)
 2002f30:	00c7c83a 	sub	r3,zero,r3
 2002f34:	10c00015 	stw	r3,0(r2)
      return -1;
 2002f38:	00bfffc4 	movi	r2,-1
 2002f3c:	e0bffd15 	stw	r2,-12(fp)
 2002f40:	00000806 	br	2002f64 <close+0xe4>
    }
    return 0;
 2002f44:	e03ffd15 	stw	zero,-12(fp)
 2002f48:	00000606 	br	2002f64 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002f4c:	2002f7c0 	call	2002f7c <alt_get_errno>
 2002f50:	1007883a 	mov	r3,r2
 2002f54:	00801444 	movi	r2,81
 2002f58:	18800015 	stw	r2,0(r3)
    return -1;
 2002f5c:	00bfffc4 	movi	r2,-1
 2002f60:	e0bffd15 	stw	r2,-12(fp)
 2002f64:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 2002f68:	e037883a 	mov	sp,fp
 2002f6c:	dfc00117 	ldw	ra,4(sp)
 2002f70:	df000017 	ldw	fp,0(sp)
 2002f74:	dec00204 	addi	sp,sp,8
 2002f78:	f800283a 	ret

02002f7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002f7c:	defffd04 	addi	sp,sp,-12
 2002f80:	dfc00215 	stw	ra,8(sp)
 2002f84:	df000115 	stw	fp,4(sp)
 2002f88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002f8c:	00808074 	movhi	r2,513
 2002f90:	10a16d04 	addi	r2,r2,-31308
 2002f94:	10800017 	ldw	r2,0(r2)
 2002f98:	1005003a 	cmpeq	r2,r2,zero
 2002f9c:	1000061e 	bne	r2,zero,2002fb8 <alt_get_errno+0x3c>
 2002fa0:	00808074 	movhi	r2,513
 2002fa4:	10a16d04 	addi	r2,r2,-31308
 2002fa8:	10800017 	ldw	r2,0(r2)
 2002fac:	103ee83a 	callr	r2
 2002fb0:	e0bfff15 	stw	r2,-4(fp)
 2002fb4:	00000306 	br	2002fc4 <alt_get_errno+0x48>
 2002fb8:	00808074 	movhi	r2,513
 2002fbc:	10a18304 	addi	r2,r2,-31220
 2002fc0:	e0bfff15 	stw	r2,-4(fp)
 2002fc4:	e0bfff17 	ldw	r2,-4(fp)
}
 2002fc8:	e037883a 	mov	sp,fp
 2002fcc:	dfc00117 	ldw	ra,4(sp)
 2002fd0:	df000017 	ldw	fp,0(sp)
 2002fd4:	dec00204 	addi	sp,sp,8
 2002fd8:	f800283a 	ret

02002fdc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2002fdc:	defffc04 	addi	sp,sp,-16
 2002fe0:	df000315 	stw	fp,12(sp)
 2002fe4:	df000304 	addi	fp,sp,12
 2002fe8:	e13ffd15 	stw	r4,-12(fp)
 2002fec:	e17ffe15 	stw	r5,-8(fp)
 2002ff0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2002ff4:	e0bfff17 	ldw	r2,-4(fp)
}
 2002ff8:	e037883a 	mov	sp,fp
 2002ffc:	df000017 	ldw	fp,0(sp)
 2003000:	dec00104 	addi	sp,sp,4
 2003004:	f800283a 	ret

02003008 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2003008:	defff904 	addi	sp,sp,-28
 200300c:	dfc00615 	stw	ra,24(sp)
 2003010:	df000515 	stw	fp,20(sp)
 2003014:	df000504 	addi	fp,sp,20
 2003018:	e13ffd15 	stw	r4,-12(fp)
 200301c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2003020:	e0bffd17 	ldw	r2,-12(fp)
 2003024:	1005003a 	cmpeq	r2,r2,zero
 2003028:	1000041e 	bne	r2,zero,200303c <alt_dev_llist_insert+0x34>
 200302c:	e0bffd17 	ldw	r2,-12(fp)
 2003030:	10800217 	ldw	r2,8(r2)
 2003034:	1004c03a 	cmpne	r2,r2,zero
 2003038:	1000071e 	bne	r2,zero,2003058 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 200303c:	20030bc0 	call	20030bc <alt_get_errno>
 2003040:	1007883a 	mov	r3,r2
 2003044:	00800584 	movi	r2,22
 2003048:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 200304c:	00bffa84 	movi	r2,-22
 2003050:	e0bfff15 	stw	r2,-4(fp)
 2003054:	00001306 	br	20030a4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2003058:	e0fffd17 	ldw	r3,-12(fp)
 200305c:	e0bffe17 	ldw	r2,-8(fp)
 2003060:	e0bffb15 	stw	r2,-20(fp)
 2003064:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2003068:	e0fffc17 	ldw	r3,-16(fp)
 200306c:	e0bffb17 	ldw	r2,-20(fp)
 2003070:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2003074:	e0bffb17 	ldw	r2,-20(fp)
 2003078:	10c00017 	ldw	r3,0(r2)
 200307c:	e0bffc17 	ldw	r2,-16(fp)
 2003080:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2003084:	e0bffb17 	ldw	r2,-20(fp)
 2003088:	10c00017 	ldw	r3,0(r2)
 200308c:	e0bffc17 	ldw	r2,-16(fp)
 2003090:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2003094:	e0fffb17 	ldw	r3,-20(fp)
 2003098:	e0bffc17 	ldw	r2,-16(fp)
 200309c:	18800015 	stw	r2,0(r3)

  return 0;  
 20030a0:	e03fff15 	stw	zero,-4(fp)
 20030a4:	e0bfff17 	ldw	r2,-4(fp)
}
 20030a8:	e037883a 	mov	sp,fp
 20030ac:	dfc00117 	ldw	ra,4(sp)
 20030b0:	df000017 	ldw	fp,0(sp)
 20030b4:	dec00204 	addi	sp,sp,8
 20030b8:	f800283a 	ret

020030bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20030bc:	defffd04 	addi	sp,sp,-12
 20030c0:	dfc00215 	stw	ra,8(sp)
 20030c4:	df000115 	stw	fp,4(sp)
 20030c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20030cc:	00808074 	movhi	r2,513
 20030d0:	10a16d04 	addi	r2,r2,-31308
 20030d4:	10800017 	ldw	r2,0(r2)
 20030d8:	1005003a 	cmpeq	r2,r2,zero
 20030dc:	1000061e 	bne	r2,zero,20030f8 <alt_get_errno+0x3c>
 20030e0:	00808074 	movhi	r2,513
 20030e4:	10a16d04 	addi	r2,r2,-31308
 20030e8:	10800017 	ldw	r2,0(r2)
 20030ec:	103ee83a 	callr	r2
 20030f0:	e0bfff15 	stw	r2,-4(fp)
 20030f4:	00000306 	br	2003104 <alt_get_errno+0x48>
 20030f8:	00808074 	movhi	r2,513
 20030fc:	10a18304 	addi	r2,r2,-31220
 2003100:	e0bfff15 	stw	r2,-4(fp)
 2003104:	e0bfff17 	ldw	r2,-4(fp)
}
 2003108:	e037883a 	mov	sp,fp
 200310c:	dfc00117 	ldw	ra,4(sp)
 2003110:	df000017 	ldw	fp,0(sp)
 2003114:	dec00204 	addi	sp,sp,8
 2003118:	f800283a 	ret

0200311c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200311c:	defffd04 	addi	sp,sp,-12
 2003120:	dfc00215 	stw	ra,8(sp)
 2003124:	df000115 	stw	fp,4(sp)
 2003128:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200312c:	00bfff04 	movi	r2,-4
 2003130:	00c08034 	movhi	r3,512
 2003134:	18da3304 	addi	r3,r3,26828
 2003138:	1885883a 	add	r2,r3,r2
 200313c:	e0bfff15 	stw	r2,-4(fp)
 2003140:	00000606 	br	200315c <_do_ctors+0x40>
        (*ctor) (); 
 2003144:	e0bfff17 	ldw	r2,-4(fp)
 2003148:	10800017 	ldw	r2,0(r2)
 200314c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2003150:	e0bfff17 	ldw	r2,-4(fp)
 2003154:	10bfff04 	addi	r2,r2,-4
 2003158:	e0bfff15 	stw	r2,-4(fp)
 200315c:	e0ffff17 	ldw	r3,-4(fp)
 2003160:	00808034 	movhi	r2,512
 2003164:	109a3204 	addi	r2,r2,26824
 2003168:	18bff62e 	bgeu	r3,r2,2003144 <_do_ctors+0x28>
        (*ctor) (); 
}
 200316c:	e037883a 	mov	sp,fp
 2003170:	dfc00117 	ldw	ra,4(sp)
 2003174:	df000017 	ldw	fp,0(sp)
 2003178:	dec00204 	addi	sp,sp,8
 200317c:	f800283a 	ret

02003180 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2003180:	defffd04 	addi	sp,sp,-12
 2003184:	dfc00215 	stw	ra,8(sp)
 2003188:	df000115 	stw	fp,4(sp)
 200318c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2003190:	00bfff04 	movi	r2,-4
 2003194:	00c08034 	movhi	r3,512
 2003198:	18da3304 	addi	r3,r3,26828
 200319c:	1885883a 	add	r2,r3,r2
 20031a0:	e0bfff15 	stw	r2,-4(fp)
 20031a4:	00000606 	br	20031c0 <_do_dtors+0x40>
        (*dtor) (); 
 20031a8:	e0bfff17 	ldw	r2,-4(fp)
 20031ac:	10800017 	ldw	r2,0(r2)
 20031b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20031b4:	e0bfff17 	ldw	r2,-4(fp)
 20031b8:	10bfff04 	addi	r2,r2,-4
 20031bc:	e0bfff15 	stw	r2,-4(fp)
 20031c0:	e0ffff17 	ldw	r3,-4(fp)
 20031c4:	00808034 	movhi	r2,512
 20031c8:	109a3304 	addi	r2,r2,26828
 20031cc:	18bff62e 	bgeu	r3,r2,20031a8 <_do_dtors+0x28>
        (*dtor) (); 
}
 20031d0:	e037883a 	mov	sp,fp
 20031d4:	dfc00117 	ldw	ra,4(sp)
 20031d8:	df000017 	ldw	fp,0(sp)
 20031dc:	dec00204 	addi	sp,sp,8
 20031e0:	f800283a 	ret

020031e4 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 20031e4:	defffb04 	addi	sp,sp,-20
 20031e8:	dfc00415 	stw	ra,16(sp)
 20031ec:	df000315 	stw	fp,12(sp)
 20031f0:	df000304 	addi	fp,sp,12
 20031f4:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 20031f8:	e13ffe17 	ldw	r4,-8(fp)
 20031fc:	d1600704 	addi	r5,gp,-32740
 2003200:	2003b1c0 	call	2003b1c <alt_find_dev>
 2003204:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 2003208:	e0bffd17 	ldw	r2,-12(fp)
 200320c:	1005003a 	cmpeq	r2,r2,zero
 2003210:	10000b1e 	bne	r2,zero,2003240 <alt_flash_open_dev+0x5c>
 2003214:	e0bffd17 	ldw	r2,-12(fp)
 2003218:	10800317 	ldw	r2,12(r2)
 200321c:	1005003a 	cmpeq	r2,r2,zero
 2003220:	1000071e 	bne	r2,zero,2003240 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 2003224:	e0bffd17 	ldw	r2,-12(fp)
 2003228:	10800317 	ldw	r2,12(r2)
 200322c:	e13ffd17 	ldw	r4,-12(fp)
 2003230:	e17ffe17 	ldw	r5,-8(fp)
 2003234:	103ee83a 	callr	r2
 2003238:	e0bfff15 	stw	r2,-4(fp)
 200323c:	00000206 	br	2003248 <alt_flash_open_dev+0x64>
  }

  return dev;
 2003240:	e0bffd17 	ldw	r2,-12(fp)
 2003244:	e0bfff15 	stw	r2,-4(fp)
 2003248:	e0bfff17 	ldw	r2,-4(fp)
}
 200324c:	e037883a 	mov	sp,fp
 2003250:	dfc00117 	ldw	ra,4(sp)
 2003254:	df000017 	ldw	fp,0(sp)
 2003258:	dec00204 	addi	sp,sp,8
 200325c:	f800283a 	ret

02003260 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 2003260:	defffd04 	addi	sp,sp,-12
 2003264:	dfc00215 	stw	ra,8(sp)
 2003268:	df000115 	stw	fp,4(sp)
 200326c:	df000104 	addi	fp,sp,4
 2003270:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2003274:	e0bfff17 	ldw	r2,-4(fp)
 2003278:	1005003a 	cmpeq	r2,r2,zero
 200327c:	1000081e 	bne	r2,zero,20032a0 <alt_flash_close_dev+0x40>
 2003280:	e0bfff17 	ldw	r2,-4(fp)
 2003284:	10800417 	ldw	r2,16(r2)
 2003288:	1005003a 	cmpeq	r2,r2,zero
 200328c:	1000041e 	bne	r2,zero,20032a0 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 2003290:	e0bfff17 	ldw	r2,-4(fp)
 2003294:	10800417 	ldw	r2,16(r2)
 2003298:	e13fff17 	ldw	r4,-4(fp)
 200329c:	103ee83a 	callr	r2
  }
  return;
}
 20032a0:	e037883a 	mov	sp,fp
 20032a4:	dfc00117 	ldw	ra,4(sp)
 20032a8:	df000017 	ldw	fp,0(sp)
 20032ac:	dec00204 	addi	sp,sp,8
 20032b0:	f800283a 	ret

020032b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 20032b4:	defff904 	addi	sp,sp,-28
 20032b8:	dfc00615 	stw	ra,24(sp)
 20032bc:	df000515 	stw	fp,20(sp)
 20032c0:	df000504 	addi	fp,sp,20
 20032c4:	e13ffc15 	stw	r4,-16(fp)
 20032c8:	e17ffd15 	stw	r5,-12(fp)
 20032cc:	e1bffe15 	stw	r6,-8(fp)
 20032d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 20032d4:	e13ffd17 	ldw	r4,-12(fp)
 20032d8:	e17ffe17 	ldw	r5,-8(fp)
 20032dc:	e1bfff17 	ldw	r6,-4(fp)
 20032e0:	20034cc0 	call	20034cc <open>
 20032e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 20032e8:	e0bffb17 	ldw	r2,-20(fp)
 20032ec:	1004803a 	cmplt	r2,r2,zero
 20032f0:	10001c1e 	bne	r2,zero,2003364 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 20032f4:	e0bffb17 	ldw	r2,-20(fp)
 20032f8:	00c08034 	movhi	r3,512
 20032fc:	18df0504 	addi	r3,r3,31764
 2003300:	10800324 	muli	r2,r2,12
 2003304:	10c5883a 	add	r2,r2,r3
 2003308:	10c00017 	ldw	r3,0(r2)
 200330c:	e0bffc17 	ldw	r2,-16(fp)
 2003310:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2003314:	e0bffb17 	ldw	r2,-20(fp)
 2003318:	00c08034 	movhi	r3,512
 200331c:	18df0504 	addi	r3,r3,31764
 2003320:	10800324 	muli	r2,r2,12
 2003324:	10c5883a 	add	r2,r2,r3
 2003328:	10800104 	addi	r2,r2,4
 200332c:	10c00017 	ldw	r3,0(r2)
 2003330:	e0bffc17 	ldw	r2,-16(fp)
 2003334:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2003338:	e0bffb17 	ldw	r2,-20(fp)
 200333c:	00c08034 	movhi	r3,512
 2003340:	18df0504 	addi	r3,r3,31764
 2003344:	10800324 	muli	r2,r2,12
 2003348:	10c5883a 	add	r2,r2,r3
 200334c:	10800204 	addi	r2,r2,8
 2003350:	10c00017 	ldw	r3,0(r2)
 2003354:	e0bffc17 	ldw	r2,-16(fp)
 2003358:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 200335c:	e13ffb17 	ldw	r4,-20(fp)
 2003360:	20036b40 	call	20036b4 <alt_release_fd>
  }
} 
 2003364:	e037883a 	mov	sp,fp
 2003368:	dfc00117 	ldw	ra,4(sp)
 200336c:	df000017 	ldw	fp,0(sp)
 2003370:	dec00204 	addi	sp,sp,8
 2003374:	f800283a 	ret

02003378 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2003378:	defffb04 	addi	sp,sp,-20
 200337c:	dfc00415 	stw	ra,16(sp)
 2003380:	df000315 	stw	fp,12(sp)
 2003384:	df000304 	addi	fp,sp,12
 2003388:	e13ffd15 	stw	r4,-12(fp)
 200338c:	e17ffe15 	stw	r5,-8(fp)
 2003390:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2003394:	01008034 	movhi	r4,512
 2003398:	211f0804 	addi	r4,r4,31776
 200339c:	e17ffd17 	ldw	r5,-12(fp)
 20033a0:	01800044 	movi	r6,1
 20033a4:	01c07fc4 	movi	r7,511
 20033a8:	20032b40 	call	20032b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 20033ac:	01008034 	movhi	r4,512
 20033b0:	211f0504 	addi	r4,r4,31764
 20033b4:	e17ffe17 	ldw	r5,-8(fp)
 20033b8:	000d883a 	mov	r6,zero
 20033bc:	01c07fc4 	movi	r7,511
 20033c0:	20032b40 	call	20032b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 20033c4:	01008034 	movhi	r4,512
 20033c8:	211f0b04 	addi	r4,r4,31788
 20033cc:	e17fff17 	ldw	r5,-4(fp)
 20033d0:	01800044 	movi	r6,1
 20033d4:	01c07fc4 	movi	r7,511
 20033d8:	20032b40 	call	20032b4 <alt_open_fd>
}  
 20033dc:	e037883a 	mov	sp,fp
 20033e0:	dfc00117 	ldw	ra,4(sp)
 20033e4:	df000017 	ldw	fp,0(sp)
 20033e8:	dec00204 	addi	sp,sp,8
 20033ec:	f800283a 	ret

020033f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 20033f0:	defffc04 	addi	sp,sp,-16
 20033f4:	df000315 	stw	fp,12(sp)
 20033f8:	df000304 	addi	fp,sp,12
 20033fc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2003400:	e0bffe17 	ldw	r2,-8(fp)
 2003404:	10800217 	ldw	r2,8(r2)
 2003408:	10d00034 	orhi	r3,r2,16384
 200340c:	e0bffe17 	ldw	r2,-8(fp)
 2003410:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2003414:	e03ffd15 	stw	zero,-12(fp)
 2003418:	00002006 	br	200349c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200341c:	e0bffd17 	ldw	r2,-12(fp)
 2003420:	00c08034 	movhi	r3,512
 2003424:	18df0504 	addi	r3,r3,31764
 2003428:	10800324 	muli	r2,r2,12
 200342c:	10c5883a 	add	r2,r2,r3
 2003430:	10c00017 	ldw	r3,0(r2)
 2003434:	e0bffe17 	ldw	r2,-8(fp)
 2003438:	10800017 	ldw	r2,0(r2)
 200343c:	1880141e 	bne	r3,r2,2003490 <alt_file_locked+0xa0>
 2003440:	e0bffd17 	ldw	r2,-12(fp)
 2003444:	00c08034 	movhi	r3,512
 2003448:	18df0504 	addi	r3,r3,31764
 200344c:	10800324 	muli	r2,r2,12
 2003450:	10c5883a 	add	r2,r2,r3
 2003454:	10800204 	addi	r2,r2,8
 2003458:	10800017 	ldw	r2,0(r2)
 200345c:	1004403a 	cmpge	r2,r2,zero
 2003460:	10000b1e 	bne	r2,zero,2003490 <alt_file_locked+0xa0>
 2003464:	e0bffd17 	ldw	r2,-12(fp)
 2003468:	10800324 	muli	r2,r2,12
 200346c:	1007883a 	mov	r3,r2
 2003470:	00808034 	movhi	r2,512
 2003474:	109f0504 	addi	r2,r2,31764
 2003478:	1887883a 	add	r3,r3,r2
 200347c:	e0bffe17 	ldw	r2,-8(fp)
 2003480:	18800326 	beq	r3,r2,2003490 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2003484:	00bffcc4 	movi	r2,-13
 2003488:	e0bfff15 	stw	r2,-4(fp)
 200348c:	00000a06 	br	20034b8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2003490:	e0bffd17 	ldw	r2,-12(fp)
 2003494:	10800044 	addi	r2,r2,1
 2003498:	e0bffd15 	stw	r2,-12(fp)
 200349c:	00808074 	movhi	r2,513
 20034a0:	10a16c04 	addi	r2,r2,-31312
 20034a4:	10800017 	ldw	r2,0(r2)
 20034a8:	1007883a 	mov	r3,r2
 20034ac:	e0bffd17 	ldw	r2,-12(fp)
 20034b0:	18bfda2e 	bgeu	r3,r2,200341c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 20034b4:	e03fff15 	stw	zero,-4(fp)
 20034b8:	e0bfff17 	ldw	r2,-4(fp)
}
 20034bc:	e037883a 	mov	sp,fp
 20034c0:	df000017 	ldw	fp,0(sp)
 20034c4:	dec00104 	addi	sp,sp,4
 20034c8:	f800283a 	ret

020034cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 20034cc:	defff404 	addi	sp,sp,-48
 20034d0:	dfc00b15 	stw	ra,44(sp)
 20034d4:	df000a15 	stw	fp,40(sp)
 20034d8:	df000a04 	addi	fp,sp,40
 20034dc:	e13ffb15 	stw	r4,-20(fp)
 20034e0:	e17ffc15 	stw	r5,-16(fp)
 20034e4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 20034e8:	00bfffc4 	movi	r2,-1
 20034ec:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 20034f0:	00bffb44 	movi	r2,-19
 20034f4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 20034f8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 20034fc:	e13ffb17 	ldw	r4,-20(fp)
 2003500:	01408074 	movhi	r5,513
 2003504:	29616a04 	addi	r5,r5,-31320
 2003508:	2003b1c0 	call	2003b1c <alt_find_dev>
 200350c:	e0bffa15 	stw	r2,-24(fp)
 2003510:	e0bffa17 	ldw	r2,-24(fp)
 2003514:	1004c03a 	cmpne	r2,r2,zero
 2003518:	1000051e 	bne	r2,zero,2003530 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 200351c:	e13ffb17 	ldw	r4,-20(fp)
 2003520:	2003bb00 	call	2003bb0 <alt_find_file>
 2003524:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2003528:	00800044 	movi	r2,1
 200352c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2003530:	e0bffa17 	ldw	r2,-24(fp)
 2003534:	1005003a 	cmpeq	r2,r2,zero
 2003538:	1000301e 	bne	r2,zero,20035fc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 200353c:	e13ffa17 	ldw	r4,-24(fp)
 2003540:	2003cd00 	call	2003cd0 <alt_get_fd>
 2003544:	e0bff815 	stw	r2,-32(fp)
 2003548:	e0bff817 	ldw	r2,-32(fp)
 200354c:	1004403a 	cmpge	r2,r2,zero
 2003550:	1000031e 	bne	r2,zero,2003560 <open+0x94>
    {
      status = index;
 2003554:	e0bff817 	ldw	r2,-32(fp)
 2003558:	e0bff715 	stw	r2,-36(fp)
 200355c:	00002906 	br	2003604 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 2003560:	e0bff817 	ldw	r2,-32(fp)
 2003564:	10800324 	muli	r2,r2,12
 2003568:	1007883a 	mov	r3,r2
 200356c:	00808034 	movhi	r2,512
 2003570:	109f0504 	addi	r2,r2,31764
 2003574:	1885883a 	add	r2,r3,r2
 2003578:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 200357c:	e0fffc17 	ldw	r3,-16(fp)
 2003580:	00900034 	movhi	r2,16384
 2003584:	10bfffc4 	addi	r2,r2,-1
 2003588:	1886703a 	and	r3,r3,r2
 200358c:	e0bff917 	ldw	r2,-28(fp)
 2003590:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2003594:	e0bff617 	ldw	r2,-40(fp)
 2003598:	1004c03a 	cmpne	r2,r2,zero
 200359c:	1000061e 	bne	r2,zero,20035b8 <open+0xec>
 20035a0:	e13ff917 	ldw	r4,-28(fp)
 20035a4:	20033f00 	call	20033f0 <alt_file_locked>
 20035a8:	e0bff715 	stw	r2,-36(fp)
 20035ac:	e0bff717 	ldw	r2,-36(fp)
 20035b0:	1004803a 	cmplt	r2,r2,zero
 20035b4:	1000131e 	bne	r2,zero,2003604 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 20035b8:	e0bffa17 	ldw	r2,-24(fp)
 20035bc:	10800317 	ldw	r2,12(r2)
 20035c0:	1005003a 	cmpeq	r2,r2,zero
 20035c4:	1000091e 	bne	r2,zero,20035ec <open+0x120>
 20035c8:	e0bffa17 	ldw	r2,-24(fp)
 20035cc:	10800317 	ldw	r2,12(r2)
 20035d0:	e13ff917 	ldw	r4,-28(fp)
 20035d4:	e17ffb17 	ldw	r5,-20(fp)
 20035d8:	e1bffc17 	ldw	r6,-16(fp)
 20035dc:	e1fffd17 	ldw	r7,-12(fp)
 20035e0:	103ee83a 	callr	r2
 20035e4:	e0bfff15 	stw	r2,-4(fp)
 20035e8:	00000106 	br	20035f0 <open+0x124>
 20035ec:	e03fff15 	stw	zero,-4(fp)
 20035f0:	e0bfff17 	ldw	r2,-4(fp)
 20035f4:	e0bff715 	stw	r2,-36(fp)
 20035f8:	00000206 	br	2003604 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 20035fc:	00bffb44 	movi	r2,-19
 2003600:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2003604:	e0bff717 	ldw	r2,-36(fp)
 2003608:	1004403a 	cmpge	r2,r2,zero
 200360c:	1000091e 	bne	r2,zero,2003634 <open+0x168>
  {
    alt_release_fd (index);  
 2003610:	e13ff817 	ldw	r4,-32(fp)
 2003614:	20036b40 	call	20036b4 <alt_release_fd>
    ALT_ERRNO = -status;
 2003618:	20036540 	call	2003654 <alt_get_errno>
 200361c:	e0fff717 	ldw	r3,-36(fp)
 2003620:	00c7c83a 	sub	r3,zero,r3
 2003624:	10c00015 	stw	r3,0(r2)
    return -1;
 2003628:	00bfffc4 	movi	r2,-1
 200362c:	e0bffe15 	stw	r2,-8(fp)
 2003630:	00000206 	br	200363c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 2003634:	e0bff817 	ldw	r2,-32(fp)
 2003638:	e0bffe15 	stw	r2,-8(fp)
 200363c:	e0bffe17 	ldw	r2,-8(fp)
}
 2003640:	e037883a 	mov	sp,fp
 2003644:	dfc00117 	ldw	ra,4(sp)
 2003648:	df000017 	ldw	fp,0(sp)
 200364c:	dec00204 	addi	sp,sp,8
 2003650:	f800283a 	ret

02003654 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003654:	defffd04 	addi	sp,sp,-12
 2003658:	dfc00215 	stw	ra,8(sp)
 200365c:	df000115 	stw	fp,4(sp)
 2003660:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2003664:	00808074 	movhi	r2,513
 2003668:	10a16d04 	addi	r2,r2,-31308
 200366c:	10800017 	ldw	r2,0(r2)
 2003670:	1005003a 	cmpeq	r2,r2,zero
 2003674:	1000061e 	bne	r2,zero,2003690 <alt_get_errno+0x3c>
 2003678:	00808074 	movhi	r2,513
 200367c:	10a16d04 	addi	r2,r2,-31308
 2003680:	10800017 	ldw	r2,0(r2)
 2003684:	103ee83a 	callr	r2
 2003688:	e0bfff15 	stw	r2,-4(fp)
 200368c:	00000306 	br	200369c <alt_get_errno+0x48>
 2003690:	00808074 	movhi	r2,513
 2003694:	10a18304 	addi	r2,r2,-31220
 2003698:	e0bfff15 	stw	r2,-4(fp)
 200369c:	e0bfff17 	ldw	r2,-4(fp)
}
 20036a0:	e037883a 	mov	sp,fp
 20036a4:	dfc00117 	ldw	ra,4(sp)
 20036a8:	df000017 	ldw	fp,0(sp)
 20036ac:	dec00204 	addi	sp,sp,8
 20036b0:	f800283a 	ret

020036b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20036b4:	defffe04 	addi	sp,sp,-8
 20036b8:	df000115 	stw	fp,4(sp)
 20036bc:	df000104 	addi	fp,sp,4
 20036c0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 20036c4:	e0bfff17 	ldw	r2,-4(fp)
 20036c8:	108000d0 	cmplti	r2,r2,3
 20036cc:	10000d1e 	bne	r2,zero,2003704 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 20036d0:	e0bfff17 	ldw	r2,-4(fp)
 20036d4:	00c08034 	movhi	r3,512
 20036d8:	18df0504 	addi	r3,r3,31764
 20036dc:	10800324 	muli	r2,r2,12
 20036e0:	10c5883a 	add	r2,r2,r3
 20036e4:	10800204 	addi	r2,r2,8
 20036e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 20036ec:	e0bfff17 	ldw	r2,-4(fp)
 20036f0:	00c08034 	movhi	r3,512
 20036f4:	18df0504 	addi	r3,r3,31764
 20036f8:	10800324 	muli	r2,r2,12
 20036fc:	10c5883a 	add	r2,r2,r3
 2003700:	10000015 	stw	zero,0(r2)
  }
}
 2003704:	e037883a 	mov	sp,fp
 2003708:	df000017 	ldw	fp,0(sp)
 200370c:	dec00104 	addi	sp,sp,4
 2003710:	f800283a 	ret

02003714 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2003714:	defff904 	addi	sp,sp,-28
 2003718:	df000615 	stw	fp,24(sp)
 200371c:	df000604 	addi	fp,sp,24
 2003720:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003724:	0005303a 	rdctl	r2,status
 2003728:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200372c:	e0fffd17 	ldw	r3,-12(fp)
 2003730:	00bfff84 	movi	r2,-2
 2003734:	1884703a 	and	r2,r3,r2
 2003738:	1001703a 	wrctl	status,r2
  
  return context;
 200373c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2003740:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2003744:	e0bfff17 	ldw	r2,-4(fp)
 2003748:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200374c:	e0bffc17 	ldw	r2,-16(fp)
 2003750:	10c00017 	ldw	r3,0(r2)
 2003754:	e0bffc17 	ldw	r2,-16(fp)
 2003758:	10800117 	ldw	r2,4(r2)
 200375c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2003760:	e0bffc17 	ldw	r2,-16(fp)
 2003764:	10c00117 	ldw	r3,4(r2)
 2003768:	e0bffc17 	ldw	r2,-16(fp)
 200376c:	10800017 	ldw	r2,0(r2)
 2003770:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2003774:	e0fffc17 	ldw	r3,-16(fp)
 2003778:	e0bffc17 	ldw	r2,-16(fp)
 200377c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2003780:	e0fffc17 	ldw	r3,-16(fp)
 2003784:	e0bffc17 	ldw	r2,-16(fp)
 2003788:	18800015 	stw	r2,0(r3)
 200378c:	e0bffe17 	ldw	r2,-8(fp)
 2003790:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2003794:	0005303a 	rdctl	r2,status
 2003798:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 200379c:	e0fffb17 	ldw	r3,-20(fp)
 20037a0:	00bfff84 	movi	r2,-2
 20037a4:	1884703a 	and	r2,r3,r2
 20037a8:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 20037ac:	e0bffa17 	ldw	r2,-24(fp)
 20037b0:	10c0004c 	andi	r3,r2,1
 20037b4:	e0bffb17 	ldw	r2,-20(fp)
 20037b8:	10c4b03a 	or	r2,r2,r3
 20037bc:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
 20037c0:	e0bffb17 	ldw	r2,-20(fp)
 20037c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20037c8:	e037883a 	mov	sp,fp
 20037cc:	df000017 	ldw	fp,0(sp)
 20037d0:	dec00104 	addi	sp,sp,4
 20037d4:	f800283a 	ret

020037d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20037d8:	defffb04 	addi	sp,sp,-20
 20037dc:	dfc00415 	stw	ra,16(sp)
 20037e0:	df000315 	stw	fp,12(sp)
 20037e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 20037e8:	d0a00917 	ldw	r2,-32732(gp)
 20037ec:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 20037f0:	d0a01b17 	ldw	r2,-32660(gp)
 20037f4:	10800044 	addi	r2,r2,1
 20037f8:	d0a01b15 	stw	r2,-32660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20037fc:	00003106 	br	20038c4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2003800:	e0bffe17 	ldw	r2,-8(fp)
 2003804:	10800017 	ldw	r2,0(r2)
 2003808:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 200380c:	e0bffe17 	ldw	r2,-8(fp)
 2003810:	10800403 	ldbu	r2,16(r2)
 2003814:	10803fcc 	andi	r2,r2,255
 2003818:	1005003a 	cmpeq	r2,r2,zero
 200381c:	1000051e 	bne	r2,zero,2003834 <alt_tick+0x5c>
 2003820:	d0a01b17 	ldw	r2,-32660(gp)
 2003824:	1004c03a 	cmpne	r2,r2,zero
 2003828:	1000021e 	bne	r2,zero,2003834 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 200382c:	e0bffe17 	ldw	r2,-8(fp)
 2003830:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2003834:	e0bffe17 	ldw	r2,-8(fp)
 2003838:	10c00217 	ldw	r3,8(r2)
 200383c:	d0a01b17 	ldw	r2,-32660(gp)
 2003840:	10c01e36 	bltu	r2,r3,20038bc <alt_tick+0xe4>
 2003844:	e0bffe17 	ldw	r2,-8(fp)
 2003848:	10800403 	ldbu	r2,16(r2)
 200384c:	10803fcc 	andi	r2,r2,255
 2003850:	1004c03a 	cmpne	r2,r2,zero
 2003854:	1000191e 	bne	r2,zero,20038bc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 2003858:	e0bffe17 	ldw	r2,-8(fp)
 200385c:	10c00317 	ldw	r3,12(r2)
 2003860:	e0bffe17 	ldw	r2,-8(fp)
 2003864:	11000517 	ldw	r4,20(r2)
 2003868:	183ee83a 	callr	r3
 200386c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2003870:	e0bffd17 	ldw	r2,-12(fp)
 2003874:	1004c03a 	cmpne	r2,r2,zero
 2003878:	1000031e 	bne	r2,zero,2003888 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 200387c:	e13ffe17 	ldw	r4,-8(fp)
 2003880:	20037140 	call	2003714 <alt_alarm_stop>
 2003884:	00000d06 	br	20038bc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2003888:	e0bffe17 	ldw	r2,-8(fp)
 200388c:	10c00217 	ldw	r3,8(r2)
 2003890:	e0bffd17 	ldw	r2,-12(fp)
 2003894:	1887883a 	add	r3,r3,r2
 2003898:	e0bffe17 	ldw	r2,-8(fp)
 200389c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 20038a0:	e0bffe17 	ldw	r2,-8(fp)
 20038a4:	10c00217 	ldw	r3,8(r2)
 20038a8:	d0a01b17 	ldw	r2,-32660(gp)
 20038ac:	1880032e 	bgeu	r3,r2,20038bc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 20038b0:	e0fffe17 	ldw	r3,-8(fp)
 20038b4:	00800044 	movi	r2,1
 20038b8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 20038bc:	e0bfff17 	ldw	r2,-4(fp)
 20038c0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20038c4:	d0e00904 	addi	r3,gp,-32732
 20038c8:	e0bffe17 	ldw	r2,-8(fp)
 20038cc:	10ffcc1e 	bne	r2,r3,2003800 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 20038d0:	e037883a 	mov	sp,fp
 20038d4:	dfc00117 	ldw	ra,4(sp)
 20038d8:	df000017 	ldw	fp,0(sp)
 20038dc:	dec00204 	addi	sp,sp,8
 20038e0:	f800283a 	ret

020038e4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 20038e4:	defff404 	addi	sp,sp,-48
 20038e8:	df000b15 	stw	fp,44(sp)
 20038ec:	df000b04 	addi	fp,sp,44
 20038f0:	e13ffc15 	stw	r4,-16(fp)
 20038f4:	e17ffd15 	stw	r5,-12(fp)
 20038f8:	e1bffe15 	stw	r6,-8(fp)
 20038fc:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2003900:	e0fffe17 	ldw	r3,-8(fp)
 2003904:	e0bfff17 	ldw	r2,-4(fp)
 2003908:	10c5883a 	add	r2,r2,r3
 200390c:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 2003910:	e0c00117 	ldw	r3,4(fp)
 2003914:	e0800217 	ldw	r2,8(fp)
 2003918:	10c5883a 	add	r2,r2,r3
 200391c:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 2003920:	e0800117 	ldw	r2,4(fp)
 2003924:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 2003928:	e0bffe17 	ldw	r2,-8(fp)
 200392c:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2003930:	00800044 	movi	r2,1
 2003934:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2003938:	e0bffc17 	ldw	r2,-16(fp)
 200393c:	11000504 	addi	r4,r2,20
 2003940:	e0fffd17 	ldw	r3,-12(fp)
 2003944:	00800044 	movi	r2,1
 2003948:	10c6983a 	sll	r3,r2,r3
 200394c:	2005883a 	mov	r2,r4
 2003950:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2003954:	e0800317 	ldw	r2,12(fp)
 2003958:	1080008c 	andi	r2,r2,2
 200395c:	1004c03a 	cmpne	r2,r2,zero
 2003960:	1000051e 	bne	r2,zero,2003978 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2003964:	e0bffc17 	ldw	r2,-16(fp)
 2003968:	10800304 	addi	r2,r2,12
 200396c:	1007883a 	mov	r3,r2
 2003970:	00810004 	movi	r2,1024
 2003974:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2003978:	e0bffc17 	ldw	r2,-16(fp)
 200397c:	10800037 	ldwio	r2,0(r2)
 2003980:	00000006 	br	2003984 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2003984:	e0bffc17 	ldw	r2,-16(fp)
 2003988:	10800204 	addi	r2,r2,8
 200398c:	10800037 	ldwio	r2,0(r2)
 2003990:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2003994:	e0bff717 	ldw	r2,-36(fp)
 2003998:	1080100c 	andi	r2,r2,64
 200399c:	1005003a 	cmpeq	r2,r2,zero
 20039a0:	1000031e 	bne	r2,zero,20039b0 <alt_avalon_spi_command+0xcc>
 20039a4:	e0bff617 	ldw	r2,-40(fp)
 20039a8:	1004c03a 	cmpne	r2,r2,zero
 20039ac:	1000041e 	bne	r2,zero,20039c0 <alt_avalon_spi_command+0xdc>
 20039b0:	e0bff717 	ldw	r2,-36(fp)
 20039b4:	1080200c 	andi	r2,r2,128
 20039b8:	1005003a 	cmpeq	r2,r2,zero
 20039bc:	103ff11e 	bne	r2,zero,2003984 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 20039c0:	e0bff717 	ldw	r2,-36(fp)
 20039c4:	1080100c 	andi	r2,r2,64
 20039c8:	1005003a 	cmpeq	r2,r2,zero
 20039cc:	1000201e 	bne	r2,zero,2003a50 <alt_avalon_spi_command+0x16c>
 20039d0:	e0bff617 	ldw	r2,-40(fp)
 20039d4:	10800050 	cmplti	r2,r2,1
 20039d8:	10001d1e 	bne	r2,zero,2003a50 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 20039dc:	e0bff617 	ldw	r2,-40(fp)
 20039e0:	10bfffc4 	addi	r2,r2,-1
 20039e4:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 20039e8:	e0ffff17 	ldw	r3,-4(fp)
 20039ec:	e0bffb17 	ldw	r2,-20(fp)
 20039f0:	18800b2e 	bgeu	r3,r2,2003a20 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 20039f4:	e0bffc17 	ldw	r2,-16(fp)
 20039f8:	11000104 	addi	r4,r2,4
 20039fc:	e0bfff17 	ldw	r2,-4(fp)
 2003a00:	10800003 	ldbu	r2,0(r2)
 2003a04:	10c03fcc 	andi	r3,r2,255
 2003a08:	e0bfff17 	ldw	r2,-4(fp)
 2003a0c:	10800044 	addi	r2,r2,1
 2003a10:	e0bfff15 	stw	r2,-4(fp)
 2003a14:	2005883a 	mov	r2,r4
 2003a18:	10c00035 	stwio	r3,0(r2)
 2003a1c:	00000c06 	br	2003a50 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 2003a20:	e0bff917 	ldw	r2,-28(fp)
 2003a24:	1005003a 	cmpeq	r2,r2,zero
 2003a28:	1000071e 	bne	r2,zero,2003a48 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 2003a2c:	e0bff917 	ldw	r2,-28(fp)
 2003a30:	10bfffc4 	addi	r2,r2,-1
 2003a34:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2003a38:	e0bffc17 	ldw	r2,-16(fp)
 2003a3c:	10800104 	addi	r2,r2,4
 2003a40:	10000035 	stwio	zero,0(r2)
 2003a44:	00000206 	br	2003a50 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 2003a48:	00bf0004 	movi	r2,-1024
 2003a4c:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2003a50:	e0bff717 	ldw	r2,-36(fp)
 2003a54:	1080200c 	andi	r2,r2,128
 2003a58:	1005003a 	cmpeq	r2,r2,zero
 2003a5c:	103fc91e 	bne	r2,zero,2003984 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2003a60:	e0bffc17 	ldw	r2,-16(fp)
 2003a64:	10800037 	ldwio	r2,0(r2)
 2003a68:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 2003a6c:	e0bff817 	ldw	r2,-32(fp)
 2003a70:	1005003a 	cmpeq	r2,r2,zero
 2003a74:	1000041e 	bne	r2,zero,2003a88 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 2003a78:	e0bff817 	ldw	r2,-32(fp)
 2003a7c:	10bfffc4 	addi	r2,r2,-1
 2003a80:	e0bff815 	stw	r2,-32(fp)
 2003a84:	00000706 	br	2003aa4 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 2003a88:	e0bff517 	ldw	r2,-44(fp)
 2003a8c:	1007883a 	mov	r3,r2
 2003a90:	e0800217 	ldw	r2,8(fp)
 2003a94:	10c00005 	stb	r3,0(r2)
 2003a98:	e0800217 	ldw	r2,8(fp)
 2003a9c:	10800044 	addi	r2,r2,1
 2003aa0:	e0800215 	stw	r2,8(fp)
      credits++;
 2003aa4:	e0bff617 	ldw	r2,-40(fp)
 2003aa8:	10800044 	addi	r2,r2,1
 2003aac:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 2003ab0:	e0bff817 	ldw	r2,-32(fp)
 2003ab4:	1004c03a 	cmpne	r2,r2,zero
 2003ab8:	103fb21e 	bne	r2,zero,2003984 <alt_avalon_spi_command+0xa0>
 2003abc:	e0c00217 	ldw	r3,8(fp)
 2003ac0:	e0bffa17 	ldw	r2,-24(fp)
 2003ac4:	18800126 	beq	r3,r2,2003acc <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 2003ac8:	003fae06 	br	2003984 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2003acc:	e0bffc17 	ldw	r2,-16(fp)
 2003ad0:	10800204 	addi	r2,r2,8
 2003ad4:	10800037 	ldwio	r2,0(r2)
 2003ad8:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2003adc:	e0bff717 	ldw	r2,-36(fp)
 2003ae0:	1080080c 	andi	r2,r2,32
 2003ae4:	1005003a 	cmpeq	r2,r2,zero
 2003ae8:	103ff81e 	bne	r2,zero,2003acc <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2003aec:	e0800317 	ldw	r2,12(fp)
 2003af0:	1080004c 	andi	r2,r2,1
 2003af4:	1004c03a 	cmpne	r2,r2,zero
 2003af8:	1000031e 	bne	r2,zero,2003b08 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2003afc:	e0bffc17 	ldw	r2,-16(fp)
 2003b00:	10800304 	addi	r2,r2,12
 2003b04:	10000035 	stwio	zero,0(r2)

  return read_length;
 2003b08:	e0800117 	ldw	r2,4(fp)
}
 2003b0c:	e037883a 	mov	sp,fp
 2003b10:	df000017 	ldw	fp,0(sp)
 2003b14:	dec00104 	addi	sp,sp,4
 2003b18:	f800283a 	ret

02003b1c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2003b1c:	defff904 	addi	sp,sp,-28
 2003b20:	dfc00615 	stw	ra,24(sp)
 2003b24:	df000515 	stw	fp,20(sp)
 2003b28:	df000504 	addi	fp,sp,20
 2003b2c:	e13ffd15 	stw	r4,-12(fp)
 2003b30:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2003b34:	e0bffe17 	ldw	r2,-8(fp)
 2003b38:	10800017 	ldw	r2,0(r2)
 2003b3c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2003b40:	e13ffd17 	ldw	r4,-12(fp)
 2003b44:	20040d40 	call	20040d4 <strlen>
 2003b48:	10800044 	addi	r2,r2,1
 2003b4c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2003b50:	00000d06 	br	2003b88 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2003b54:	e0bffc17 	ldw	r2,-16(fp)
 2003b58:	11000217 	ldw	r4,8(r2)
 2003b5c:	e1bffb17 	ldw	r6,-20(fp)
 2003b60:	e17ffd17 	ldw	r5,-12(fp)
 2003b64:	2003dd40 	call	2003dd4 <memcmp>
 2003b68:	1004c03a 	cmpne	r2,r2,zero
 2003b6c:	1000031e 	bne	r2,zero,2003b7c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2003b70:	e0bffc17 	ldw	r2,-16(fp)
 2003b74:	e0bfff15 	stw	r2,-4(fp)
 2003b78:	00000706 	br	2003b98 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2003b7c:	e0bffc17 	ldw	r2,-16(fp)
 2003b80:	10800017 	ldw	r2,0(r2)
 2003b84:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2003b88:	e0fffe17 	ldw	r3,-8(fp)
 2003b8c:	e0bffc17 	ldw	r2,-16(fp)
 2003b90:	10fff01e 	bne	r2,r3,2003b54 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2003b94:	e03fff15 	stw	zero,-4(fp)
 2003b98:	e0bfff17 	ldw	r2,-4(fp)
}
 2003b9c:	e037883a 	mov	sp,fp
 2003ba0:	dfc00117 	ldw	ra,4(sp)
 2003ba4:	df000017 	ldw	fp,0(sp)
 2003ba8:	dec00204 	addi	sp,sp,8
 2003bac:	f800283a 	ret

02003bb0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2003bb0:	defffa04 	addi	sp,sp,-24
 2003bb4:	dfc00515 	stw	ra,20(sp)
 2003bb8:	df000415 	stw	fp,16(sp)
 2003bbc:	df000404 	addi	fp,sp,16
 2003bc0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2003bc4:	00808074 	movhi	r2,513
 2003bc8:	10a16804 	addi	r2,r2,-31328
 2003bcc:	10800017 	ldw	r2,0(r2)
 2003bd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2003bd4:	00003306 	br	2003ca4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 2003bd8:	e0bffd17 	ldw	r2,-12(fp)
 2003bdc:	11000217 	ldw	r4,8(r2)
 2003be0:	20040d40 	call	20040d4 <strlen>
 2003be4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2003be8:	e0bffd17 	ldw	r2,-12(fp)
 2003bec:	10c00217 	ldw	r3,8(r2)
 2003bf0:	e0bffc17 	ldw	r2,-16(fp)
 2003bf4:	1885883a 	add	r2,r3,r2
 2003bf8:	10bfffc4 	addi	r2,r2,-1
 2003bfc:	10800003 	ldbu	r2,0(r2)
 2003c00:	10803fcc 	andi	r2,r2,255
 2003c04:	1080201c 	xori	r2,r2,128
 2003c08:	10bfe004 	addi	r2,r2,-128
 2003c0c:	10800bd8 	cmpnei	r2,r2,47
 2003c10:	1000031e 	bne	r2,zero,2003c20 <alt_find_file+0x70>
    {
      len -= 1;
 2003c14:	e0bffc17 	ldw	r2,-16(fp)
 2003c18:	10bfffc4 	addi	r2,r2,-1
 2003c1c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2003c20:	e0bffc17 	ldw	r2,-16(fp)
 2003c24:	1007883a 	mov	r3,r2
 2003c28:	e0bffe17 	ldw	r2,-8(fp)
 2003c2c:	1885883a 	add	r2,r3,r2
 2003c30:	10800003 	ldbu	r2,0(r2)
 2003c34:	10803fcc 	andi	r2,r2,255
 2003c38:	1080201c 	xori	r2,r2,128
 2003c3c:	10bfe004 	addi	r2,r2,-128
 2003c40:	10800be0 	cmpeqi	r2,r2,47
 2003c44:	10000a1e 	bne	r2,zero,2003c70 <alt_find_file+0xc0>
 2003c48:	e0bffc17 	ldw	r2,-16(fp)
 2003c4c:	1007883a 	mov	r3,r2
 2003c50:	e0bffe17 	ldw	r2,-8(fp)
 2003c54:	1885883a 	add	r2,r3,r2
 2003c58:	10800003 	ldbu	r2,0(r2)
 2003c5c:	10803fcc 	andi	r2,r2,255
 2003c60:	1080201c 	xori	r2,r2,128
 2003c64:	10bfe004 	addi	r2,r2,-128
 2003c68:	1004c03a 	cmpne	r2,r2,zero
 2003c6c:	10000a1e 	bne	r2,zero,2003c98 <alt_find_file+0xe8>
 2003c70:	e0bffd17 	ldw	r2,-12(fp)
 2003c74:	11000217 	ldw	r4,8(r2)
 2003c78:	e1bffc17 	ldw	r6,-16(fp)
 2003c7c:	e17ffe17 	ldw	r5,-8(fp)
 2003c80:	2003dd40 	call	2003dd4 <memcmp>
 2003c84:	1004c03a 	cmpne	r2,r2,zero
 2003c88:	1000031e 	bne	r2,zero,2003c98 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2003c8c:	e0bffd17 	ldw	r2,-12(fp)
 2003c90:	e0bfff15 	stw	r2,-4(fp)
 2003c94:	00000806 	br	2003cb8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 2003c98:	e0bffd17 	ldw	r2,-12(fp)
 2003c9c:	10800017 	ldw	r2,0(r2)
 2003ca0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2003ca4:	00c08074 	movhi	r3,513
 2003ca8:	18e16804 	addi	r3,r3,-31328
 2003cac:	e0bffd17 	ldw	r2,-12(fp)
 2003cb0:	10ffc91e 	bne	r2,r3,2003bd8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2003cb4:	e03fff15 	stw	zero,-4(fp)
 2003cb8:	e0bfff17 	ldw	r2,-4(fp)
}
 2003cbc:	e037883a 	mov	sp,fp
 2003cc0:	dfc00117 	ldw	ra,4(sp)
 2003cc4:	df000017 	ldw	fp,0(sp)
 2003cc8:	dec00204 	addi	sp,sp,8
 2003ccc:	f800283a 	ret

02003cd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2003cd0:	defffc04 	addi	sp,sp,-16
 2003cd4:	df000315 	stw	fp,12(sp)
 2003cd8:	df000304 	addi	fp,sp,12
 2003cdc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2003ce0:	00bffa04 	movi	r2,-24
 2003ce4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2003ce8:	e03ffe15 	stw	zero,-8(fp)
 2003cec:	00001e06 	br	2003d68 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 2003cf0:	e0bffe17 	ldw	r2,-8(fp)
 2003cf4:	00c08034 	movhi	r3,512
 2003cf8:	18df0504 	addi	r3,r3,31764
 2003cfc:	10800324 	muli	r2,r2,12
 2003d00:	10c5883a 	add	r2,r2,r3
 2003d04:	10800017 	ldw	r2,0(r2)
 2003d08:	1004c03a 	cmpne	r2,r2,zero
 2003d0c:	1000131e 	bne	r2,zero,2003d5c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 2003d10:	e0bffe17 	ldw	r2,-8(fp)
 2003d14:	00c08034 	movhi	r3,512
 2003d18:	18df0504 	addi	r3,r3,31764
 2003d1c:	10800324 	muli	r2,r2,12
 2003d20:	10c7883a 	add	r3,r2,r3
 2003d24:	e0bfff17 	ldw	r2,-4(fp)
 2003d28:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 2003d2c:	00808074 	movhi	r2,513
 2003d30:	10a16c04 	addi	r2,r2,-31312
 2003d34:	10c00017 	ldw	r3,0(r2)
 2003d38:	e0bffe17 	ldw	r2,-8(fp)
 2003d3c:	1880040e 	bge	r3,r2,2003d50 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 2003d40:	00c08074 	movhi	r3,513
 2003d44:	18e16c04 	addi	r3,r3,-31312
 2003d48:	e0bffe17 	ldw	r2,-8(fp)
 2003d4c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2003d50:	e0bffe17 	ldw	r2,-8(fp)
 2003d54:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2003d58:	00000606 	br	2003d74 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2003d5c:	e0bffe17 	ldw	r2,-8(fp)
 2003d60:	10800044 	addi	r2,r2,1
 2003d64:	e0bffe15 	stw	r2,-8(fp)
 2003d68:	e0bffe17 	ldw	r2,-8(fp)
 2003d6c:	10800810 	cmplti	r2,r2,32
 2003d70:	103fdf1e 	bne	r2,zero,2003cf0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2003d74:	e0bffd17 	ldw	r2,-12(fp)
}
 2003d78:	e037883a 	mov	sp,fp
 2003d7c:	df000017 	ldw	fp,0(sp)
 2003d80:	dec00104 	addi	sp,sp,4
 2003d84:	f800283a 	ret

02003d88 <atexit>:
 2003d88:	200b883a 	mov	r5,r4
 2003d8c:	000d883a 	mov	r6,zero
 2003d90:	0009883a 	mov	r4,zero
 2003d94:	000f883a 	mov	r7,zero
 2003d98:	20043d01 	jmpi	20043d0 <__register_exitproc>

02003d9c <exit>:
 2003d9c:	defffe04 	addi	sp,sp,-8
 2003da0:	000b883a 	mov	r5,zero
 2003da4:	dc000015 	stw	r16,0(sp)
 2003da8:	dfc00115 	stw	ra,4(sp)
 2003dac:	2021883a 	mov	r16,r4
 2003db0:	20045080 	call	2004508 <__call_exitprocs>
 2003db4:	00808074 	movhi	r2,513
 2003db8:	10a17304 	addi	r2,r2,-31284
 2003dbc:	11000017 	ldw	r4,0(r2)
 2003dc0:	20800f17 	ldw	r2,60(r4)
 2003dc4:	10000126 	beq	r2,zero,2003dcc <exit+0x30>
 2003dc8:	103ee83a 	callr	r2
 2003dcc:	8009883a 	mov	r4,r16
 2003dd0:	20060b00 	call	20060b0 <_exit>

02003dd4 <memcmp>:
 2003dd4:	00c000c4 	movi	r3,3
 2003dd8:	1980032e 	bgeu	r3,r6,2003de8 <memcmp+0x14>
 2003ddc:	2144b03a 	or	r2,r4,r5
 2003de0:	10c4703a 	and	r2,r2,r3
 2003de4:	10000f26 	beq	r2,zero,2003e24 <memcmp+0x50>
 2003de8:	31ffffc4 	addi	r7,r6,-1
 2003dec:	3000061e 	bne	r6,zero,2003e08 <memcmp+0x34>
 2003df0:	00000a06 	br	2003e1c <memcmp+0x48>
 2003df4:	39ffffc4 	addi	r7,r7,-1
 2003df8:	00bfffc4 	movi	r2,-1
 2003dfc:	21000044 	addi	r4,r4,1
 2003e00:	29400044 	addi	r5,r5,1
 2003e04:	38800526 	beq	r7,r2,2003e1c <memcmp+0x48>
 2003e08:	20c00003 	ldbu	r3,0(r4)
 2003e0c:	28800003 	ldbu	r2,0(r5)
 2003e10:	18bff826 	beq	r3,r2,2003df4 <memcmp+0x20>
 2003e14:	1885c83a 	sub	r2,r3,r2
 2003e18:	f800283a 	ret
 2003e1c:	0005883a 	mov	r2,zero
 2003e20:	f800283a 	ret
 2003e24:	180f883a 	mov	r7,r3
 2003e28:	20c00017 	ldw	r3,0(r4)
 2003e2c:	28800017 	ldw	r2,0(r5)
 2003e30:	18bfed1e 	bne	r3,r2,2003de8 <memcmp+0x14>
 2003e34:	31bfff04 	addi	r6,r6,-4
 2003e38:	21000104 	addi	r4,r4,4
 2003e3c:	29400104 	addi	r5,r5,4
 2003e40:	39bff936 	bltu	r7,r6,2003e28 <memcmp+0x54>
 2003e44:	003fe806 	br	2003de8 <memcmp+0x14>

02003e48 <memcpy>:
 2003e48:	01c003c4 	movi	r7,15
 2003e4c:	2007883a 	mov	r3,r4
 2003e50:	3980032e 	bgeu	r7,r6,2003e60 <memcpy+0x18>
 2003e54:	2904b03a 	or	r2,r5,r4
 2003e58:	108000cc 	andi	r2,r2,3
 2003e5c:	10000926 	beq	r2,zero,2003e84 <memcpy+0x3c>
 2003e60:	30000626 	beq	r6,zero,2003e7c <memcpy+0x34>
 2003e64:	30cd883a 	add	r6,r6,r3
 2003e68:	28800003 	ldbu	r2,0(r5)
 2003e6c:	29400044 	addi	r5,r5,1
 2003e70:	18800005 	stb	r2,0(r3)
 2003e74:	18c00044 	addi	r3,r3,1
 2003e78:	30fffb1e 	bne	r6,r3,2003e68 <memcpy+0x20>
 2003e7c:	2005883a 	mov	r2,r4
 2003e80:	f800283a 	ret
 2003e84:	3811883a 	mov	r8,r7
 2003e88:	200f883a 	mov	r7,r4
 2003e8c:	28c00017 	ldw	r3,0(r5)
 2003e90:	31bffc04 	addi	r6,r6,-16
 2003e94:	38c00015 	stw	r3,0(r7)
 2003e98:	28800117 	ldw	r2,4(r5)
 2003e9c:	38800115 	stw	r2,4(r7)
 2003ea0:	28c00217 	ldw	r3,8(r5)
 2003ea4:	38c00215 	stw	r3,8(r7)
 2003ea8:	28800317 	ldw	r2,12(r5)
 2003eac:	29400404 	addi	r5,r5,16
 2003eb0:	38800315 	stw	r2,12(r7)
 2003eb4:	39c00404 	addi	r7,r7,16
 2003eb8:	41bff436 	bltu	r8,r6,2003e8c <memcpy+0x44>
 2003ebc:	008000c4 	movi	r2,3
 2003ec0:	1180072e 	bgeu	r2,r6,2003ee0 <memcpy+0x98>
 2003ec4:	1007883a 	mov	r3,r2
 2003ec8:	28800017 	ldw	r2,0(r5)
 2003ecc:	31bfff04 	addi	r6,r6,-4
 2003ed0:	29400104 	addi	r5,r5,4
 2003ed4:	38800015 	stw	r2,0(r7)
 2003ed8:	39c00104 	addi	r7,r7,4
 2003edc:	19bffa36 	bltu	r3,r6,2003ec8 <memcpy+0x80>
 2003ee0:	3807883a 	mov	r3,r7
 2003ee4:	003fde06 	br	2003e60 <memcpy+0x18>

02003ee8 <putc>:
 2003ee8:	defffc04 	addi	sp,sp,-16
 2003eec:	dc800215 	stw	r18,8(sp)
 2003ef0:	04808074 	movhi	r18,513
 2003ef4:	94a17204 	addi	r18,r18,-31288
 2003ef8:	90c00017 	ldw	r3,0(r18)
 2003efc:	dc400115 	stw	r17,4(sp)
 2003f00:	dc000015 	stw	r16,0(sp)
 2003f04:	dfc00315 	stw	ra,12(sp)
 2003f08:	2023883a 	mov	r17,r4
 2003f0c:	2821883a 	mov	r16,r5
 2003f10:	18000226 	beq	r3,zero,2003f1c <putc+0x34>
 2003f14:	18800e17 	ldw	r2,56(r3)
 2003f18:	10001126 	beq	r2,zero,2003f60 <putc+0x78>
 2003f1c:	80800217 	ldw	r2,8(r16)
 2003f20:	10ffffc4 	addi	r3,r2,-1
 2003f24:	80c00215 	stw	r3,8(r16)
 2003f28:	18001316 	blt	r3,zero,2003f78 <putc+0x90>
 2003f2c:	80800017 	ldw	r2,0(r16)
 2003f30:	14400005 	stb	r17,0(r2)
 2003f34:	80c00017 	ldw	r3,0(r16)
 2003f38:	18800044 	addi	r2,r3,1
 2003f3c:	18c00003 	ldbu	r3,0(r3)
 2003f40:	80800015 	stw	r2,0(r16)
 2003f44:	1805883a 	mov	r2,r3
 2003f48:	dfc00317 	ldw	ra,12(sp)
 2003f4c:	dc800217 	ldw	r18,8(sp)
 2003f50:	dc400117 	ldw	r17,4(sp)
 2003f54:	dc000017 	ldw	r16,0(sp)
 2003f58:	dec00404 	addi	sp,sp,16
 2003f5c:	f800283a 	ret
 2003f60:	1809883a 	mov	r4,r3
 2003f64:	20049500 	call	2004950 <__sinit>
 2003f68:	80800217 	ldw	r2,8(r16)
 2003f6c:	10ffffc4 	addi	r3,r2,-1
 2003f70:	80c00215 	stw	r3,8(r16)
 2003f74:	183fed0e 	bge	r3,zero,2003f2c <putc+0x44>
 2003f78:	80800617 	ldw	r2,24(r16)
 2003f7c:	18800f16 	blt	r3,r2,2003fbc <putc+0xd4>
 2003f80:	80800017 	ldw	r2,0(r16)
 2003f84:	14400005 	stb	r17,0(r2)
 2003f88:	81000017 	ldw	r4,0(r16)
 2003f8c:	00800284 	movi	r2,10
 2003f90:	20c00003 	ldbu	r3,0(r4)
 2003f94:	18801226 	beq	r3,r2,2003fe0 <putc+0xf8>
 2003f98:	20800044 	addi	r2,r4,1
 2003f9c:	80800015 	stw	r2,0(r16)
 2003fa0:	1805883a 	mov	r2,r3
 2003fa4:	dfc00317 	ldw	ra,12(sp)
 2003fa8:	dc800217 	ldw	r18,8(sp)
 2003fac:	dc400117 	ldw	r17,4(sp)
 2003fb0:	dc000017 	ldw	r16,0(sp)
 2003fb4:	dec00404 	addi	sp,sp,16
 2003fb8:	f800283a 	ret
 2003fbc:	91000017 	ldw	r4,0(r18)
 2003fc0:	880b883a 	mov	r5,r17
 2003fc4:	800d883a 	mov	r6,r16
 2003fc8:	dfc00317 	ldw	ra,12(sp)
 2003fcc:	dc800217 	ldw	r18,8(sp)
 2003fd0:	dc400117 	ldw	r17,4(sp)
 2003fd4:	dc000017 	ldw	r16,0(sp)
 2003fd8:	dec00404 	addi	sp,sp,16
 2003fdc:	20041481 	jmpi	2004148 <__swbuf_r>
 2003fe0:	91000017 	ldw	r4,0(r18)
 2003fe4:	180b883a 	mov	r5,r3
 2003fe8:	003ff606 	br	2003fc4 <putc+0xdc>

02003fec <_putc_r>:
 2003fec:	defffc04 	addi	sp,sp,-16
 2003ff0:	dc400215 	stw	r17,8(sp)
 2003ff4:	dc000115 	stw	r16,4(sp)
 2003ff8:	dfc00315 	stw	ra,12(sp)
 2003ffc:	2021883a 	mov	r16,r4
 2004000:	2823883a 	mov	r17,r5
 2004004:	20000226 	beq	r4,zero,2004010 <_putc_r+0x24>
 2004008:	20800e17 	ldw	r2,56(r4)
 200400c:	10001026 	beq	r2,zero,2004050 <_putc_r+0x64>
 2004010:	30800217 	ldw	r2,8(r6)
 2004014:	10ffffc4 	addi	r3,r2,-1
 2004018:	30c00215 	stw	r3,8(r6)
 200401c:	18001316 	blt	r3,zero,200406c <_putc_r+0x80>
 2004020:	30800017 	ldw	r2,0(r6)
 2004024:	14400005 	stb	r17,0(r2)
 2004028:	30c00017 	ldw	r3,0(r6)
 200402c:	18800044 	addi	r2,r3,1
 2004030:	18c00003 	ldbu	r3,0(r3)
 2004034:	30800015 	stw	r2,0(r6)
 2004038:	1805883a 	mov	r2,r3
 200403c:	dfc00317 	ldw	ra,12(sp)
 2004040:	dc400217 	ldw	r17,8(sp)
 2004044:	dc000117 	ldw	r16,4(sp)
 2004048:	dec00404 	addi	sp,sp,16
 200404c:	f800283a 	ret
 2004050:	d9800015 	stw	r6,0(sp)
 2004054:	20049500 	call	2004950 <__sinit>
 2004058:	d9800017 	ldw	r6,0(sp)
 200405c:	30800217 	ldw	r2,8(r6)
 2004060:	10ffffc4 	addi	r3,r2,-1
 2004064:	30c00215 	stw	r3,8(r6)
 2004068:	183fed0e 	bge	r3,zero,2004020 <_putc_r+0x34>
 200406c:	30800617 	ldw	r2,24(r6)
 2004070:	18800e16 	blt	r3,r2,20040ac <_putc_r+0xc0>
 2004074:	30800017 	ldw	r2,0(r6)
 2004078:	14400005 	stb	r17,0(r2)
 200407c:	31000017 	ldw	r4,0(r6)
 2004080:	00800284 	movi	r2,10
 2004084:	20c00003 	ldbu	r3,0(r4)
 2004088:	18800f26 	beq	r3,r2,20040c8 <_putc_r+0xdc>
 200408c:	20800044 	addi	r2,r4,1
 2004090:	30800015 	stw	r2,0(r6)
 2004094:	1805883a 	mov	r2,r3
 2004098:	dfc00317 	ldw	ra,12(sp)
 200409c:	dc400217 	ldw	r17,8(sp)
 20040a0:	dc000117 	ldw	r16,4(sp)
 20040a4:	dec00404 	addi	sp,sp,16
 20040a8:	f800283a 	ret
 20040ac:	8009883a 	mov	r4,r16
 20040b0:	880b883a 	mov	r5,r17
 20040b4:	dfc00317 	ldw	ra,12(sp)
 20040b8:	dc400217 	ldw	r17,8(sp)
 20040bc:	dc000117 	ldw	r16,4(sp)
 20040c0:	dec00404 	addi	sp,sp,16
 20040c4:	20041481 	jmpi	2004148 <__swbuf_r>
 20040c8:	8009883a 	mov	r4,r16
 20040cc:	180b883a 	mov	r5,r3
 20040d0:	003ff806 	br	20040b4 <_putc_r+0xc8>

020040d4 <strlen>:
 20040d4:	208000cc 	andi	r2,r4,3
 20040d8:	2011883a 	mov	r8,r4
 20040dc:	1000161e 	bne	r2,zero,2004138 <strlen+0x64>
 20040e0:	20c00017 	ldw	r3,0(r4)
 20040e4:	017fbff4 	movhi	r5,65279
 20040e8:	297fbfc4 	addi	r5,r5,-257
 20040ec:	01e02074 	movhi	r7,32897
 20040f0:	39e02004 	addi	r7,r7,-32640
 20040f4:	1945883a 	add	r2,r3,r5
 20040f8:	11c4703a 	and	r2,r2,r7
 20040fc:	00c6303a 	nor	r3,zero,r3
 2004100:	1886703a 	and	r3,r3,r2
 2004104:	18000c1e 	bne	r3,zero,2004138 <strlen+0x64>
 2004108:	280d883a 	mov	r6,r5
 200410c:	380b883a 	mov	r5,r7
 2004110:	21000104 	addi	r4,r4,4
 2004114:	20800017 	ldw	r2,0(r4)
 2004118:	1187883a 	add	r3,r2,r6
 200411c:	1946703a 	and	r3,r3,r5
 2004120:	0084303a 	nor	r2,zero,r2
 2004124:	10c4703a 	and	r2,r2,r3
 2004128:	103ff926 	beq	r2,zero,2004110 <strlen+0x3c>
 200412c:	20800007 	ldb	r2,0(r4)
 2004130:	10000326 	beq	r2,zero,2004140 <strlen+0x6c>
 2004134:	21000044 	addi	r4,r4,1
 2004138:	20800007 	ldb	r2,0(r4)
 200413c:	103ffd1e 	bne	r2,zero,2004134 <strlen+0x60>
 2004140:	2205c83a 	sub	r2,r4,r8
 2004144:	f800283a 	ret

02004148 <__swbuf_r>:
 2004148:	defffc04 	addi	sp,sp,-16
 200414c:	dc400215 	stw	r17,8(sp)
 2004150:	dc000115 	stw	r16,4(sp)
 2004154:	dfc00315 	stw	ra,12(sp)
 2004158:	2023883a 	mov	r17,r4
 200415c:	2821883a 	mov	r16,r5
 2004160:	20000226 	beq	r4,zero,200416c <__swbuf_r+0x24>
 2004164:	20800e17 	ldw	r2,56(r4)
 2004168:	10002f26 	beq	r2,zero,2004228 <__swbuf_r+0xe0>
 200416c:	3080030b 	ldhu	r2,12(r6)
 2004170:	30c00617 	ldw	r3,24(r6)
 2004174:	1080020c 	andi	r2,r2,8
 2004178:	30c00215 	stw	r3,8(r6)
 200417c:	10002226 	beq	r2,zero,2004208 <__swbuf_r+0xc0>
 2004180:	30c00417 	ldw	r3,16(r6)
 2004184:	18002026 	beq	r3,zero,2004208 <__swbuf_r+0xc0>
 2004188:	31000017 	ldw	r4,0(r6)
 200418c:	30800517 	ldw	r2,20(r6)
 2004190:	20c7c83a 	sub	r3,r4,r3
 2004194:	18802f0e 	bge	r3,r2,2004254 <__swbuf_r+0x10c>
 2004198:	19400044 	addi	r5,r3,1
 200419c:	30800217 	ldw	r2,8(r6)
 20041a0:	84003fcc 	andi	r16,r16,255
 20041a4:	20c00044 	addi	r3,r4,1
 20041a8:	10bfffc4 	addi	r2,r2,-1
 20041ac:	30800215 	stw	r2,8(r6)
 20041b0:	24000005 	stb	r16,0(r4)
 20041b4:	30800517 	ldw	r2,20(r6)
 20041b8:	30c00015 	stw	r3,0(r6)
 20041bc:	11400c26 	beq	r2,r5,20041f0 <__swbuf_r+0xa8>
 20041c0:	3080030b 	ldhu	r2,12(r6)
 20041c4:	1080004c 	andi	r2,r2,1
 20041c8:	1005003a 	cmpeq	r2,r2,zero
 20041cc:	10000626 	beq	r2,zero,20041e8 <__swbuf_r+0xa0>
 20041d0:	8005883a 	mov	r2,r16
 20041d4:	dfc00317 	ldw	ra,12(sp)
 20041d8:	dc400217 	ldw	r17,8(sp)
 20041dc:	dc000117 	ldw	r16,4(sp)
 20041e0:	dec00404 	addi	sp,sp,16
 20041e4:	f800283a 	ret
 20041e8:	00800284 	movi	r2,10
 20041ec:	80bff81e 	bne	r16,r2,20041d0 <__swbuf_r+0x88>
 20041f0:	8809883a 	mov	r4,r17
 20041f4:	300b883a 	mov	r5,r6
 20041f8:	20046b80 	call	20046b8 <_fflush_r>
 20041fc:	103ff426 	beq	r2,zero,20041d0 <__swbuf_r+0x88>
 2004200:	043fffc4 	movi	r16,-1
 2004204:	003ff206 	br	20041d0 <__swbuf_r+0x88>
 2004208:	300b883a 	mov	r5,r6
 200420c:	8809883a 	mov	r4,r17
 2004210:	d9800015 	stw	r6,0(sp)
 2004214:	20042940 	call	2004294 <__swsetup_r>
 2004218:	d9800017 	ldw	r6,0(sp)
 200421c:	1000061e 	bne	r2,zero,2004238 <__swbuf_r+0xf0>
 2004220:	30c00417 	ldw	r3,16(r6)
 2004224:	003fd806 	br	2004188 <__swbuf_r+0x40>
 2004228:	d9800015 	stw	r6,0(sp)
 200422c:	20049500 	call	2004950 <__sinit>
 2004230:	d9800017 	ldw	r6,0(sp)
 2004234:	003fcd06 	br	200416c <__swbuf_r+0x24>
 2004238:	3080030b 	ldhu	r2,12(r6)
 200423c:	00c00244 	movi	r3,9
 2004240:	043fffc4 	movi	r16,-1
 2004244:	10801014 	ori	r2,r2,64
 2004248:	3080030d 	sth	r2,12(r6)
 200424c:	88c00015 	stw	r3,0(r17)
 2004250:	003fdf06 	br	20041d0 <__swbuf_r+0x88>
 2004254:	300b883a 	mov	r5,r6
 2004258:	8809883a 	mov	r4,r17
 200425c:	d9800015 	stw	r6,0(sp)
 2004260:	20046b80 	call	20046b8 <_fflush_r>
 2004264:	d9800017 	ldw	r6,0(sp)
 2004268:	103fe51e 	bne	r2,zero,2004200 <__swbuf_r+0xb8>
 200426c:	31000017 	ldw	r4,0(r6)
 2004270:	01400044 	movi	r5,1
 2004274:	003fc906 	br	200419c <__swbuf_r+0x54>

02004278 <__swbuf>:
 2004278:	01808074 	movhi	r6,513
 200427c:	31a17204 	addi	r6,r6,-31288
 2004280:	2007883a 	mov	r3,r4
 2004284:	31000017 	ldw	r4,0(r6)
 2004288:	280d883a 	mov	r6,r5
 200428c:	180b883a 	mov	r5,r3
 2004290:	20041481 	jmpi	2004148 <__swbuf_r>

02004294 <__swsetup_r>:
 2004294:	00808074 	movhi	r2,513
 2004298:	10a17204 	addi	r2,r2,-31288
 200429c:	10c00017 	ldw	r3,0(r2)
 20042a0:	defffd04 	addi	sp,sp,-12
 20042a4:	dc400115 	stw	r17,4(sp)
 20042a8:	dc000015 	stw	r16,0(sp)
 20042ac:	dfc00215 	stw	ra,8(sp)
 20042b0:	2023883a 	mov	r17,r4
 20042b4:	2821883a 	mov	r16,r5
 20042b8:	18000226 	beq	r3,zero,20042c4 <__swsetup_r+0x30>
 20042bc:	18800e17 	ldw	r2,56(r3)
 20042c0:	10001f26 	beq	r2,zero,2004340 <__swsetup_r+0xac>
 20042c4:	8100030b 	ldhu	r4,12(r16)
 20042c8:	2080020c 	andi	r2,r4,8
 20042cc:	10002826 	beq	r2,zero,2004370 <__swsetup_r+0xdc>
 20042d0:	81400417 	ldw	r5,16(r16)
 20042d4:	28001d26 	beq	r5,zero,200434c <__swsetup_r+0xb8>
 20042d8:	2080004c 	andi	r2,r4,1
 20042dc:	1005003a 	cmpeq	r2,r2,zero
 20042e0:	10000b26 	beq	r2,zero,2004310 <__swsetup_r+0x7c>
 20042e4:	2080008c 	andi	r2,r4,2
 20042e8:	10001226 	beq	r2,zero,2004334 <__swsetup_r+0xa0>
 20042ec:	0005883a 	mov	r2,zero
 20042f0:	80800215 	stw	r2,8(r16)
 20042f4:	28000b26 	beq	r5,zero,2004324 <__swsetup_r+0x90>
 20042f8:	0005883a 	mov	r2,zero
 20042fc:	dfc00217 	ldw	ra,8(sp)
 2004300:	dc400117 	ldw	r17,4(sp)
 2004304:	dc000017 	ldw	r16,0(sp)
 2004308:	dec00304 	addi	sp,sp,12
 200430c:	f800283a 	ret
 2004310:	80800517 	ldw	r2,20(r16)
 2004314:	80000215 	stw	zero,8(r16)
 2004318:	0085c83a 	sub	r2,zero,r2
 200431c:	80800615 	stw	r2,24(r16)
 2004320:	283ff51e 	bne	r5,zero,20042f8 <__swsetup_r+0x64>
 2004324:	2080200c 	andi	r2,r4,128
 2004328:	103ff326 	beq	r2,zero,20042f8 <__swsetup_r+0x64>
 200432c:	00bfffc4 	movi	r2,-1
 2004330:	003ff206 	br	20042fc <__swsetup_r+0x68>
 2004334:	80800517 	ldw	r2,20(r16)
 2004338:	80800215 	stw	r2,8(r16)
 200433c:	003fed06 	br	20042f4 <__swsetup_r+0x60>
 2004340:	1809883a 	mov	r4,r3
 2004344:	20049500 	call	2004950 <__sinit>
 2004348:	003fde06 	br	20042c4 <__swsetup_r+0x30>
 200434c:	20c0a00c 	andi	r3,r4,640
 2004350:	00808004 	movi	r2,512
 2004354:	18bfe026 	beq	r3,r2,20042d8 <__swsetup_r+0x44>
 2004358:	8809883a 	mov	r4,r17
 200435c:	800b883a 	mov	r5,r16
 2004360:	20051680 	call	2005168 <__smakebuf_r>
 2004364:	8100030b 	ldhu	r4,12(r16)
 2004368:	81400417 	ldw	r5,16(r16)
 200436c:	003fda06 	br	20042d8 <__swsetup_r+0x44>
 2004370:	2080040c 	andi	r2,r4,16
 2004374:	103fed26 	beq	r2,zero,200432c <__swsetup_r+0x98>
 2004378:	2080010c 	andi	r2,r4,4
 200437c:	10001226 	beq	r2,zero,20043c8 <__swsetup_r+0x134>
 2004380:	81400c17 	ldw	r5,48(r16)
 2004384:	28000526 	beq	r5,zero,200439c <__swsetup_r+0x108>
 2004388:	80801004 	addi	r2,r16,64
 200438c:	28800226 	beq	r5,r2,2004398 <__swsetup_r+0x104>
 2004390:	8809883a 	mov	r4,r17
 2004394:	2004cd40 	call	2004cd4 <_free_r>
 2004398:	80000c15 	stw	zero,48(r16)
 200439c:	8080030b 	ldhu	r2,12(r16)
 20043a0:	81400417 	ldw	r5,16(r16)
 20043a4:	80000115 	stw	zero,4(r16)
 20043a8:	10bff6cc 	andi	r2,r2,65499
 20043ac:	8080030d 	sth	r2,12(r16)
 20043b0:	81400015 	stw	r5,0(r16)
 20043b4:	8080030b 	ldhu	r2,12(r16)
 20043b8:	10800214 	ori	r2,r2,8
 20043bc:	113fffcc 	andi	r4,r2,65535
 20043c0:	8080030d 	sth	r2,12(r16)
 20043c4:	003fc306 	br	20042d4 <__swsetup_r+0x40>
 20043c8:	81400417 	ldw	r5,16(r16)
 20043cc:	003ff906 	br	20043b4 <__swsetup_r+0x120>

020043d0 <__register_exitproc>:
 20043d0:	defffa04 	addi	sp,sp,-24
 20043d4:	00808074 	movhi	r2,513
 20043d8:	10a17304 	addi	r2,r2,-31284
 20043dc:	dc000015 	stw	r16,0(sp)
 20043e0:	14000017 	ldw	r16,0(r2)
 20043e4:	dd000415 	stw	r20,16(sp)
 20043e8:	2829883a 	mov	r20,r5
 20043ec:	81405217 	ldw	r5,328(r16)
 20043f0:	dcc00315 	stw	r19,12(sp)
 20043f4:	dc800215 	stw	r18,8(sp)
 20043f8:	dc400115 	stw	r17,4(sp)
 20043fc:	dfc00515 	stw	ra,20(sp)
 2004400:	2023883a 	mov	r17,r4
 2004404:	3027883a 	mov	r19,r6
 2004408:	3825883a 	mov	r18,r7
 200440c:	28002526 	beq	r5,zero,20044a4 <__register_exitproc+0xd4>
 2004410:	29000117 	ldw	r4,4(r5)
 2004414:	008007c4 	movi	r2,31
 2004418:	11002716 	blt	r2,r4,20044b8 <__register_exitproc+0xe8>
 200441c:	8800101e 	bne	r17,zero,2004460 <__register_exitproc+0x90>
 2004420:	2105883a 	add	r2,r4,r4
 2004424:	1085883a 	add	r2,r2,r2
 2004428:	20c00044 	addi	r3,r4,1
 200442c:	1145883a 	add	r2,r2,r5
 2004430:	0009883a 	mov	r4,zero
 2004434:	15000215 	stw	r20,8(r2)
 2004438:	28c00115 	stw	r3,4(r5)
 200443c:	2005883a 	mov	r2,r4
 2004440:	dfc00517 	ldw	ra,20(sp)
 2004444:	dd000417 	ldw	r20,16(sp)
 2004448:	dcc00317 	ldw	r19,12(sp)
 200444c:	dc800217 	ldw	r18,8(sp)
 2004450:	dc400117 	ldw	r17,4(sp)
 2004454:	dc000017 	ldw	r16,0(sp)
 2004458:	dec00604 	addi	sp,sp,24
 200445c:	f800283a 	ret
 2004460:	29802204 	addi	r6,r5,136
 2004464:	00800044 	movi	r2,1
 2004468:	110e983a 	sll	r7,r2,r4
 200446c:	30c04017 	ldw	r3,256(r6)
 2004470:	2105883a 	add	r2,r4,r4
 2004474:	1085883a 	add	r2,r2,r2
 2004478:	1185883a 	add	r2,r2,r6
 200447c:	19c6b03a 	or	r3,r3,r7
 2004480:	14802015 	stw	r18,128(r2)
 2004484:	14c00015 	stw	r19,0(r2)
 2004488:	00800084 	movi	r2,2
 200448c:	30c04015 	stw	r3,256(r6)
 2004490:	88bfe31e 	bne	r17,r2,2004420 <__register_exitproc+0x50>
 2004494:	30804117 	ldw	r2,260(r6)
 2004498:	11c4b03a 	or	r2,r2,r7
 200449c:	30804115 	stw	r2,260(r6)
 20044a0:	003fdf06 	br	2004420 <__register_exitproc+0x50>
 20044a4:	00808074 	movhi	r2,513
 20044a8:	10a1a104 	addi	r2,r2,-31100
 20044ac:	100b883a 	mov	r5,r2
 20044b0:	80805215 	stw	r2,328(r16)
 20044b4:	003fd606 	br	2004410 <__register_exitproc+0x40>
 20044b8:	00800034 	movhi	r2,0
 20044bc:	10800004 	addi	r2,r2,0
 20044c0:	1000021e 	bne	r2,zero,20044cc <__register_exitproc+0xfc>
 20044c4:	013fffc4 	movi	r4,-1
 20044c8:	003fdc06 	br	200443c <__register_exitproc+0x6c>
 20044cc:	01006404 	movi	r4,400
 20044d0:	103ee83a 	callr	r2
 20044d4:	1007883a 	mov	r3,r2
 20044d8:	103ffa26 	beq	r2,zero,20044c4 <__register_exitproc+0xf4>
 20044dc:	80805217 	ldw	r2,328(r16)
 20044e0:	180b883a 	mov	r5,r3
 20044e4:	18000115 	stw	zero,4(r3)
 20044e8:	18800015 	stw	r2,0(r3)
 20044ec:	80c05215 	stw	r3,328(r16)
 20044f0:	18006215 	stw	zero,392(r3)
 20044f4:	18006315 	stw	zero,396(r3)
 20044f8:	0009883a 	mov	r4,zero
 20044fc:	883fc826 	beq	r17,zero,2004420 <__register_exitproc+0x50>
 2004500:	003fd706 	br	2004460 <__register_exitproc+0x90>

02004504 <register_fini>:
 2004504:	f800283a 	ret

02004508 <__call_exitprocs>:
 2004508:	00808074 	movhi	r2,513
 200450c:	10a17304 	addi	r2,r2,-31284
 2004510:	10800017 	ldw	r2,0(r2)
 2004514:	defff304 	addi	sp,sp,-52
 2004518:	df000b15 	stw	fp,44(sp)
 200451c:	d8800115 	stw	r2,4(sp)
 2004520:	00800034 	movhi	r2,0
 2004524:	10800004 	addi	r2,r2,0
 2004528:	1005003a 	cmpeq	r2,r2,zero
 200452c:	d8800215 	stw	r2,8(sp)
 2004530:	d8800117 	ldw	r2,4(sp)
 2004534:	dd400815 	stw	r21,32(sp)
 2004538:	dd000715 	stw	r20,28(sp)
 200453c:	10805204 	addi	r2,r2,328
 2004540:	dfc00c15 	stw	ra,48(sp)
 2004544:	ddc00a15 	stw	r23,40(sp)
 2004548:	dd800915 	stw	r22,36(sp)
 200454c:	dcc00615 	stw	r19,24(sp)
 2004550:	dc800515 	stw	r18,20(sp)
 2004554:	dc400415 	stw	r17,16(sp)
 2004558:	dc000315 	stw	r16,12(sp)
 200455c:	282b883a 	mov	r21,r5
 2004560:	2039883a 	mov	fp,r4
 2004564:	d8800015 	stw	r2,0(sp)
 2004568:	2829003a 	cmpeq	r20,r5,zero
 200456c:	d8800117 	ldw	r2,4(sp)
 2004570:	14405217 	ldw	r17,328(r2)
 2004574:	88001026 	beq	r17,zero,20045b8 <__call_exitprocs+0xb0>
 2004578:	ddc00017 	ldw	r23,0(sp)
 200457c:	88800117 	ldw	r2,4(r17)
 2004580:	8c802204 	addi	r18,r17,136
 2004584:	143fffc4 	addi	r16,r2,-1
 2004588:	80000916 	blt	r16,zero,20045b0 <__call_exitprocs+0xa8>
 200458c:	05bfffc4 	movi	r22,-1
 2004590:	a000151e 	bne	r20,zero,20045e8 <__call_exitprocs+0xe0>
 2004594:	8409883a 	add	r4,r16,r16
 2004598:	2105883a 	add	r2,r4,r4
 200459c:	1485883a 	add	r2,r2,r18
 20045a0:	10c02017 	ldw	r3,128(r2)
 20045a4:	a8c01126 	beq	r21,r3,20045ec <__call_exitprocs+0xe4>
 20045a8:	843fffc4 	addi	r16,r16,-1
 20045ac:	85bff81e 	bne	r16,r22,2004590 <__call_exitprocs+0x88>
 20045b0:	d8800217 	ldw	r2,8(sp)
 20045b4:	10003126 	beq	r2,zero,200467c <__call_exitprocs+0x174>
 20045b8:	dfc00c17 	ldw	ra,48(sp)
 20045bc:	df000b17 	ldw	fp,44(sp)
 20045c0:	ddc00a17 	ldw	r23,40(sp)
 20045c4:	dd800917 	ldw	r22,36(sp)
 20045c8:	dd400817 	ldw	r21,32(sp)
 20045cc:	dd000717 	ldw	r20,28(sp)
 20045d0:	dcc00617 	ldw	r19,24(sp)
 20045d4:	dc800517 	ldw	r18,20(sp)
 20045d8:	dc400417 	ldw	r17,16(sp)
 20045dc:	dc000317 	ldw	r16,12(sp)
 20045e0:	dec00d04 	addi	sp,sp,52
 20045e4:	f800283a 	ret
 20045e8:	8409883a 	add	r4,r16,r16
 20045ec:	88c00117 	ldw	r3,4(r17)
 20045f0:	2105883a 	add	r2,r4,r4
 20045f4:	1445883a 	add	r2,r2,r17
 20045f8:	18ffffc4 	addi	r3,r3,-1
 20045fc:	11800217 	ldw	r6,8(r2)
 2004600:	1c001526 	beq	r3,r16,2004658 <__call_exitprocs+0x150>
 2004604:	10000215 	stw	zero,8(r2)
 2004608:	303fe726 	beq	r6,zero,20045a8 <__call_exitprocs+0xa0>
 200460c:	00c00044 	movi	r3,1
 2004610:	1c06983a 	sll	r3,r3,r16
 2004614:	90804017 	ldw	r2,256(r18)
 2004618:	8cc00117 	ldw	r19,4(r17)
 200461c:	1884703a 	and	r2,r3,r2
 2004620:	10001426 	beq	r2,zero,2004674 <__call_exitprocs+0x16c>
 2004624:	90804117 	ldw	r2,260(r18)
 2004628:	1884703a 	and	r2,r3,r2
 200462c:	10000c1e 	bne	r2,zero,2004660 <__call_exitprocs+0x158>
 2004630:	2105883a 	add	r2,r4,r4
 2004634:	1485883a 	add	r2,r2,r18
 2004638:	11400017 	ldw	r5,0(r2)
 200463c:	e009883a 	mov	r4,fp
 2004640:	303ee83a 	callr	r6
 2004644:	88800117 	ldw	r2,4(r17)
 2004648:	98bfc81e 	bne	r19,r2,200456c <__call_exitprocs+0x64>
 200464c:	b8800017 	ldw	r2,0(r23)
 2004650:	147fd526 	beq	r2,r17,20045a8 <__call_exitprocs+0xa0>
 2004654:	003fc506 	br	200456c <__call_exitprocs+0x64>
 2004658:	8c000115 	stw	r16,4(r17)
 200465c:	003fea06 	br	2004608 <__call_exitprocs+0x100>
 2004660:	2105883a 	add	r2,r4,r4
 2004664:	1485883a 	add	r2,r2,r18
 2004668:	11000017 	ldw	r4,0(r2)
 200466c:	303ee83a 	callr	r6
 2004670:	003ff406 	br	2004644 <__call_exitprocs+0x13c>
 2004674:	303ee83a 	callr	r6
 2004678:	003ff206 	br	2004644 <__call_exitprocs+0x13c>
 200467c:	88800117 	ldw	r2,4(r17)
 2004680:	1000081e 	bne	r2,zero,20046a4 <__call_exitprocs+0x19c>
 2004684:	89000017 	ldw	r4,0(r17)
 2004688:	20000726 	beq	r4,zero,20046a8 <__call_exitprocs+0x1a0>
 200468c:	b9000015 	stw	r4,0(r23)
 2004690:	8809883a 	mov	r4,r17
 2004694:	00000000 	call	0 <_start-0x2000000>
 2004698:	bc400017 	ldw	r17,0(r23)
 200469c:	883fb71e 	bne	r17,zero,200457c <__call_exitprocs+0x74>
 20046a0:	003fc506 	br	20045b8 <__call_exitprocs+0xb0>
 20046a4:	89000017 	ldw	r4,0(r17)
 20046a8:	882f883a 	mov	r23,r17
 20046ac:	2023883a 	mov	r17,r4
 20046b0:	883fb21e 	bne	r17,zero,200457c <__call_exitprocs+0x74>
 20046b4:	003fc006 	br	20045b8 <__call_exitprocs+0xb0>

020046b8 <_fflush_r>:
 20046b8:	defffb04 	addi	sp,sp,-20
 20046bc:	dcc00315 	stw	r19,12(sp)
 20046c0:	dc800215 	stw	r18,8(sp)
 20046c4:	dfc00415 	stw	ra,16(sp)
 20046c8:	dc400115 	stw	r17,4(sp)
 20046cc:	dc000015 	stw	r16,0(sp)
 20046d0:	2027883a 	mov	r19,r4
 20046d4:	2825883a 	mov	r18,r5
 20046d8:	20000226 	beq	r4,zero,20046e4 <_fflush_r+0x2c>
 20046dc:	20800e17 	ldw	r2,56(r4)
 20046e0:	10005626 	beq	r2,zero,200483c <_fflush_r+0x184>
 20046e4:	9100030b 	ldhu	r4,12(r18)
 20046e8:	20ffffcc 	andi	r3,r4,65535
 20046ec:	18e0001c 	xori	r3,r3,32768
 20046f0:	18e00004 	addi	r3,r3,-32768
 20046f4:	1880020c 	andi	r2,r3,8
 20046f8:	1000261e 	bne	r2,zero,2004794 <_fflush_r+0xdc>
 20046fc:	90c00117 	ldw	r3,4(r18)
 2004700:	20820014 	ori	r2,r4,2048
 2004704:	9080030d 	sth	r2,12(r18)
 2004708:	1009883a 	mov	r4,r2
 200470c:	00c0400e 	bge	zero,r3,2004810 <_fflush_r+0x158>
 2004710:	92000a17 	ldw	r8,40(r18)
 2004714:	40004026 	beq	r8,zero,2004818 <_fflush_r+0x160>
 2004718:	2084000c 	andi	r2,r4,4096
 200471c:	10005326 	beq	r2,zero,200486c <_fflush_r+0x1b4>
 2004720:	94001417 	ldw	r16,80(r18)
 2004724:	9080030b 	ldhu	r2,12(r18)
 2004728:	1080010c 	andi	r2,r2,4
 200472c:	1000481e 	bne	r2,zero,2004850 <_fflush_r+0x198>
 2004730:	91400717 	ldw	r5,28(r18)
 2004734:	9809883a 	mov	r4,r19
 2004738:	800d883a 	mov	r6,r16
 200473c:	000f883a 	mov	r7,zero
 2004740:	403ee83a 	callr	r8
 2004744:	8080261e 	bne	r16,r2,20047e0 <_fflush_r+0x128>
 2004748:	9080030b 	ldhu	r2,12(r18)
 200474c:	91000417 	ldw	r4,16(r18)
 2004750:	90000115 	stw	zero,4(r18)
 2004754:	10bdffcc 	andi	r2,r2,63487
 2004758:	10ffffcc 	andi	r3,r2,65535
 200475c:	18c4000c 	andi	r3,r3,4096
 2004760:	9080030d 	sth	r2,12(r18)
 2004764:	91000015 	stw	r4,0(r18)
 2004768:	18002b26 	beq	r3,zero,2004818 <_fflush_r+0x160>
 200476c:	0007883a 	mov	r3,zero
 2004770:	1805883a 	mov	r2,r3
 2004774:	94001415 	stw	r16,80(r18)
 2004778:	dfc00417 	ldw	ra,16(sp)
 200477c:	dcc00317 	ldw	r19,12(sp)
 2004780:	dc800217 	ldw	r18,8(sp)
 2004784:	dc400117 	ldw	r17,4(sp)
 2004788:	dc000017 	ldw	r16,0(sp)
 200478c:	dec00504 	addi	sp,sp,20
 2004790:	f800283a 	ret
 2004794:	94400417 	ldw	r17,16(r18)
 2004798:	88001f26 	beq	r17,zero,2004818 <_fflush_r+0x160>
 200479c:	90800017 	ldw	r2,0(r18)
 20047a0:	18c000cc 	andi	r3,r3,3
 20047a4:	94400015 	stw	r17,0(r18)
 20047a8:	1461c83a 	sub	r16,r2,r17
 20047ac:	18002526 	beq	r3,zero,2004844 <_fflush_r+0x18c>
 20047b0:	0005883a 	mov	r2,zero
 20047b4:	90800215 	stw	r2,8(r18)
 20047b8:	0400170e 	bge	zero,r16,2004818 <_fflush_r+0x160>
 20047bc:	90c00917 	ldw	r3,36(r18)
 20047c0:	91400717 	ldw	r5,28(r18)
 20047c4:	880d883a 	mov	r6,r17
 20047c8:	800f883a 	mov	r7,r16
 20047cc:	9809883a 	mov	r4,r19
 20047d0:	183ee83a 	callr	r3
 20047d4:	88a3883a 	add	r17,r17,r2
 20047d8:	80a1c83a 	sub	r16,r16,r2
 20047dc:	00bff616 	blt	zero,r2,20047b8 <_fflush_r+0x100>
 20047e0:	9080030b 	ldhu	r2,12(r18)
 20047e4:	00ffffc4 	movi	r3,-1
 20047e8:	10801014 	ori	r2,r2,64
 20047ec:	9080030d 	sth	r2,12(r18)
 20047f0:	1805883a 	mov	r2,r3
 20047f4:	dfc00417 	ldw	ra,16(sp)
 20047f8:	dcc00317 	ldw	r19,12(sp)
 20047fc:	dc800217 	ldw	r18,8(sp)
 2004800:	dc400117 	ldw	r17,4(sp)
 2004804:	dc000017 	ldw	r16,0(sp)
 2004808:	dec00504 	addi	sp,sp,20
 200480c:	f800283a 	ret
 2004810:	90800f17 	ldw	r2,60(r18)
 2004814:	00bfbe16 	blt	zero,r2,2004710 <_fflush_r+0x58>
 2004818:	0007883a 	mov	r3,zero
 200481c:	1805883a 	mov	r2,r3
 2004820:	dfc00417 	ldw	ra,16(sp)
 2004824:	dcc00317 	ldw	r19,12(sp)
 2004828:	dc800217 	ldw	r18,8(sp)
 200482c:	dc400117 	ldw	r17,4(sp)
 2004830:	dc000017 	ldw	r16,0(sp)
 2004834:	dec00504 	addi	sp,sp,20
 2004838:	f800283a 	ret
 200483c:	20049500 	call	2004950 <__sinit>
 2004840:	003fa806 	br	20046e4 <_fflush_r+0x2c>
 2004844:	90800517 	ldw	r2,20(r18)
 2004848:	90800215 	stw	r2,8(r18)
 200484c:	003fda06 	br	20047b8 <_fflush_r+0x100>
 2004850:	90800117 	ldw	r2,4(r18)
 2004854:	90c00c17 	ldw	r3,48(r18)
 2004858:	80a1c83a 	sub	r16,r16,r2
 200485c:	183fb426 	beq	r3,zero,2004730 <_fflush_r+0x78>
 2004860:	90800f17 	ldw	r2,60(r18)
 2004864:	80a1c83a 	sub	r16,r16,r2
 2004868:	003fb106 	br	2004730 <_fflush_r+0x78>
 200486c:	91400717 	ldw	r5,28(r18)
 2004870:	9809883a 	mov	r4,r19
 2004874:	000d883a 	mov	r6,zero
 2004878:	01c00044 	movi	r7,1
 200487c:	403ee83a 	callr	r8
 2004880:	1021883a 	mov	r16,r2
 2004884:	00bfffc4 	movi	r2,-1
 2004888:	80800226 	beq	r16,r2,2004894 <_fflush_r+0x1dc>
 200488c:	92000a17 	ldw	r8,40(r18)
 2004890:	003fa406 	br	2004724 <_fflush_r+0x6c>
 2004894:	98c00017 	ldw	r3,0(r19)
 2004898:	00800744 	movi	r2,29
 200489c:	18bfde26 	beq	r3,r2,2004818 <_fflush_r+0x160>
 20048a0:	9080030b 	ldhu	r2,12(r18)
 20048a4:	8007883a 	mov	r3,r16
 20048a8:	10801014 	ori	r2,r2,64
 20048ac:	9080030d 	sth	r2,12(r18)
 20048b0:	003fcf06 	br	20047f0 <_fflush_r+0x138>

020048b4 <fflush>:
 20048b4:	01408034 	movhi	r5,512
 20048b8:	2951ae04 	addi	r5,r5,18104
 20048bc:	2007883a 	mov	r3,r4
 20048c0:	20000526 	beq	r4,zero,20048d8 <fflush+0x24>
 20048c4:	00808074 	movhi	r2,513
 20048c8:	10a17204 	addi	r2,r2,-31288
 20048cc:	11000017 	ldw	r4,0(r2)
 20048d0:	180b883a 	mov	r5,r3
 20048d4:	20046b81 	jmpi	20046b8 <_fflush_r>
 20048d8:	00808074 	movhi	r2,513
 20048dc:	10a17304 	addi	r2,r2,-31284
 20048e0:	11000017 	ldw	r4,0(r2)
 20048e4:	2004fe81 	jmpi	2004fe8 <_fwalk_reent>

020048e8 <std>:
 20048e8:	00808034 	movhi	r2,512
 20048ec:	1096d104 	addi	r2,r2,23364
 20048f0:	20800b15 	stw	r2,44(r4)
 20048f4:	00808034 	movhi	r2,512
 20048f8:	10970c04 	addi	r2,r2,23600
 20048fc:	20800815 	stw	r2,32(r4)
 2004900:	00c08034 	movhi	r3,512
 2004904:	18d6ed04 	addi	r3,r3,23476
 2004908:	00808034 	movhi	r2,512
 200490c:	1096d304 	addi	r2,r2,23372
 2004910:	2140030d 	sth	r5,12(r4)
 2004914:	2180038d 	sth	r6,14(r4)
 2004918:	20c00915 	stw	r3,36(r4)
 200491c:	20800a15 	stw	r2,40(r4)
 2004920:	20000015 	stw	zero,0(r4)
 2004924:	20000115 	stw	zero,4(r4)
 2004928:	20000215 	stw	zero,8(r4)
 200492c:	20000415 	stw	zero,16(r4)
 2004930:	20000515 	stw	zero,20(r4)
 2004934:	20000615 	stw	zero,24(r4)
 2004938:	21000715 	stw	r4,28(r4)
 200493c:	f800283a 	ret

02004940 <__sfp_lock_acquire>:
 2004940:	f800283a 	ret

02004944 <__sfp_lock_release>:
 2004944:	f800283a 	ret

02004948 <__sinit_lock_acquire>:
 2004948:	f800283a 	ret

0200494c <__sinit_lock_release>:
 200494c:	f800283a 	ret

02004950 <__sinit>:
 2004950:	20800e17 	ldw	r2,56(r4)
 2004954:	defffd04 	addi	sp,sp,-12
 2004958:	dc400115 	stw	r17,4(sp)
 200495c:	dc000015 	stw	r16,0(sp)
 2004960:	dfc00215 	stw	ra,8(sp)
 2004964:	04400044 	movi	r17,1
 2004968:	01400104 	movi	r5,4
 200496c:	000d883a 	mov	r6,zero
 2004970:	2021883a 	mov	r16,r4
 2004974:	2200bb04 	addi	r8,r4,748
 2004978:	200f883a 	mov	r7,r4
 200497c:	10000526 	beq	r2,zero,2004994 <__sinit+0x44>
 2004980:	dfc00217 	ldw	ra,8(sp)
 2004984:	dc400117 	ldw	r17,4(sp)
 2004988:	dc000017 	ldw	r16,0(sp)
 200498c:	dec00304 	addi	sp,sp,12
 2004990:	f800283a 	ret
 2004994:	21000117 	ldw	r4,4(r4)
 2004998:	00808034 	movhi	r2,512
 200499c:	10928d04 	addi	r2,r2,18996
 20049a0:	00c000c4 	movi	r3,3
 20049a4:	80800f15 	stw	r2,60(r16)
 20049a8:	80c0b915 	stw	r3,740(r16)
 20049ac:	8200ba15 	stw	r8,744(r16)
 20049b0:	84400e15 	stw	r17,56(r16)
 20049b4:	8000b815 	stw	zero,736(r16)
 20049b8:	20048e80 	call	20048e8 <std>
 20049bc:	81000217 	ldw	r4,8(r16)
 20049c0:	880d883a 	mov	r6,r17
 20049c4:	800f883a 	mov	r7,r16
 20049c8:	01400284 	movi	r5,10
 20049cc:	20048e80 	call	20048e8 <std>
 20049d0:	81000317 	ldw	r4,12(r16)
 20049d4:	800f883a 	mov	r7,r16
 20049d8:	01400484 	movi	r5,18
 20049dc:	01800084 	movi	r6,2
 20049e0:	dfc00217 	ldw	ra,8(sp)
 20049e4:	dc400117 	ldw	r17,4(sp)
 20049e8:	dc000017 	ldw	r16,0(sp)
 20049ec:	dec00304 	addi	sp,sp,12
 20049f0:	20048e81 	jmpi	20048e8 <std>

020049f4 <__fp_lock>:
 20049f4:	0005883a 	mov	r2,zero
 20049f8:	f800283a 	ret

020049fc <__fp_unlock>:
 20049fc:	0005883a 	mov	r2,zero
 2004a00:	f800283a 	ret

02004a04 <__fp_unlock_all>:
 2004a04:	00808074 	movhi	r2,513
 2004a08:	10a17204 	addi	r2,r2,-31288
 2004a0c:	11000017 	ldw	r4,0(r2)
 2004a10:	01408034 	movhi	r5,512
 2004a14:	29527f04 	addi	r5,r5,18940
 2004a18:	20050b01 	jmpi	20050b0 <_fwalk>

02004a1c <__fp_lock_all>:
 2004a1c:	00808074 	movhi	r2,513
 2004a20:	10a17204 	addi	r2,r2,-31288
 2004a24:	11000017 	ldw	r4,0(r2)
 2004a28:	01408034 	movhi	r5,512
 2004a2c:	29527d04 	addi	r5,r5,18932
 2004a30:	20050b01 	jmpi	20050b0 <_fwalk>

02004a34 <_cleanup_r>:
 2004a34:	01408034 	movhi	r5,512
 2004a38:	2957a204 	addi	r5,r5,24200
 2004a3c:	20050b01 	jmpi	20050b0 <_fwalk>

02004a40 <_cleanup>:
 2004a40:	00808074 	movhi	r2,513
 2004a44:	10a17304 	addi	r2,r2,-31284
 2004a48:	11000017 	ldw	r4,0(r2)
 2004a4c:	2004a341 	jmpi	2004a34 <_cleanup_r>

02004a50 <__sfmoreglue>:
 2004a50:	defffc04 	addi	sp,sp,-16
 2004a54:	dc400115 	stw	r17,4(sp)
 2004a58:	2c401724 	muli	r17,r5,92
 2004a5c:	dc800215 	stw	r18,8(sp)
 2004a60:	2825883a 	mov	r18,r5
 2004a64:	89400304 	addi	r5,r17,12
 2004a68:	dc000015 	stw	r16,0(sp)
 2004a6c:	dfc00315 	stw	ra,12(sp)
 2004a70:	20052fc0 	call	20052fc <_malloc_r>
 2004a74:	0021883a 	mov	r16,zero
 2004a78:	880d883a 	mov	r6,r17
 2004a7c:	000b883a 	mov	r5,zero
 2004a80:	10000626 	beq	r2,zero,2004a9c <__sfmoreglue+0x4c>
 2004a84:	11000304 	addi	r4,r2,12
 2004a88:	14800115 	stw	r18,4(r2)
 2004a8c:	10000015 	stw	zero,0(r2)
 2004a90:	11000215 	stw	r4,8(r2)
 2004a94:	1021883a 	mov	r16,r2
 2004a98:	2005a3c0 	call	2005a3c <memset>
 2004a9c:	8005883a 	mov	r2,r16
 2004aa0:	dfc00317 	ldw	ra,12(sp)
 2004aa4:	dc800217 	ldw	r18,8(sp)
 2004aa8:	dc400117 	ldw	r17,4(sp)
 2004aac:	dc000017 	ldw	r16,0(sp)
 2004ab0:	dec00404 	addi	sp,sp,16
 2004ab4:	f800283a 	ret

02004ab8 <__sfp>:
 2004ab8:	defffd04 	addi	sp,sp,-12
 2004abc:	00808074 	movhi	r2,513
 2004ac0:	10a17304 	addi	r2,r2,-31284
 2004ac4:	dc000015 	stw	r16,0(sp)
 2004ac8:	14000017 	ldw	r16,0(r2)
 2004acc:	dc400115 	stw	r17,4(sp)
 2004ad0:	dfc00215 	stw	ra,8(sp)
 2004ad4:	80800e17 	ldw	r2,56(r16)
 2004ad8:	2023883a 	mov	r17,r4
 2004adc:	10002626 	beq	r2,zero,2004b78 <__sfp+0xc0>
 2004ae0:	8400b804 	addi	r16,r16,736
 2004ae4:	80800117 	ldw	r2,4(r16)
 2004ae8:	81000217 	ldw	r4,8(r16)
 2004aec:	10ffffc4 	addi	r3,r2,-1
 2004af0:	18000916 	blt	r3,zero,2004b18 <__sfp+0x60>
 2004af4:	2080030f 	ldh	r2,12(r4)
 2004af8:	10000b26 	beq	r2,zero,2004b28 <__sfp+0x70>
 2004afc:	017fffc4 	movi	r5,-1
 2004b00:	00000206 	br	2004b0c <__sfp+0x54>
 2004b04:	2080030f 	ldh	r2,12(r4)
 2004b08:	10000726 	beq	r2,zero,2004b28 <__sfp+0x70>
 2004b0c:	18ffffc4 	addi	r3,r3,-1
 2004b10:	21001704 	addi	r4,r4,92
 2004b14:	197ffb1e 	bne	r3,r5,2004b04 <__sfp+0x4c>
 2004b18:	80800017 	ldw	r2,0(r16)
 2004b1c:	10001926 	beq	r2,zero,2004b84 <__sfp+0xcc>
 2004b20:	1021883a 	mov	r16,r2
 2004b24:	003fef06 	br	2004ae4 <__sfp+0x2c>
 2004b28:	00bfffc4 	movi	r2,-1
 2004b2c:	00c00044 	movi	r3,1
 2004b30:	2080038d 	sth	r2,14(r4)
 2004b34:	20c0030d 	sth	r3,12(r4)
 2004b38:	20000015 	stw	zero,0(r4)
 2004b3c:	20000215 	stw	zero,8(r4)
 2004b40:	20000115 	stw	zero,4(r4)
 2004b44:	20000415 	stw	zero,16(r4)
 2004b48:	20000515 	stw	zero,20(r4)
 2004b4c:	20000615 	stw	zero,24(r4)
 2004b50:	20000c15 	stw	zero,48(r4)
 2004b54:	20000d15 	stw	zero,52(r4)
 2004b58:	20001115 	stw	zero,68(r4)
 2004b5c:	20001215 	stw	zero,72(r4)
 2004b60:	2005883a 	mov	r2,r4
 2004b64:	dfc00217 	ldw	ra,8(sp)
 2004b68:	dc400117 	ldw	r17,4(sp)
 2004b6c:	dc000017 	ldw	r16,0(sp)
 2004b70:	dec00304 	addi	sp,sp,12
 2004b74:	f800283a 	ret
 2004b78:	8009883a 	mov	r4,r16
 2004b7c:	20049500 	call	2004950 <__sinit>
 2004b80:	003fd706 	br	2004ae0 <__sfp+0x28>
 2004b84:	8809883a 	mov	r4,r17
 2004b88:	01400104 	movi	r5,4
 2004b8c:	2004a500 	call	2004a50 <__sfmoreglue>
 2004b90:	80800015 	stw	r2,0(r16)
 2004b94:	103fe21e 	bne	r2,zero,2004b20 <__sfp+0x68>
 2004b98:	00800304 	movi	r2,12
 2004b9c:	0009883a 	mov	r4,zero
 2004ba0:	88800015 	stw	r2,0(r17)
 2004ba4:	003fee06 	br	2004b60 <__sfp+0xa8>

02004ba8 <_malloc_trim_r>:
 2004ba8:	defffb04 	addi	sp,sp,-20
 2004bac:	dcc00315 	stw	r19,12(sp)
 2004bb0:	04c08074 	movhi	r19,513
 2004bb4:	9ce06504 	addi	r19,r19,-32364
 2004bb8:	dc800215 	stw	r18,8(sp)
 2004bbc:	dc400115 	stw	r17,4(sp)
 2004bc0:	dc000015 	stw	r16,0(sp)
 2004bc4:	2823883a 	mov	r17,r5
 2004bc8:	2025883a 	mov	r18,r4
 2004bcc:	dfc00415 	stw	ra,16(sp)
 2004bd0:	20064740 	call	2006474 <__malloc_lock>
 2004bd4:	98800217 	ldw	r2,8(r19)
 2004bd8:	9009883a 	mov	r4,r18
 2004bdc:	000b883a 	mov	r5,zero
 2004be0:	10c00117 	ldw	r3,4(r2)
 2004be4:	00bfff04 	movi	r2,-4
 2004be8:	18a0703a 	and	r16,r3,r2
 2004bec:	8463c83a 	sub	r17,r16,r17
 2004bf0:	8c43fbc4 	addi	r17,r17,4079
 2004bf4:	8822d33a 	srli	r17,r17,12
 2004bf8:	0083ffc4 	movi	r2,4095
 2004bfc:	8c7fffc4 	addi	r17,r17,-1
 2004c00:	8822933a 	slli	r17,r17,12
 2004c04:	1440060e 	bge	r2,r17,2004c20 <_malloc_trim_r+0x78>
 2004c08:	2005ad40 	call	2005ad4 <_sbrk_r>
 2004c0c:	98c00217 	ldw	r3,8(r19)
 2004c10:	9009883a 	mov	r4,r18
 2004c14:	044bc83a 	sub	r5,zero,r17
 2004c18:	80c7883a 	add	r3,r16,r3
 2004c1c:	10c00926 	beq	r2,r3,2004c44 <_malloc_trim_r+0x9c>
 2004c20:	20064940 	call	2006494 <__malloc_unlock>
 2004c24:	0005883a 	mov	r2,zero
 2004c28:	dfc00417 	ldw	ra,16(sp)
 2004c2c:	dcc00317 	ldw	r19,12(sp)
 2004c30:	dc800217 	ldw	r18,8(sp)
 2004c34:	dc400117 	ldw	r17,4(sp)
 2004c38:	dc000017 	ldw	r16,0(sp)
 2004c3c:	dec00504 	addi	sp,sp,20
 2004c40:	f800283a 	ret
 2004c44:	9009883a 	mov	r4,r18
 2004c48:	2005ad40 	call	2005ad4 <_sbrk_r>
 2004c4c:	844dc83a 	sub	r6,r16,r17
 2004c50:	00ffffc4 	movi	r3,-1
 2004c54:	9009883a 	mov	r4,r18
 2004c58:	000b883a 	mov	r5,zero
 2004c5c:	01c08074 	movhi	r7,513
 2004c60:	39e18704 	addi	r7,r7,-31204
 2004c64:	31800054 	ori	r6,r6,1
 2004c68:	10c00926 	beq	r2,r3,2004c90 <_malloc_trim_r+0xe8>
 2004c6c:	38800017 	ldw	r2,0(r7)
 2004c70:	98c00217 	ldw	r3,8(r19)
 2004c74:	9009883a 	mov	r4,r18
 2004c78:	1445c83a 	sub	r2,r2,r17
 2004c7c:	38800015 	stw	r2,0(r7)
 2004c80:	19800115 	stw	r6,4(r3)
 2004c84:	20064940 	call	2006494 <__malloc_unlock>
 2004c88:	00800044 	movi	r2,1
 2004c8c:	003fe606 	br	2004c28 <_malloc_trim_r+0x80>
 2004c90:	2005ad40 	call	2005ad4 <_sbrk_r>
 2004c94:	99800217 	ldw	r6,8(r19)
 2004c98:	100f883a 	mov	r7,r2
 2004c9c:	9009883a 	mov	r4,r18
 2004ca0:	1187c83a 	sub	r3,r2,r6
 2004ca4:	008003c4 	movi	r2,15
 2004ca8:	19400054 	ori	r5,r3,1
 2004cac:	10ffdc0e 	bge	r2,r3,2004c20 <_malloc_trim_r+0x78>
 2004cb0:	00808074 	movhi	r2,513
 2004cb4:	10a17504 	addi	r2,r2,-31276
 2004cb8:	10c00017 	ldw	r3,0(r2)
 2004cbc:	00808074 	movhi	r2,513
 2004cc0:	10a18704 	addi	r2,r2,-31204
 2004cc4:	31400115 	stw	r5,4(r6)
 2004cc8:	38c7c83a 	sub	r3,r7,r3
 2004ccc:	10c00015 	stw	r3,0(r2)
 2004cd0:	003fd306 	br	2004c20 <_malloc_trim_r+0x78>

02004cd4 <_free_r>:
 2004cd4:	defffd04 	addi	sp,sp,-12
 2004cd8:	dc400115 	stw	r17,4(sp)
 2004cdc:	dc000015 	stw	r16,0(sp)
 2004ce0:	dfc00215 	stw	ra,8(sp)
 2004ce4:	2821883a 	mov	r16,r5
 2004ce8:	2023883a 	mov	r17,r4
 2004cec:	28005a26 	beq	r5,zero,2004e58 <_free_r+0x184>
 2004cf0:	20064740 	call	2006474 <__malloc_lock>
 2004cf4:	823ffe04 	addi	r8,r16,-8
 2004cf8:	41400117 	ldw	r5,4(r8)
 2004cfc:	00bfff84 	movi	r2,-2
 2004d00:	02808074 	movhi	r10,513
 2004d04:	52a06504 	addi	r10,r10,-32364
 2004d08:	288e703a 	and	r7,r5,r2
 2004d0c:	41cd883a 	add	r6,r8,r7
 2004d10:	30c00117 	ldw	r3,4(r6)
 2004d14:	51000217 	ldw	r4,8(r10)
 2004d18:	00bfff04 	movi	r2,-4
 2004d1c:	1892703a 	and	r9,r3,r2
 2004d20:	5017883a 	mov	r11,r10
 2004d24:	31006726 	beq	r6,r4,2004ec4 <_free_r+0x1f0>
 2004d28:	2880004c 	andi	r2,r5,1
 2004d2c:	1005003a 	cmpeq	r2,r2,zero
 2004d30:	32400115 	stw	r9,4(r6)
 2004d34:	10001a1e 	bne	r2,zero,2004da0 <_free_r+0xcc>
 2004d38:	000b883a 	mov	r5,zero
 2004d3c:	3247883a 	add	r3,r6,r9
 2004d40:	18800117 	ldw	r2,4(r3)
 2004d44:	1080004c 	andi	r2,r2,1
 2004d48:	1000231e 	bne	r2,zero,2004dd8 <_free_r+0x104>
 2004d4c:	280ac03a 	cmpne	r5,r5,zero
 2004d50:	3a4f883a 	add	r7,r7,r9
 2004d54:	2800451e 	bne	r5,zero,2004e6c <_free_r+0x198>
 2004d58:	31000217 	ldw	r4,8(r6)
 2004d5c:	00808074 	movhi	r2,513
 2004d60:	10a06704 	addi	r2,r2,-32356
 2004d64:	20807b26 	beq	r4,r2,2004f54 <_free_r+0x280>
 2004d68:	30800317 	ldw	r2,12(r6)
 2004d6c:	3a07883a 	add	r3,r7,r8
 2004d70:	19c00015 	stw	r7,0(r3)
 2004d74:	11000215 	stw	r4,8(r2)
 2004d78:	20800315 	stw	r2,12(r4)
 2004d7c:	38800054 	ori	r2,r7,1
 2004d80:	40800115 	stw	r2,4(r8)
 2004d84:	28001a26 	beq	r5,zero,2004df0 <_free_r+0x11c>
 2004d88:	8809883a 	mov	r4,r17
 2004d8c:	dfc00217 	ldw	ra,8(sp)
 2004d90:	dc400117 	ldw	r17,4(sp)
 2004d94:	dc000017 	ldw	r16,0(sp)
 2004d98:	dec00304 	addi	sp,sp,12
 2004d9c:	20064941 	jmpi	2006494 <__malloc_unlock>
 2004da0:	80bffe17 	ldw	r2,-8(r16)
 2004da4:	50c00204 	addi	r3,r10,8
 2004da8:	4091c83a 	sub	r8,r8,r2
 2004dac:	41000217 	ldw	r4,8(r8)
 2004db0:	388f883a 	add	r7,r7,r2
 2004db4:	20c06126 	beq	r4,r3,2004f3c <_free_r+0x268>
 2004db8:	40800317 	ldw	r2,12(r8)
 2004dbc:	3247883a 	add	r3,r6,r9
 2004dc0:	000b883a 	mov	r5,zero
 2004dc4:	11000215 	stw	r4,8(r2)
 2004dc8:	20800315 	stw	r2,12(r4)
 2004dcc:	18800117 	ldw	r2,4(r3)
 2004dd0:	1080004c 	andi	r2,r2,1
 2004dd4:	103fdd26 	beq	r2,zero,2004d4c <_free_r+0x78>
 2004dd8:	38800054 	ori	r2,r7,1
 2004ddc:	3a07883a 	add	r3,r7,r8
 2004de0:	280ac03a 	cmpne	r5,r5,zero
 2004de4:	40800115 	stw	r2,4(r8)
 2004de8:	19c00015 	stw	r7,0(r3)
 2004dec:	283fe61e 	bne	r5,zero,2004d88 <_free_r+0xb4>
 2004df0:	00807fc4 	movi	r2,511
 2004df4:	11c01f2e 	bgeu	r2,r7,2004e74 <_free_r+0x1a0>
 2004df8:	3806d27a 	srli	r3,r7,9
 2004dfc:	1800481e 	bne	r3,zero,2004f20 <_free_r+0x24c>
 2004e00:	3804d0fa 	srli	r2,r7,3
 2004e04:	100690fa 	slli	r3,r2,3
 2004e08:	1acd883a 	add	r6,r3,r11
 2004e0c:	31400217 	ldw	r5,8(r6)
 2004e10:	31405926 	beq	r6,r5,2004f78 <_free_r+0x2a4>
 2004e14:	28800117 	ldw	r2,4(r5)
 2004e18:	00ffff04 	movi	r3,-4
 2004e1c:	10c4703a 	and	r2,r2,r3
 2004e20:	3880022e 	bgeu	r7,r2,2004e2c <_free_r+0x158>
 2004e24:	29400217 	ldw	r5,8(r5)
 2004e28:	317ffa1e 	bne	r6,r5,2004e14 <_free_r+0x140>
 2004e2c:	29800317 	ldw	r6,12(r5)
 2004e30:	41800315 	stw	r6,12(r8)
 2004e34:	41400215 	stw	r5,8(r8)
 2004e38:	8809883a 	mov	r4,r17
 2004e3c:	2a000315 	stw	r8,12(r5)
 2004e40:	32000215 	stw	r8,8(r6)
 2004e44:	dfc00217 	ldw	ra,8(sp)
 2004e48:	dc400117 	ldw	r17,4(sp)
 2004e4c:	dc000017 	ldw	r16,0(sp)
 2004e50:	dec00304 	addi	sp,sp,12
 2004e54:	20064941 	jmpi	2006494 <__malloc_unlock>
 2004e58:	dfc00217 	ldw	ra,8(sp)
 2004e5c:	dc400117 	ldw	r17,4(sp)
 2004e60:	dc000017 	ldw	r16,0(sp)
 2004e64:	dec00304 	addi	sp,sp,12
 2004e68:	f800283a 	ret
 2004e6c:	31000217 	ldw	r4,8(r6)
 2004e70:	003fbd06 	br	2004d68 <_free_r+0x94>
 2004e74:	3806d0fa 	srli	r3,r7,3
 2004e78:	00800044 	movi	r2,1
 2004e7c:	51400117 	ldw	r5,4(r10)
 2004e80:	180890fa 	slli	r4,r3,3
 2004e84:	1807d0ba 	srai	r3,r3,2
 2004e88:	22c9883a 	add	r4,r4,r11
 2004e8c:	21800217 	ldw	r6,8(r4)
 2004e90:	10c4983a 	sll	r2,r2,r3
 2004e94:	41000315 	stw	r4,12(r8)
 2004e98:	41800215 	stw	r6,8(r8)
 2004e9c:	288ab03a 	or	r5,r5,r2
 2004ea0:	22000215 	stw	r8,8(r4)
 2004ea4:	8809883a 	mov	r4,r17
 2004ea8:	51400115 	stw	r5,4(r10)
 2004eac:	32000315 	stw	r8,12(r6)
 2004eb0:	dfc00217 	ldw	ra,8(sp)
 2004eb4:	dc400117 	ldw	r17,4(sp)
 2004eb8:	dc000017 	ldw	r16,0(sp)
 2004ebc:	dec00304 	addi	sp,sp,12
 2004ec0:	20064941 	jmpi	2006494 <__malloc_unlock>
 2004ec4:	2880004c 	andi	r2,r5,1
 2004ec8:	3a4d883a 	add	r6,r7,r9
 2004ecc:	1000071e 	bne	r2,zero,2004eec <_free_r+0x218>
 2004ed0:	80bffe17 	ldw	r2,-8(r16)
 2004ed4:	4091c83a 	sub	r8,r8,r2
 2004ed8:	41000317 	ldw	r4,12(r8)
 2004edc:	40c00217 	ldw	r3,8(r8)
 2004ee0:	308d883a 	add	r6,r6,r2
 2004ee4:	20c00215 	stw	r3,8(r4)
 2004ee8:	19000315 	stw	r4,12(r3)
 2004eec:	00808074 	movhi	r2,513
 2004ef0:	10a17404 	addi	r2,r2,-31280
 2004ef4:	11000017 	ldw	r4,0(r2)
 2004ef8:	30c00054 	ori	r3,r6,1
 2004efc:	52000215 	stw	r8,8(r10)
 2004f00:	40c00115 	stw	r3,4(r8)
 2004f04:	313fa036 	bltu	r6,r4,2004d88 <_free_r+0xb4>
 2004f08:	00808074 	movhi	r2,513
 2004f0c:	10a18404 	addi	r2,r2,-31216
 2004f10:	11400017 	ldw	r5,0(r2)
 2004f14:	8809883a 	mov	r4,r17
 2004f18:	2004ba80 	call	2004ba8 <_malloc_trim_r>
 2004f1c:	003f9a06 	br	2004d88 <_free_r+0xb4>
 2004f20:	00800104 	movi	r2,4
 2004f24:	10c0072e 	bgeu	r2,r3,2004f44 <_free_r+0x270>
 2004f28:	00800504 	movi	r2,20
 2004f2c:	10c01936 	bltu	r2,r3,2004f94 <_free_r+0x2c0>
 2004f30:	188016c4 	addi	r2,r3,91
 2004f34:	100690fa 	slli	r3,r2,3
 2004f38:	003fb306 	br	2004e08 <_free_r+0x134>
 2004f3c:	01400044 	movi	r5,1
 2004f40:	003f7e06 	br	2004d3c <_free_r+0x68>
 2004f44:	3804d1ba 	srli	r2,r7,6
 2004f48:	10800e04 	addi	r2,r2,56
 2004f4c:	100690fa 	slli	r3,r2,3
 2004f50:	003fad06 	br	2004e08 <_free_r+0x134>
 2004f54:	22000315 	stw	r8,12(r4)
 2004f58:	22000215 	stw	r8,8(r4)
 2004f5c:	3a05883a 	add	r2,r7,r8
 2004f60:	38c00054 	ori	r3,r7,1
 2004f64:	11c00015 	stw	r7,0(r2)
 2004f68:	41000215 	stw	r4,8(r8)
 2004f6c:	40c00115 	stw	r3,4(r8)
 2004f70:	41000315 	stw	r4,12(r8)
 2004f74:	003f8406 	br	2004d88 <_free_r+0xb4>
 2004f78:	1005d0ba 	srai	r2,r2,2
 2004f7c:	00c00044 	movi	r3,1
 2004f80:	51000117 	ldw	r4,4(r10)
 2004f84:	1886983a 	sll	r3,r3,r2
 2004f88:	20c8b03a 	or	r4,r4,r3
 2004f8c:	51000115 	stw	r4,4(r10)
 2004f90:	003fa706 	br	2004e30 <_free_r+0x15c>
 2004f94:	00801504 	movi	r2,84
 2004f98:	10c00436 	bltu	r2,r3,2004fac <_free_r+0x2d8>
 2004f9c:	3804d33a 	srli	r2,r7,12
 2004fa0:	10801b84 	addi	r2,r2,110
 2004fa4:	100690fa 	slli	r3,r2,3
 2004fa8:	003f9706 	br	2004e08 <_free_r+0x134>
 2004fac:	00805504 	movi	r2,340
 2004fb0:	10c00436 	bltu	r2,r3,2004fc4 <_free_r+0x2f0>
 2004fb4:	3804d3fa 	srli	r2,r7,15
 2004fb8:	10801dc4 	addi	r2,r2,119
 2004fbc:	100690fa 	slli	r3,r2,3
 2004fc0:	003f9106 	br	2004e08 <_free_r+0x134>
 2004fc4:	00815504 	movi	r2,1364
 2004fc8:	10c0032e 	bgeu	r2,r3,2004fd8 <_free_r+0x304>
 2004fcc:	00801f84 	movi	r2,126
 2004fd0:	00c0fc04 	movi	r3,1008
 2004fd4:	003f8c06 	br	2004e08 <_free_r+0x134>
 2004fd8:	3804d4ba 	srli	r2,r7,18
 2004fdc:	10801f04 	addi	r2,r2,124
 2004fe0:	100690fa 	slli	r3,r2,3
 2004fe4:	003f8806 	br	2004e08 <_free_r+0x134>

02004fe8 <_fwalk_reent>:
 2004fe8:	defff704 	addi	sp,sp,-36
 2004fec:	dcc00315 	stw	r19,12(sp)
 2004ff0:	24c0b804 	addi	r19,r4,736
 2004ff4:	dd800615 	stw	r22,24(sp)
 2004ff8:	dd400515 	stw	r21,20(sp)
 2004ffc:	dfc00815 	stw	ra,32(sp)
 2005000:	ddc00715 	stw	r23,28(sp)
 2005004:	dd000415 	stw	r20,16(sp)
 2005008:	dc800215 	stw	r18,8(sp)
 200500c:	dc400115 	stw	r17,4(sp)
 2005010:	dc000015 	stw	r16,0(sp)
 2005014:	202b883a 	mov	r21,r4
 2005018:	282d883a 	mov	r22,r5
 200501c:	20049400 	call	2004940 <__sfp_lock_acquire>
 2005020:	98002126 	beq	r19,zero,20050a8 <_fwalk_reent+0xc0>
 2005024:	002f883a 	mov	r23,zero
 2005028:	9c800117 	ldw	r18,4(r19)
 200502c:	9c000217 	ldw	r16,8(r19)
 2005030:	90bfffc4 	addi	r2,r18,-1
 2005034:	10000d16 	blt	r2,zero,200506c <_fwalk_reent+0x84>
 2005038:	0023883a 	mov	r17,zero
 200503c:	053fffc4 	movi	r20,-1
 2005040:	8080030f 	ldh	r2,12(r16)
 2005044:	8c400044 	addi	r17,r17,1
 2005048:	10000626 	beq	r2,zero,2005064 <_fwalk_reent+0x7c>
 200504c:	8080038f 	ldh	r2,14(r16)
 2005050:	800b883a 	mov	r5,r16
 2005054:	a809883a 	mov	r4,r21
 2005058:	15000226 	beq	r2,r20,2005064 <_fwalk_reent+0x7c>
 200505c:	b03ee83a 	callr	r22
 2005060:	b8aeb03a 	or	r23,r23,r2
 2005064:	84001704 	addi	r16,r16,92
 2005068:	947ff51e 	bne	r18,r17,2005040 <_fwalk_reent+0x58>
 200506c:	9cc00017 	ldw	r19,0(r19)
 2005070:	983fed1e 	bne	r19,zero,2005028 <_fwalk_reent+0x40>
 2005074:	20049440 	call	2004944 <__sfp_lock_release>
 2005078:	b805883a 	mov	r2,r23
 200507c:	dfc00817 	ldw	ra,32(sp)
 2005080:	ddc00717 	ldw	r23,28(sp)
 2005084:	dd800617 	ldw	r22,24(sp)
 2005088:	dd400517 	ldw	r21,20(sp)
 200508c:	dd000417 	ldw	r20,16(sp)
 2005090:	dcc00317 	ldw	r19,12(sp)
 2005094:	dc800217 	ldw	r18,8(sp)
 2005098:	dc400117 	ldw	r17,4(sp)
 200509c:	dc000017 	ldw	r16,0(sp)
 20050a0:	dec00904 	addi	sp,sp,36
 20050a4:	f800283a 	ret
 20050a8:	002f883a 	mov	r23,zero
 20050ac:	003ff106 	br	2005074 <_fwalk_reent+0x8c>

020050b0 <_fwalk>:
 20050b0:	defff804 	addi	sp,sp,-32
 20050b4:	dcc00315 	stw	r19,12(sp)
 20050b8:	24c0b804 	addi	r19,r4,736
 20050bc:	dd400515 	stw	r21,20(sp)
 20050c0:	dfc00715 	stw	ra,28(sp)
 20050c4:	dd800615 	stw	r22,24(sp)
 20050c8:	dd000415 	stw	r20,16(sp)
 20050cc:	dc800215 	stw	r18,8(sp)
 20050d0:	dc400115 	stw	r17,4(sp)
 20050d4:	dc000015 	stw	r16,0(sp)
 20050d8:	282b883a 	mov	r21,r5
 20050dc:	20049400 	call	2004940 <__sfp_lock_acquire>
 20050e0:	98001f26 	beq	r19,zero,2005160 <_fwalk+0xb0>
 20050e4:	002d883a 	mov	r22,zero
 20050e8:	9c800117 	ldw	r18,4(r19)
 20050ec:	9c000217 	ldw	r16,8(r19)
 20050f0:	90bfffc4 	addi	r2,r18,-1
 20050f4:	10000c16 	blt	r2,zero,2005128 <_fwalk+0x78>
 20050f8:	0023883a 	mov	r17,zero
 20050fc:	053fffc4 	movi	r20,-1
 2005100:	8080030f 	ldh	r2,12(r16)
 2005104:	8c400044 	addi	r17,r17,1
 2005108:	10000526 	beq	r2,zero,2005120 <_fwalk+0x70>
 200510c:	8080038f 	ldh	r2,14(r16)
 2005110:	8009883a 	mov	r4,r16
 2005114:	15000226 	beq	r2,r20,2005120 <_fwalk+0x70>
 2005118:	a83ee83a 	callr	r21
 200511c:	b0acb03a 	or	r22,r22,r2
 2005120:	84001704 	addi	r16,r16,92
 2005124:	947ff61e 	bne	r18,r17,2005100 <_fwalk+0x50>
 2005128:	9cc00017 	ldw	r19,0(r19)
 200512c:	983fee1e 	bne	r19,zero,20050e8 <_fwalk+0x38>
 2005130:	20049440 	call	2004944 <__sfp_lock_release>
 2005134:	b005883a 	mov	r2,r22
 2005138:	dfc00717 	ldw	ra,28(sp)
 200513c:	dd800617 	ldw	r22,24(sp)
 2005140:	dd400517 	ldw	r21,20(sp)
 2005144:	dd000417 	ldw	r20,16(sp)
 2005148:	dcc00317 	ldw	r19,12(sp)
 200514c:	dc800217 	ldw	r18,8(sp)
 2005150:	dc400117 	ldw	r17,4(sp)
 2005154:	dc000017 	ldw	r16,0(sp)
 2005158:	dec00804 	addi	sp,sp,32
 200515c:	f800283a 	ret
 2005160:	002d883a 	mov	r22,zero
 2005164:	003ff206 	br	2005130 <_fwalk+0x80>

02005168 <__smakebuf_r>:
 2005168:	2880030b 	ldhu	r2,12(r5)
 200516c:	deffed04 	addi	sp,sp,-76
 2005170:	dc401015 	stw	r17,64(sp)
 2005174:	1080008c 	andi	r2,r2,2
 2005178:	dc000f15 	stw	r16,60(sp)
 200517c:	dfc01215 	stw	ra,72(sp)
 2005180:	dc801115 	stw	r18,68(sp)
 2005184:	2821883a 	mov	r16,r5
 2005188:	2023883a 	mov	r17,r4
 200518c:	10000b26 	beq	r2,zero,20051bc <__smakebuf_r+0x54>
 2005190:	28c010c4 	addi	r3,r5,67
 2005194:	00800044 	movi	r2,1
 2005198:	28800515 	stw	r2,20(r5)
 200519c:	28c00415 	stw	r3,16(r5)
 20051a0:	28c00015 	stw	r3,0(r5)
 20051a4:	dfc01217 	ldw	ra,72(sp)
 20051a8:	dc801117 	ldw	r18,68(sp)
 20051ac:	dc401017 	ldw	r17,64(sp)
 20051b0:	dc000f17 	ldw	r16,60(sp)
 20051b4:	dec01304 	addi	sp,sp,76
 20051b8:	f800283a 	ret
 20051bc:	2940038f 	ldh	r5,14(r5)
 20051c0:	28002116 	blt	r5,zero,2005248 <__smakebuf_r+0xe0>
 20051c4:	d80d883a 	mov	r6,sp
 20051c8:	2005e9c0 	call	2005e9c <_fstat_r>
 20051cc:	10001e16 	blt	r2,zero,2005248 <__smakebuf_r+0xe0>
 20051d0:	d8800117 	ldw	r2,4(sp)
 20051d4:	00e00014 	movui	r3,32768
 20051d8:	113c000c 	andi	r4,r2,61440
 20051dc:	20c03126 	beq	r4,r3,20052a4 <__smakebuf_r+0x13c>
 20051e0:	8080030b 	ldhu	r2,12(r16)
 20051e4:	00c80004 	movi	r3,8192
 20051e8:	10820014 	ori	r2,r2,2048
 20051ec:	8080030d 	sth	r2,12(r16)
 20051f0:	20c01e26 	beq	r4,r3,200526c <__smakebuf_r+0x104>
 20051f4:	04810004 	movi	r18,1024
 20051f8:	8809883a 	mov	r4,r17
 20051fc:	900b883a 	mov	r5,r18
 2005200:	20052fc0 	call	20052fc <_malloc_r>
 2005204:	1009883a 	mov	r4,r2
 2005208:	10003126 	beq	r2,zero,20052d0 <__smakebuf_r+0x168>
 200520c:	80c0030b 	ldhu	r3,12(r16)
 2005210:	00808034 	movhi	r2,512
 2005214:	10928d04 	addi	r2,r2,18996
 2005218:	88800f15 	stw	r2,60(r17)
 200521c:	18c02014 	ori	r3,r3,128
 2005220:	84800515 	stw	r18,20(r16)
 2005224:	80c0030d 	sth	r3,12(r16)
 2005228:	81000415 	stw	r4,16(r16)
 200522c:	81000015 	stw	r4,0(r16)
 2005230:	dfc01217 	ldw	ra,72(sp)
 2005234:	dc801117 	ldw	r18,68(sp)
 2005238:	dc401017 	ldw	r17,64(sp)
 200523c:	dc000f17 	ldw	r16,60(sp)
 2005240:	dec01304 	addi	sp,sp,76
 2005244:	f800283a 	ret
 2005248:	80c0030b 	ldhu	r3,12(r16)
 200524c:	1880200c 	andi	r2,r3,128
 2005250:	10000426 	beq	r2,zero,2005264 <__smakebuf_r+0xfc>
 2005254:	04801004 	movi	r18,64
 2005258:	18820014 	ori	r2,r3,2048
 200525c:	8080030d 	sth	r2,12(r16)
 2005260:	003fe506 	br	20051f8 <__smakebuf_r+0x90>
 2005264:	04810004 	movi	r18,1024
 2005268:	003ffb06 	br	2005258 <__smakebuf_r+0xf0>
 200526c:	8140038f 	ldh	r5,14(r16)
 2005270:	8809883a 	mov	r4,r17
 2005274:	2005f100 	call	2005f10 <_isatty_r>
 2005278:	103fde26 	beq	r2,zero,20051f4 <__smakebuf_r+0x8c>
 200527c:	8080030b 	ldhu	r2,12(r16)
 2005280:	80c010c4 	addi	r3,r16,67
 2005284:	04810004 	movi	r18,1024
 2005288:	10800054 	ori	r2,r2,1
 200528c:	8080030d 	sth	r2,12(r16)
 2005290:	00800044 	movi	r2,1
 2005294:	80c00415 	stw	r3,16(r16)
 2005298:	80800515 	stw	r2,20(r16)
 200529c:	80c00015 	stw	r3,0(r16)
 20052a0:	003fd506 	br	20051f8 <__smakebuf_r+0x90>
 20052a4:	80c00a17 	ldw	r3,40(r16)
 20052a8:	00808034 	movhi	r2,512
 20052ac:	1096d304 	addi	r2,r2,23372
 20052b0:	18bfcb1e 	bne	r3,r2,20051e0 <__smakebuf_r+0x78>
 20052b4:	8080030b 	ldhu	r2,12(r16)
 20052b8:	00c10004 	movi	r3,1024
 20052bc:	1825883a 	mov	r18,r3
 20052c0:	10c4b03a 	or	r2,r2,r3
 20052c4:	8080030d 	sth	r2,12(r16)
 20052c8:	80c01315 	stw	r3,76(r16)
 20052cc:	003fca06 	br	20051f8 <__smakebuf_r+0x90>
 20052d0:	8100030b 	ldhu	r4,12(r16)
 20052d4:	2080800c 	andi	r2,r4,512
 20052d8:	103fb21e 	bne	r2,zero,20051a4 <__smakebuf_r+0x3c>
 20052dc:	80c010c4 	addi	r3,r16,67
 20052e0:	21000094 	ori	r4,r4,2
 20052e4:	00800044 	movi	r2,1
 20052e8:	80800515 	stw	r2,20(r16)
 20052ec:	8100030d 	sth	r4,12(r16)
 20052f0:	80c00415 	stw	r3,16(r16)
 20052f4:	80c00015 	stw	r3,0(r16)
 20052f8:	003faa06 	br	20051a4 <__smakebuf_r+0x3c>

020052fc <_malloc_r>:
 20052fc:	defff604 	addi	sp,sp,-40
 2005300:	28c002c4 	addi	r3,r5,11
 2005304:	00800584 	movi	r2,22
 2005308:	dc800215 	stw	r18,8(sp)
 200530c:	dfc00915 	stw	ra,36(sp)
 2005310:	df000815 	stw	fp,32(sp)
 2005314:	ddc00715 	stw	r23,28(sp)
 2005318:	dd800615 	stw	r22,24(sp)
 200531c:	dd400515 	stw	r21,20(sp)
 2005320:	dd000415 	stw	r20,16(sp)
 2005324:	dcc00315 	stw	r19,12(sp)
 2005328:	dc400115 	stw	r17,4(sp)
 200532c:	dc000015 	stw	r16,0(sp)
 2005330:	2025883a 	mov	r18,r4
 2005334:	10c01236 	bltu	r2,r3,2005380 <_malloc_r+0x84>
 2005338:	04400404 	movi	r17,16
 200533c:	8940142e 	bgeu	r17,r5,2005390 <_malloc_r+0x94>
 2005340:	00800304 	movi	r2,12
 2005344:	0007883a 	mov	r3,zero
 2005348:	90800015 	stw	r2,0(r18)
 200534c:	1805883a 	mov	r2,r3
 2005350:	dfc00917 	ldw	ra,36(sp)
 2005354:	df000817 	ldw	fp,32(sp)
 2005358:	ddc00717 	ldw	r23,28(sp)
 200535c:	dd800617 	ldw	r22,24(sp)
 2005360:	dd400517 	ldw	r21,20(sp)
 2005364:	dd000417 	ldw	r20,16(sp)
 2005368:	dcc00317 	ldw	r19,12(sp)
 200536c:	dc800217 	ldw	r18,8(sp)
 2005370:	dc400117 	ldw	r17,4(sp)
 2005374:	dc000017 	ldw	r16,0(sp)
 2005378:	dec00a04 	addi	sp,sp,40
 200537c:	f800283a 	ret
 2005380:	00bffe04 	movi	r2,-8
 2005384:	18a2703a 	and	r17,r3,r2
 2005388:	883fed16 	blt	r17,zero,2005340 <_malloc_r+0x44>
 200538c:	897fec36 	bltu	r17,r5,2005340 <_malloc_r+0x44>
 2005390:	9009883a 	mov	r4,r18
 2005394:	20064740 	call	2006474 <__malloc_lock>
 2005398:	00807dc4 	movi	r2,503
 200539c:	14402b2e 	bgeu	r2,r17,200544c <_malloc_r+0x150>
 20053a0:	8806d27a 	srli	r3,r17,9
 20053a4:	18003f1e 	bne	r3,zero,20054a4 <_malloc_r+0x1a8>
 20053a8:	880cd0fa 	srli	r6,r17,3
 20053ac:	300490fa 	slli	r2,r6,3
 20053b0:	02c08074 	movhi	r11,513
 20053b4:	5ae06504 	addi	r11,r11,-32364
 20053b8:	12cb883a 	add	r5,r2,r11
 20053bc:	2c000317 	ldw	r16,12(r5)
 20053c0:	580f883a 	mov	r7,r11
 20053c4:	2c00041e 	bne	r5,r16,20053d8 <_malloc_r+0xdc>
 20053c8:	00000a06 	br	20053f4 <_malloc_r+0xf8>
 20053cc:	1800860e 	bge	r3,zero,20055e8 <_malloc_r+0x2ec>
 20053d0:	84000317 	ldw	r16,12(r16)
 20053d4:	2c000726 	beq	r5,r16,20053f4 <_malloc_r+0xf8>
 20053d8:	80800117 	ldw	r2,4(r16)
 20053dc:	00ffff04 	movi	r3,-4
 20053e0:	10c8703a 	and	r4,r2,r3
 20053e4:	2447c83a 	sub	r3,r4,r17
 20053e8:	008003c4 	movi	r2,15
 20053ec:	10fff70e 	bge	r2,r3,20053cc <_malloc_r+0xd0>
 20053f0:	31bfffc4 	addi	r6,r6,-1
 20053f4:	32400044 	addi	r9,r6,1
 20053f8:	02808074 	movhi	r10,513
 20053fc:	52a06704 	addi	r10,r10,-32356
 2005400:	54000217 	ldw	r16,8(r10)
 2005404:	8280a026 	beq	r16,r10,2005688 <_malloc_r+0x38c>
 2005408:	80800117 	ldw	r2,4(r16)
 200540c:	00ffff04 	movi	r3,-4
 2005410:	10ca703a 	and	r5,r2,r3
 2005414:	2c4dc83a 	sub	r6,r5,r17
 2005418:	008003c4 	movi	r2,15
 200541c:	11808316 	blt	r2,r6,200562c <_malloc_r+0x330>
 2005420:	52800315 	stw	r10,12(r10)
 2005424:	52800215 	stw	r10,8(r10)
 2005428:	30002916 	blt	r6,zero,20054d0 <_malloc_r+0x1d4>
 200542c:	8147883a 	add	r3,r16,r5
 2005430:	18800117 	ldw	r2,4(r3)
 2005434:	9009883a 	mov	r4,r18
 2005438:	10800054 	ori	r2,r2,1
 200543c:	18800115 	stw	r2,4(r3)
 2005440:	20064940 	call	2006494 <__malloc_unlock>
 2005444:	80c00204 	addi	r3,r16,8
 2005448:	003fc006 	br	200534c <_malloc_r+0x50>
 200544c:	02c08074 	movhi	r11,513
 2005450:	5ae06504 	addi	r11,r11,-32364
 2005454:	8ac5883a 	add	r2,r17,r11
 2005458:	14000317 	ldw	r16,12(r2)
 200545c:	580f883a 	mov	r7,r11
 2005460:	8806d0fa 	srli	r3,r17,3
 2005464:	14006c26 	beq	r2,r16,2005618 <_malloc_r+0x31c>
 2005468:	80c00117 	ldw	r3,4(r16)
 200546c:	00bfff04 	movi	r2,-4
 2005470:	81800317 	ldw	r6,12(r16)
 2005474:	1886703a 	and	r3,r3,r2
 2005478:	80c7883a 	add	r3,r16,r3
 200547c:	18800117 	ldw	r2,4(r3)
 2005480:	81400217 	ldw	r5,8(r16)
 2005484:	9009883a 	mov	r4,r18
 2005488:	10800054 	ori	r2,r2,1
 200548c:	18800115 	stw	r2,4(r3)
 2005490:	31400215 	stw	r5,8(r6)
 2005494:	29800315 	stw	r6,12(r5)
 2005498:	20064940 	call	2006494 <__malloc_unlock>
 200549c:	80c00204 	addi	r3,r16,8
 20054a0:	003faa06 	br	200534c <_malloc_r+0x50>
 20054a4:	00800104 	movi	r2,4
 20054a8:	10c0052e 	bgeu	r2,r3,20054c0 <_malloc_r+0x1c4>
 20054ac:	00800504 	movi	r2,20
 20054b0:	10c07836 	bltu	r2,r3,2005694 <_malloc_r+0x398>
 20054b4:	198016c4 	addi	r6,r3,91
 20054b8:	300490fa 	slli	r2,r6,3
 20054bc:	003fbc06 	br	20053b0 <_malloc_r+0xb4>
 20054c0:	8804d1ba 	srli	r2,r17,6
 20054c4:	11800e04 	addi	r6,r2,56
 20054c8:	300490fa 	slli	r2,r6,3
 20054cc:	003fb806 	br	20053b0 <_malloc_r+0xb4>
 20054d0:	00807fc4 	movi	r2,511
 20054d4:	1140bb36 	bltu	r2,r5,20057c4 <_malloc_r+0x4c8>
 20054d8:	2806d0fa 	srli	r3,r5,3
 20054dc:	573ffe04 	addi	fp,r10,-8
 20054e0:	00800044 	movi	r2,1
 20054e4:	180890fa 	slli	r4,r3,3
 20054e8:	1807d0ba 	srai	r3,r3,2
 20054ec:	e1c00117 	ldw	r7,4(fp)
 20054f0:	5909883a 	add	r4,r11,r4
 20054f4:	21400217 	ldw	r5,8(r4)
 20054f8:	10c4983a 	sll	r2,r2,r3
 20054fc:	81000315 	stw	r4,12(r16)
 2005500:	81400215 	stw	r5,8(r16)
 2005504:	388eb03a 	or	r7,r7,r2
 2005508:	2c000315 	stw	r16,12(r5)
 200550c:	24000215 	stw	r16,8(r4)
 2005510:	e1c00115 	stw	r7,4(fp)
 2005514:	4807883a 	mov	r3,r9
 2005518:	4800cd16 	blt	r9,zero,2005850 <_malloc_r+0x554>
 200551c:	1807d0ba 	srai	r3,r3,2
 2005520:	00800044 	movi	r2,1
 2005524:	10c8983a 	sll	r4,r2,r3
 2005528:	39004436 	bltu	r7,r4,200563c <_malloc_r+0x340>
 200552c:	21c4703a 	and	r2,r4,r7
 2005530:	10000a1e 	bne	r2,zero,200555c <_malloc_r+0x260>
 2005534:	2109883a 	add	r4,r4,r4
 2005538:	00bfff04 	movi	r2,-4
 200553c:	4884703a 	and	r2,r9,r2
 2005540:	3906703a 	and	r3,r7,r4
 2005544:	12400104 	addi	r9,r2,4
 2005548:	1800041e 	bne	r3,zero,200555c <_malloc_r+0x260>
 200554c:	2109883a 	add	r4,r4,r4
 2005550:	3904703a 	and	r2,r7,r4
 2005554:	4a400104 	addi	r9,r9,4
 2005558:	103ffc26 	beq	r2,zero,200554c <_malloc_r+0x250>
 200555c:	480490fa 	slli	r2,r9,3
 2005560:	4819883a 	mov	r12,r9
 2005564:	023fff04 	movi	r8,-4
 2005568:	589b883a 	add	r13,r11,r2
 200556c:	6807883a 	mov	r3,r13
 2005570:	014003c4 	movi	r5,15
 2005574:	1c000317 	ldw	r16,12(r3)
 2005578:	1c00041e 	bne	r3,r16,200558c <_malloc_r+0x290>
 200557c:	0000a706 	br	200581c <_malloc_r+0x520>
 2005580:	3000ab0e 	bge	r6,zero,2005830 <_malloc_r+0x534>
 2005584:	84000317 	ldw	r16,12(r16)
 2005588:	1c00a426 	beq	r3,r16,200581c <_malloc_r+0x520>
 200558c:	80800117 	ldw	r2,4(r16)
 2005590:	1204703a 	and	r2,r2,r8
 2005594:	144dc83a 	sub	r6,r2,r17
 2005598:	29bff90e 	bge	r5,r6,2005580 <_malloc_r+0x284>
 200559c:	81000317 	ldw	r4,12(r16)
 20055a0:	80c00217 	ldw	r3,8(r16)
 20055a4:	89400054 	ori	r5,r17,1
 20055a8:	8445883a 	add	r2,r16,r17
 20055ac:	20c00215 	stw	r3,8(r4)
 20055b0:	19000315 	stw	r4,12(r3)
 20055b4:	81400115 	stw	r5,4(r16)
 20055b8:	1187883a 	add	r3,r2,r6
 20055bc:	31000054 	ori	r4,r6,1
 20055c0:	50800315 	stw	r2,12(r10)
 20055c4:	50800215 	stw	r2,8(r10)
 20055c8:	19800015 	stw	r6,0(r3)
 20055cc:	11000115 	stw	r4,4(r2)
 20055d0:	12800215 	stw	r10,8(r2)
 20055d4:	12800315 	stw	r10,12(r2)
 20055d8:	9009883a 	mov	r4,r18
 20055dc:	20064940 	call	2006494 <__malloc_unlock>
 20055e0:	80c00204 	addi	r3,r16,8
 20055e4:	003f5906 	br	200534c <_malloc_r+0x50>
 20055e8:	8109883a 	add	r4,r16,r4
 20055ec:	20800117 	ldw	r2,4(r4)
 20055f0:	80c00217 	ldw	r3,8(r16)
 20055f4:	81400317 	ldw	r5,12(r16)
 20055f8:	10800054 	ori	r2,r2,1
 20055fc:	20800115 	stw	r2,4(r4)
 2005600:	28c00215 	stw	r3,8(r5)
 2005604:	19400315 	stw	r5,12(r3)
 2005608:	9009883a 	mov	r4,r18
 200560c:	20064940 	call	2006494 <__malloc_unlock>
 2005610:	80c00204 	addi	r3,r16,8
 2005614:	003f4d06 	br	200534c <_malloc_r+0x50>
 2005618:	80800204 	addi	r2,r16,8
 200561c:	14000317 	ldw	r16,12(r2)
 2005620:	143f911e 	bne	r2,r16,2005468 <_malloc_r+0x16c>
 2005624:	1a400084 	addi	r9,r3,2
 2005628:	003f7306 	br	20053f8 <_malloc_r+0xfc>
 200562c:	88c00054 	ori	r3,r17,1
 2005630:	8445883a 	add	r2,r16,r17
 2005634:	80c00115 	stw	r3,4(r16)
 2005638:	003fdf06 	br	20055b8 <_malloc_r+0x2bc>
 200563c:	e4000217 	ldw	r16,8(fp)
 2005640:	00bfff04 	movi	r2,-4
 2005644:	80c00117 	ldw	r3,4(r16)
 2005648:	802d883a 	mov	r22,r16
 200564c:	18aa703a 	and	r21,r3,r2
 2005650:	ac401636 	bltu	r21,r17,20056ac <_malloc_r+0x3b0>
 2005654:	ac49c83a 	sub	r4,r21,r17
 2005658:	008003c4 	movi	r2,15
 200565c:	1100130e 	bge	r2,r4,20056ac <_malloc_r+0x3b0>
 2005660:	88800054 	ori	r2,r17,1
 2005664:	8447883a 	add	r3,r16,r17
 2005668:	80800115 	stw	r2,4(r16)
 200566c:	20800054 	ori	r2,r4,1
 2005670:	18800115 	stw	r2,4(r3)
 2005674:	e0c00215 	stw	r3,8(fp)
 2005678:	9009883a 	mov	r4,r18
 200567c:	20064940 	call	2006494 <__malloc_unlock>
 2005680:	80c00204 	addi	r3,r16,8
 2005684:	003f3106 	br	200534c <_malloc_r+0x50>
 2005688:	39c00117 	ldw	r7,4(r7)
 200568c:	573ffe04 	addi	fp,r10,-8
 2005690:	003fa006 	br	2005514 <_malloc_r+0x218>
 2005694:	00801504 	movi	r2,84
 2005698:	10c06736 	bltu	r2,r3,2005838 <_malloc_r+0x53c>
 200569c:	8804d33a 	srli	r2,r17,12
 20056a0:	11801b84 	addi	r6,r2,110
 20056a4:	300490fa 	slli	r2,r6,3
 20056a8:	003f4106 	br	20053b0 <_malloc_r+0xb4>
 20056ac:	d0a01d17 	ldw	r2,-32652(gp)
 20056b0:	d0e00e17 	ldw	r3,-32712(gp)
 20056b4:	053fffc4 	movi	r20,-1
 20056b8:	10800404 	addi	r2,r2,16
 20056bc:	88a7883a 	add	r19,r17,r2
 20056c0:	1d000326 	beq	r3,r20,20056d0 <_malloc_r+0x3d4>
 20056c4:	98c3ffc4 	addi	r3,r19,4095
 20056c8:	00bc0004 	movi	r2,-4096
 20056cc:	18a6703a 	and	r19,r3,r2
 20056d0:	9009883a 	mov	r4,r18
 20056d4:	980b883a 	mov	r5,r19
 20056d8:	2005ad40 	call	2005ad4 <_sbrk_r>
 20056dc:	1009883a 	mov	r4,r2
 20056e0:	15000426 	beq	r2,r20,20056f4 <_malloc_r+0x3f8>
 20056e4:	854b883a 	add	r5,r16,r21
 20056e8:	1029883a 	mov	r20,r2
 20056ec:	11405a2e 	bgeu	r2,r5,2005858 <_malloc_r+0x55c>
 20056f0:	87000c26 	beq	r16,fp,2005724 <_malloc_r+0x428>
 20056f4:	e4000217 	ldw	r16,8(fp)
 20056f8:	80c00117 	ldw	r3,4(r16)
 20056fc:	00bfff04 	movi	r2,-4
 2005700:	1884703a 	and	r2,r3,r2
 2005704:	14400336 	bltu	r2,r17,2005714 <_malloc_r+0x418>
 2005708:	1449c83a 	sub	r4,r2,r17
 200570c:	008003c4 	movi	r2,15
 2005710:	113fd316 	blt	r2,r4,2005660 <_malloc_r+0x364>
 2005714:	9009883a 	mov	r4,r18
 2005718:	20064940 	call	2006494 <__malloc_unlock>
 200571c:	0007883a 	mov	r3,zero
 2005720:	003f0a06 	br	200534c <_malloc_r+0x50>
 2005724:	05c08074 	movhi	r23,513
 2005728:	bde18704 	addi	r23,r23,-31204
 200572c:	b8800017 	ldw	r2,0(r23)
 2005730:	988d883a 	add	r6,r19,r2
 2005734:	b9800015 	stw	r6,0(r23)
 2005738:	d0e00e17 	ldw	r3,-32712(gp)
 200573c:	00bfffc4 	movi	r2,-1
 2005740:	18808e26 	beq	r3,r2,200597c <_malloc_r+0x680>
 2005744:	2145c83a 	sub	r2,r4,r5
 2005748:	3085883a 	add	r2,r6,r2
 200574c:	b8800015 	stw	r2,0(r23)
 2005750:	20c001cc 	andi	r3,r4,7
 2005754:	18005f1e 	bne	r3,zero,20058d4 <_malloc_r+0x5d8>
 2005758:	000b883a 	mov	r5,zero
 200575c:	a4c5883a 	add	r2,r20,r19
 2005760:	1083ffcc 	andi	r2,r2,4095
 2005764:	00c40004 	movi	r3,4096
 2005768:	1887c83a 	sub	r3,r3,r2
 200576c:	28e7883a 	add	r19,r5,r3
 2005770:	9009883a 	mov	r4,r18
 2005774:	980b883a 	mov	r5,r19
 2005778:	2005ad40 	call	2005ad4 <_sbrk_r>
 200577c:	1007883a 	mov	r3,r2
 2005780:	00bfffc4 	movi	r2,-1
 2005784:	18807a26 	beq	r3,r2,2005970 <_malloc_r+0x674>
 2005788:	1d05c83a 	sub	r2,r3,r20
 200578c:	9885883a 	add	r2,r19,r2
 2005790:	10c00054 	ori	r3,r2,1
 2005794:	b8800017 	ldw	r2,0(r23)
 2005798:	a021883a 	mov	r16,r20
 200579c:	a0c00115 	stw	r3,4(r20)
 20057a0:	9885883a 	add	r2,r19,r2
 20057a4:	b8800015 	stw	r2,0(r23)
 20057a8:	e5000215 	stw	r20,8(fp)
 20057ac:	b7003626 	beq	r22,fp,2005888 <_malloc_r+0x58c>
 20057b0:	018003c4 	movi	r6,15
 20057b4:	35404b36 	bltu	r6,r21,20058e4 <_malloc_r+0x5e8>
 20057b8:	00800044 	movi	r2,1
 20057bc:	a0800115 	stw	r2,4(r20)
 20057c0:	003fcd06 	br	20056f8 <_malloc_r+0x3fc>
 20057c4:	2808d27a 	srli	r4,r5,9
 20057c8:	2000371e 	bne	r4,zero,20058a8 <_malloc_r+0x5ac>
 20057cc:	2808d0fa 	srli	r4,r5,3
 20057d0:	200690fa 	slli	r3,r4,3
 20057d4:	1ad1883a 	add	r8,r3,r11
 20057d8:	41800217 	ldw	r6,8(r8)
 20057dc:	41805b26 	beq	r8,r6,200594c <_malloc_r+0x650>
 20057e0:	30800117 	ldw	r2,4(r6)
 20057e4:	00ffff04 	movi	r3,-4
 20057e8:	10c4703a 	and	r2,r2,r3
 20057ec:	2880022e 	bgeu	r5,r2,20057f8 <_malloc_r+0x4fc>
 20057f0:	31800217 	ldw	r6,8(r6)
 20057f4:	41bffa1e 	bne	r8,r6,20057e0 <_malloc_r+0x4e4>
 20057f8:	32000317 	ldw	r8,12(r6)
 20057fc:	39c00117 	ldw	r7,4(r7)
 2005800:	82000315 	stw	r8,12(r16)
 2005804:	81800215 	stw	r6,8(r16)
 2005808:	07008074 	movhi	fp,513
 200580c:	e7206504 	addi	fp,fp,-32364
 2005810:	34000315 	stw	r16,12(r6)
 2005814:	44000215 	stw	r16,8(r8)
 2005818:	003f3e06 	br	2005514 <_malloc_r+0x218>
 200581c:	63000044 	addi	r12,r12,1
 2005820:	608000cc 	andi	r2,r12,3
 2005824:	10005d26 	beq	r2,zero,200599c <_malloc_r+0x6a0>
 2005828:	18c00204 	addi	r3,r3,8
 200582c:	003f5106 	br	2005574 <_malloc_r+0x278>
 2005830:	8089883a 	add	r4,r16,r2
 2005834:	003f6d06 	br	20055ec <_malloc_r+0x2f0>
 2005838:	00805504 	movi	r2,340
 200583c:	10c02036 	bltu	r2,r3,20058c0 <_malloc_r+0x5c4>
 2005840:	8804d3fa 	srli	r2,r17,15
 2005844:	11801dc4 	addi	r6,r2,119
 2005848:	300490fa 	slli	r2,r6,3
 200584c:	003ed806 	br	20053b0 <_malloc_r+0xb4>
 2005850:	48c000c4 	addi	r3,r9,3
 2005854:	003f3106 	br	200551c <_malloc_r+0x220>
 2005858:	05c08074 	movhi	r23,513
 200585c:	bde18704 	addi	r23,r23,-31204
 2005860:	b8800017 	ldw	r2,0(r23)
 2005864:	988d883a 	add	r6,r19,r2
 2005868:	b9800015 	stw	r6,0(r23)
 200586c:	293fb21e 	bne	r5,r4,2005738 <_malloc_r+0x43c>
 2005870:	2083ffcc 	andi	r2,r4,4095
 2005874:	103fb01e 	bne	r2,zero,2005738 <_malloc_r+0x43c>
 2005878:	e4000217 	ldw	r16,8(fp)
 200587c:	9d45883a 	add	r2,r19,r21
 2005880:	10800054 	ori	r2,r2,1
 2005884:	80800115 	stw	r2,4(r16)
 2005888:	b8c00017 	ldw	r3,0(r23)
 200588c:	d0a01e17 	ldw	r2,-32648(gp)
 2005890:	10c0012e 	bgeu	r2,r3,2005898 <_malloc_r+0x59c>
 2005894:	d0e01e15 	stw	r3,-32648(gp)
 2005898:	d0a01f17 	ldw	r2,-32644(gp)
 200589c:	10ff962e 	bgeu	r2,r3,20056f8 <_malloc_r+0x3fc>
 20058a0:	d0e01f15 	stw	r3,-32644(gp)
 20058a4:	003f9406 	br	20056f8 <_malloc_r+0x3fc>
 20058a8:	00800104 	movi	r2,4
 20058ac:	11001e36 	bltu	r2,r4,2005928 <_malloc_r+0x62c>
 20058b0:	2804d1ba 	srli	r2,r5,6
 20058b4:	11000e04 	addi	r4,r2,56
 20058b8:	200690fa 	slli	r3,r4,3
 20058bc:	003fc506 	br	20057d4 <_malloc_r+0x4d8>
 20058c0:	00815504 	movi	r2,1364
 20058c4:	10c01d2e 	bgeu	r2,r3,200593c <_malloc_r+0x640>
 20058c8:	01801f84 	movi	r6,126
 20058cc:	0080fc04 	movi	r2,1008
 20058d0:	003eb706 	br	20053b0 <_malloc_r+0xb4>
 20058d4:	00800204 	movi	r2,8
 20058d8:	10cbc83a 	sub	r5,r2,r3
 20058dc:	2169883a 	add	r20,r4,r5
 20058e0:	003f9e06 	br	200575c <_malloc_r+0x460>
 20058e4:	00bffe04 	movi	r2,-8
 20058e8:	a93ffd04 	addi	r4,r21,-12
 20058ec:	2088703a 	and	r4,r4,r2
 20058f0:	b10b883a 	add	r5,r22,r4
 20058f4:	00c00144 	movi	r3,5
 20058f8:	28c00215 	stw	r3,8(r5)
 20058fc:	28c00115 	stw	r3,4(r5)
 2005900:	b0800117 	ldw	r2,4(r22)
 2005904:	1080004c 	andi	r2,r2,1
 2005908:	2084b03a 	or	r2,r4,r2
 200590c:	b0800115 	stw	r2,4(r22)
 2005910:	313fdd2e 	bgeu	r6,r4,2005888 <_malloc_r+0x58c>
 2005914:	b1400204 	addi	r5,r22,8
 2005918:	9009883a 	mov	r4,r18
 200591c:	2004cd40 	call	2004cd4 <_free_r>
 2005920:	e4000217 	ldw	r16,8(fp)
 2005924:	003fd806 	br	2005888 <_malloc_r+0x58c>
 2005928:	00800504 	movi	r2,20
 200592c:	11001536 	bltu	r2,r4,2005984 <_malloc_r+0x688>
 2005930:	210016c4 	addi	r4,r4,91
 2005934:	200690fa 	slli	r3,r4,3
 2005938:	003fa606 	br	20057d4 <_malloc_r+0x4d8>
 200593c:	8804d4ba 	srli	r2,r17,18
 2005940:	11801f04 	addi	r6,r2,124
 2005944:	300490fa 	slli	r2,r6,3
 2005948:	003e9906 	br	20053b0 <_malloc_r+0xb4>
 200594c:	2009d0ba 	srai	r4,r4,2
 2005950:	01408074 	movhi	r5,513
 2005954:	29606504 	addi	r5,r5,-32364
 2005958:	00c00044 	movi	r3,1
 200595c:	28800117 	ldw	r2,4(r5)
 2005960:	1906983a 	sll	r3,r3,r4
 2005964:	10c4b03a 	or	r2,r2,r3
 2005968:	28800115 	stw	r2,4(r5)
 200596c:	003fa306 	br	20057fc <_malloc_r+0x500>
 2005970:	0027883a 	mov	r19,zero
 2005974:	00c00044 	movi	r3,1
 2005978:	003f8606 	br	2005794 <_malloc_r+0x498>
 200597c:	d1200e15 	stw	r4,-32712(gp)
 2005980:	003f7306 	br	2005750 <_malloc_r+0x454>
 2005984:	00801504 	movi	r2,84
 2005988:	11001936 	bltu	r2,r4,20059f0 <_malloc_r+0x6f4>
 200598c:	2804d33a 	srli	r2,r5,12
 2005990:	11001b84 	addi	r4,r2,110
 2005994:	200690fa 	slli	r3,r4,3
 2005998:	003f8e06 	br	20057d4 <_malloc_r+0x4d8>
 200599c:	480b883a 	mov	r5,r9
 20059a0:	6807883a 	mov	r3,r13
 20059a4:	288000cc 	andi	r2,r5,3
 20059a8:	18fffe04 	addi	r3,r3,-8
 20059ac:	297fffc4 	addi	r5,r5,-1
 20059b0:	10001526 	beq	r2,zero,2005a08 <_malloc_r+0x70c>
 20059b4:	18800217 	ldw	r2,8(r3)
 20059b8:	10fffa26 	beq	r2,r3,20059a4 <_malloc_r+0x6a8>
 20059bc:	2109883a 	add	r4,r4,r4
 20059c0:	393f1e36 	bltu	r7,r4,200563c <_malloc_r+0x340>
 20059c4:	203f1d26 	beq	r4,zero,200563c <_malloc_r+0x340>
 20059c8:	21c4703a 	and	r2,r4,r7
 20059cc:	10000226 	beq	r2,zero,20059d8 <_malloc_r+0x6dc>
 20059d0:	6013883a 	mov	r9,r12
 20059d4:	003ee106 	br	200555c <_malloc_r+0x260>
 20059d8:	2109883a 	add	r4,r4,r4
 20059dc:	3904703a 	and	r2,r7,r4
 20059e0:	63000104 	addi	r12,r12,4
 20059e4:	103ffc26 	beq	r2,zero,20059d8 <_malloc_r+0x6dc>
 20059e8:	6013883a 	mov	r9,r12
 20059ec:	003edb06 	br	200555c <_malloc_r+0x260>
 20059f0:	00805504 	movi	r2,340
 20059f4:	11000836 	bltu	r2,r4,2005a18 <_malloc_r+0x71c>
 20059f8:	2804d3fa 	srli	r2,r5,15
 20059fc:	11001dc4 	addi	r4,r2,119
 2005a00:	200690fa 	slli	r3,r4,3
 2005a04:	003f7306 	br	20057d4 <_malloc_r+0x4d8>
 2005a08:	0104303a 	nor	r2,zero,r4
 2005a0c:	388e703a 	and	r7,r7,r2
 2005a10:	e1c00115 	stw	r7,4(fp)
 2005a14:	003fe906 	br	20059bc <_malloc_r+0x6c0>
 2005a18:	00815504 	movi	r2,1364
 2005a1c:	1100032e 	bgeu	r2,r4,2005a2c <_malloc_r+0x730>
 2005a20:	01001f84 	movi	r4,126
 2005a24:	00c0fc04 	movi	r3,1008
 2005a28:	003f6a06 	br	20057d4 <_malloc_r+0x4d8>
 2005a2c:	2804d4ba 	srli	r2,r5,18
 2005a30:	11001f04 	addi	r4,r2,124
 2005a34:	200690fa 	slli	r3,r4,3
 2005a38:	003f6606 	br	20057d4 <_malloc_r+0x4d8>

02005a3c <memset>:
 2005a3c:	008000c4 	movi	r2,3
 2005a40:	29403fcc 	andi	r5,r5,255
 2005a44:	2007883a 	mov	r3,r4
 2005a48:	1180022e 	bgeu	r2,r6,2005a54 <memset+0x18>
 2005a4c:	2084703a 	and	r2,r4,r2
 2005a50:	10000826 	beq	r2,zero,2005a74 <memset+0x38>
 2005a54:	30000526 	beq	r6,zero,2005a6c <memset+0x30>
 2005a58:	2805883a 	mov	r2,r5
 2005a5c:	30cd883a 	add	r6,r6,r3
 2005a60:	18800005 	stb	r2,0(r3)
 2005a64:	18c00044 	addi	r3,r3,1
 2005a68:	19bffd1e 	bne	r3,r6,2005a60 <memset+0x24>
 2005a6c:	2005883a 	mov	r2,r4
 2005a70:	f800283a 	ret
 2005a74:	2804923a 	slli	r2,r5,8
 2005a78:	020003c4 	movi	r8,15
 2005a7c:	200f883a 	mov	r7,r4
 2005a80:	2884b03a 	or	r2,r5,r2
 2005a84:	1006943a 	slli	r3,r2,16
 2005a88:	10c6b03a 	or	r3,r2,r3
 2005a8c:	41800a2e 	bgeu	r8,r6,2005ab8 <memset+0x7c>
 2005a90:	4005883a 	mov	r2,r8
 2005a94:	31bffc04 	addi	r6,r6,-16
 2005a98:	38c00015 	stw	r3,0(r7)
 2005a9c:	38c00115 	stw	r3,4(r7)
 2005aa0:	38c00215 	stw	r3,8(r7)
 2005aa4:	38c00315 	stw	r3,12(r7)
 2005aa8:	39c00404 	addi	r7,r7,16
 2005aac:	11bff936 	bltu	r2,r6,2005a94 <memset+0x58>
 2005ab0:	008000c4 	movi	r2,3
 2005ab4:	1180052e 	bgeu	r2,r6,2005acc <memset+0x90>
 2005ab8:	31bfff04 	addi	r6,r6,-4
 2005abc:	008000c4 	movi	r2,3
 2005ac0:	38c00015 	stw	r3,0(r7)
 2005ac4:	39c00104 	addi	r7,r7,4
 2005ac8:	11bffb36 	bltu	r2,r6,2005ab8 <memset+0x7c>
 2005acc:	3807883a 	mov	r3,r7
 2005ad0:	003fe006 	br	2005a54 <memset+0x18>

02005ad4 <_sbrk_r>:
 2005ad4:	defffd04 	addi	sp,sp,-12
 2005ad8:	dc000015 	stw	r16,0(sp)
 2005adc:	04008074 	movhi	r16,513
 2005ae0:	84218304 	addi	r16,r16,-31220
 2005ae4:	dc400115 	stw	r17,4(sp)
 2005ae8:	80000015 	stw	zero,0(r16)
 2005aec:	2023883a 	mov	r17,r4
 2005af0:	2809883a 	mov	r4,r5
 2005af4:	dfc00215 	stw	ra,8(sp)
 2005af8:	20066340 	call	2006634 <sbrk>
 2005afc:	1007883a 	mov	r3,r2
 2005b00:	00bfffc4 	movi	r2,-1
 2005b04:	18800626 	beq	r3,r2,2005b20 <_sbrk_r+0x4c>
 2005b08:	1805883a 	mov	r2,r3
 2005b0c:	dfc00217 	ldw	ra,8(sp)
 2005b10:	dc400117 	ldw	r17,4(sp)
 2005b14:	dc000017 	ldw	r16,0(sp)
 2005b18:	dec00304 	addi	sp,sp,12
 2005b1c:	f800283a 	ret
 2005b20:	80800017 	ldw	r2,0(r16)
 2005b24:	103ff826 	beq	r2,zero,2005b08 <_sbrk_r+0x34>
 2005b28:	88800015 	stw	r2,0(r17)
 2005b2c:	1805883a 	mov	r2,r3
 2005b30:	dfc00217 	ldw	ra,8(sp)
 2005b34:	dc400117 	ldw	r17,4(sp)
 2005b38:	dc000017 	ldw	r16,0(sp)
 2005b3c:	dec00304 	addi	sp,sp,12
 2005b40:	f800283a 	ret

02005b44 <__sclose>:
 2005b44:	2940038f 	ldh	r5,14(r5)
 2005b48:	2005d081 	jmpi	2005d08 <_close_r>

02005b4c <__sseek>:
 2005b4c:	defffe04 	addi	sp,sp,-8
 2005b50:	dc000015 	stw	r16,0(sp)
 2005b54:	2821883a 	mov	r16,r5
 2005b58:	2940038f 	ldh	r5,14(r5)
 2005b5c:	dfc00115 	stw	ra,4(sp)
 2005b60:	2005f800 	call	2005f80 <_lseek_r>
 2005b64:	1007883a 	mov	r3,r2
 2005b68:	00bfffc4 	movi	r2,-1
 2005b6c:	18800926 	beq	r3,r2,2005b94 <__sseek+0x48>
 2005b70:	8080030b 	ldhu	r2,12(r16)
 2005b74:	80c01415 	stw	r3,80(r16)
 2005b78:	10840014 	ori	r2,r2,4096
 2005b7c:	8080030d 	sth	r2,12(r16)
 2005b80:	1805883a 	mov	r2,r3
 2005b84:	dfc00117 	ldw	ra,4(sp)
 2005b88:	dc000017 	ldw	r16,0(sp)
 2005b8c:	dec00204 	addi	sp,sp,8
 2005b90:	f800283a 	ret
 2005b94:	8080030b 	ldhu	r2,12(r16)
 2005b98:	10bbffcc 	andi	r2,r2,61439
 2005b9c:	8080030d 	sth	r2,12(r16)
 2005ba0:	1805883a 	mov	r2,r3
 2005ba4:	dfc00117 	ldw	ra,4(sp)
 2005ba8:	dc000017 	ldw	r16,0(sp)
 2005bac:	dec00204 	addi	sp,sp,8
 2005bb0:	f800283a 	ret

02005bb4 <__swrite>:
 2005bb4:	2880030b 	ldhu	r2,12(r5)
 2005bb8:	defffb04 	addi	sp,sp,-20
 2005bbc:	dcc00315 	stw	r19,12(sp)
 2005bc0:	1080400c 	andi	r2,r2,256
 2005bc4:	dc800215 	stw	r18,8(sp)
 2005bc8:	dc400115 	stw	r17,4(sp)
 2005bcc:	dc000015 	stw	r16,0(sp)
 2005bd0:	3027883a 	mov	r19,r6
 2005bd4:	3825883a 	mov	r18,r7
 2005bd8:	dfc00415 	stw	ra,16(sp)
 2005bdc:	2821883a 	mov	r16,r5
 2005be0:	000d883a 	mov	r6,zero
 2005be4:	01c00084 	movi	r7,2
 2005be8:	2023883a 	mov	r17,r4
 2005bec:	10000226 	beq	r2,zero,2005bf8 <__swrite+0x44>
 2005bf0:	2940038f 	ldh	r5,14(r5)
 2005bf4:	2005f800 	call	2005f80 <_lseek_r>
 2005bf8:	8080030b 	ldhu	r2,12(r16)
 2005bfc:	8140038f 	ldh	r5,14(r16)
 2005c00:	8809883a 	mov	r4,r17
 2005c04:	10bbffcc 	andi	r2,r2,61439
 2005c08:	980d883a 	mov	r6,r19
 2005c0c:	900f883a 	mov	r7,r18
 2005c10:	8080030d 	sth	r2,12(r16)
 2005c14:	dfc00417 	ldw	ra,16(sp)
 2005c18:	dcc00317 	ldw	r19,12(sp)
 2005c1c:	dc800217 	ldw	r18,8(sp)
 2005c20:	dc400117 	ldw	r17,4(sp)
 2005c24:	dc000017 	ldw	r16,0(sp)
 2005c28:	dec00504 	addi	sp,sp,20
 2005c2c:	2005c901 	jmpi	2005c90 <_write_r>

02005c30 <__sread>:
 2005c30:	defffe04 	addi	sp,sp,-8
 2005c34:	dc000015 	stw	r16,0(sp)
 2005c38:	2821883a 	mov	r16,r5
 2005c3c:	2940038f 	ldh	r5,14(r5)
 2005c40:	dfc00115 	stw	ra,4(sp)
 2005c44:	2005ff80 	call	2005ff8 <_read_r>
 2005c48:	1007883a 	mov	r3,r2
 2005c4c:	10000816 	blt	r2,zero,2005c70 <__sread+0x40>
 2005c50:	80801417 	ldw	r2,80(r16)
 2005c54:	10c5883a 	add	r2,r2,r3
 2005c58:	80801415 	stw	r2,80(r16)
 2005c5c:	1805883a 	mov	r2,r3
 2005c60:	dfc00117 	ldw	ra,4(sp)
 2005c64:	dc000017 	ldw	r16,0(sp)
 2005c68:	dec00204 	addi	sp,sp,8
 2005c6c:	f800283a 	ret
 2005c70:	8080030b 	ldhu	r2,12(r16)
 2005c74:	10bbffcc 	andi	r2,r2,61439
 2005c78:	8080030d 	sth	r2,12(r16)
 2005c7c:	1805883a 	mov	r2,r3
 2005c80:	dfc00117 	ldw	ra,4(sp)
 2005c84:	dc000017 	ldw	r16,0(sp)
 2005c88:	dec00204 	addi	sp,sp,8
 2005c8c:	f800283a 	ret

02005c90 <_write_r>:
 2005c90:	defffd04 	addi	sp,sp,-12
 2005c94:	dc000015 	stw	r16,0(sp)
 2005c98:	04008074 	movhi	r16,513
 2005c9c:	84218304 	addi	r16,r16,-31220
 2005ca0:	dc400115 	stw	r17,4(sp)
 2005ca4:	80000015 	stw	zero,0(r16)
 2005ca8:	2023883a 	mov	r17,r4
 2005cac:	2809883a 	mov	r4,r5
 2005cb0:	300b883a 	mov	r5,r6
 2005cb4:	380d883a 	mov	r6,r7
 2005cb8:	dfc00215 	stw	ra,8(sp)
 2005cbc:	20067480 	call	2006748 <write>
 2005cc0:	1007883a 	mov	r3,r2
 2005cc4:	00bfffc4 	movi	r2,-1
 2005cc8:	18800626 	beq	r3,r2,2005ce4 <_write_r+0x54>
 2005ccc:	1805883a 	mov	r2,r3
 2005cd0:	dfc00217 	ldw	ra,8(sp)
 2005cd4:	dc400117 	ldw	r17,4(sp)
 2005cd8:	dc000017 	ldw	r16,0(sp)
 2005cdc:	dec00304 	addi	sp,sp,12
 2005ce0:	f800283a 	ret
 2005ce4:	80800017 	ldw	r2,0(r16)
 2005ce8:	103ff826 	beq	r2,zero,2005ccc <_write_r+0x3c>
 2005cec:	88800015 	stw	r2,0(r17)
 2005cf0:	1805883a 	mov	r2,r3
 2005cf4:	dfc00217 	ldw	ra,8(sp)
 2005cf8:	dc400117 	ldw	r17,4(sp)
 2005cfc:	dc000017 	ldw	r16,0(sp)
 2005d00:	dec00304 	addi	sp,sp,12
 2005d04:	f800283a 	ret

02005d08 <_close_r>:
 2005d08:	defffd04 	addi	sp,sp,-12
 2005d0c:	dc000015 	stw	r16,0(sp)
 2005d10:	04008074 	movhi	r16,513
 2005d14:	84218304 	addi	r16,r16,-31220
 2005d18:	dc400115 	stw	r17,4(sp)
 2005d1c:	80000015 	stw	zero,0(r16)
 2005d20:	2023883a 	mov	r17,r4
 2005d24:	2809883a 	mov	r4,r5
 2005d28:	dfc00215 	stw	ra,8(sp)
 2005d2c:	2002e800 	call	2002e80 <close>
 2005d30:	1007883a 	mov	r3,r2
 2005d34:	00bfffc4 	movi	r2,-1
 2005d38:	18800626 	beq	r3,r2,2005d54 <_close_r+0x4c>
 2005d3c:	1805883a 	mov	r2,r3
 2005d40:	dfc00217 	ldw	ra,8(sp)
 2005d44:	dc400117 	ldw	r17,4(sp)
 2005d48:	dc000017 	ldw	r16,0(sp)
 2005d4c:	dec00304 	addi	sp,sp,12
 2005d50:	f800283a 	ret
 2005d54:	80800017 	ldw	r2,0(r16)
 2005d58:	103ff826 	beq	r2,zero,2005d3c <_close_r+0x34>
 2005d5c:	88800015 	stw	r2,0(r17)
 2005d60:	1805883a 	mov	r2,r3
 2005d64:	dfc00217 	ldw	ra,8(sp)
 2005d68:	dc400117 	ldw	r17,4(sp)
 2005d6c:	dc000017 	ldw	r16,0(sp)
 2005d70:	dec00304 	addi	sp,sp,12
 2005d74:	f800283a 	ret

02005d78 <_fclose_r>:
 2005d78:	defffc04 	addi	sp,sp,-16
 2005d7c:	dc400115 	stw	r17,4(sp)
 2005d80:	dc000015 	stw	r16,0(sp)
 2005d84:	dfc00315 	stw	ra,12(sp)
 2005d88:	dc800215 	stw	r18,8(sp)
 2005d8c:	2821883a 	mov	r16,r5
 2005d90:	2023883a 	mov	r17,r4
 2005d94:	28002926 	beq	r5,zero,2005e3c <_fclose_r+0xc4>
 2005d98:	20049400 	call	2004940 <__sfp_lock_acquire>
 2005d9c:	88000226 	beq	r17,zero,2005da8 <_fclose_r+0x30>
 2005da0:	88800e17 	ldw	r2,56(r17)
 2005da4:	10002d26 	beq	r2,zero,2005e5c <_fclose_r+0xe4>
 2005da8:	8080030f 	ldh	r2,12(r16)
 2005dac:	10002226 	beq	r2,zero,2005e38 <_fclose_r+0xc0>
 2005db0:	8809883a 	mov	r4,r17
 2005db4:	800b883a 	mov	r5,r16
 2005db8:	20046b80 	call	20046b8 <_fflush_r>
 2005dbc:	1025883a 	mov	r18,r2
 2005dc0:	80800b17 	ldw	r2,44(r16)
 2005dc4:	10000426 	beq	r2,zero,2005dd8 <_fclose_r+0x60>
 2005dc8:	81400717 	ldw	r5,28(r16)
 2005dcc:	8809883a 	mov	r4,r17
 2005dd0:	103ee83a 	callr	r2
 2005dd4:	10002a16 	blt	r2,zero,2005e80 <_fclose_r+0x108>
 2005dd8:	8080030b 	ldhu	r2,12(r16)
 2005ddc:	1080200c 	andi	r2,r2,128
 2005de0:	1000231e 	bne	r2,zero,2005e70 <_fclose_r+0xf8>
 2005de4:	81400c17 	ldw	r5,48(r16)
 2005de8:	28000526 	beq	r5,zero,2005e00 <_fclose_r+0x88>
 2005dec:	80801004 	addi	r2,r16,64
 2005df0:	28800226 	beq	r5,r2,2005dfc <_fclose_r+0x84>
 2005df4:	8809883a 	mov	r4,r17
 2005df8:	2004cd40 	call	2004cd4 <_free_r>
 2005dfc:	80000c15 	stw	zero,48(r16)
 2005e00:	81401117 	ldw	r5,68(r16)
 2005e04:	28000326 	beq	r5,zero,2005e14 <_fclose_r+0x9c>
 2005e08:	8809883a 	mov	r4,r17
 2005e0c:	2004cd40 	call	2004cd4 <_free_r>
 2005e10:	80001115 	stw	zero,68(r16)
 2005e14:	8000030d 	sth	zero,12(r16)
 2005e18:	20049440 	call	2004944 <__sfp_lock_release>
 2005e1c:	9005883a 	mov	r2,r18
 2005e20:	dfc00317 	ldw	ra,12(sp)
 2005e24:	dc800217 	ldw	r18,8(sp)
 2005e28:	dc400117 	ldw	r17,4(sp)
 2005e2c:	dc000017 	ldw	r16,0(sp)
 2005e30:	dec00404 	addi	sp,sp,16
 2005e34:	f800283a 	ret
 2005e38:	20049440 	call	2004944 <__sfp_lock_release>
 2005e3c:	0025883a 	mov	r18,zero
 2005e40:	9005883a 	mov	r2,r18
 2005e44:	dfc00317 	ldw	ra,12(sp)
 2005e48:	dc800217 	ldw	r18,8(sp)
 2005e4c:	dc400117 	ldw	r17,4(sp)
 2005e50:	dc000017 	ldw	r16,0(sp)
 2005e54:	dec00404 	addi	sp,sp,16
 2005e58:	f800283a 	ret
 2005e5c:	8809883a 	mov	r4,r17
 2005e60:	20049500 	call	2004950 <__sinit>
 2005e64:	8080030f 	ldh	r2,12(r16)
 2005e68:	103fd11e 	bne	r2,zero,2005db0 <_fclose_r+0x38>
 2005e6c:	003ff206 	br	2005e38 <_fclose_r+0xc0>
 2005e70:	81400417 	ldw	r5,16(r16)
 2005e74:	8809883a 	mov	r4,r17
 2005e78:	2004cd40 	call	2004cd4 <_free_r>
 2005e7c:	003fd906 	br	2005de4 <_fclose_r+0x6c>
 2005e80:	04bfffc4 	movi	r18,-1
 2005e84:	003fd406 	br	2005dd8 <_fclose_r+0x60>

02005e88 <fclose>:
 2005e88:	00808074 	movhi	r2,513
 2005e8c:	10a17204 	addi	r2,r2,-31288
 2005e90:	200b883a 	mov	r5,r4
 2005e94:	11000017 	ldw	r4,0(r2)
 2005e98:	2005d781 	jmpi	2005d78 <_fclose_r>

02005e9c <_fstat_r>:
 2005e9c:	defffd04 	addi	sp,sp,-12
 2005ea0:	dc000015 	stw	r16,0(sp)
 2005ea4:	04008074 	movhi	r16,513
 2005ea8:	84218304 	addi	r16,r16,-31220
 2005eac:	dc400115 	stw	r17,4(sp)
 2005eb0:	80000015 	stw	zero,0(r16)
 2005eb4:	2023883a 	mov	r17,r4
 2005eb8:	2809883a 	mov	r4,r5
 2005ebc:	300b883a 	mov	r5,r6
 2005ec0:	dfc00215 	stw	ra,8(sp)
 2005ec4:	20060d00 	call	20060d0 <fstat>
 2005ec8:	1007883a 	mov	r3,r2
 2005ecc:	00bfffc4 	movi	r2,-1
 2005ed0:	18800626 	beq	r3,r2,2005eec <_fstat_r+0x50>
 2005ed4:	1805883a 	mov	r2,r3
 2005ed8:	dfc00217 	ldw	ra,8(sp)
 2005edc:	dc400117 	ldw	r17,4(sp)
 2005ee0:	dc000017 	ldw	r16,0(sp)
 2005ee4:	dec00304 	addi	sp,sp,12
 2005ee8:	f800283a 	ret
 2005eec:	80800017 	ldw	r2,0(r16)
 2005ef0:	103ff826 	beq	r2,zero,2005ed4 <_fstat_r+0x38>
 2005ef4:	88800015 	stw	r2,0(r17)
 2005ef8:	1805883a 	mov	r2,r3
 2005efc:	dfc00217 	ldw	ra,8(sp)
 2005f00:	dc400117 	ldw	r17,4(sp)
 2005f04:	dc000017 	ldw	r16,0(sp)
 2005f08:	dec00304 	addi	sp,sp,12
 2005f0c:	f800283a 	ret

02005f10 <_isatty_r>:
 2005f10:	defffd04 	addi	sp,sp,-12
 2005f14:	dc000015 	stw	r16,0(sp)
 2005f18:	04008074 	movhi	r16,513
 2005f1c:	84218304 	addi	r16,r16,-31220
 2005f20:	dc400115 	stw	r17,4(sp)
 2005f24:	80000015 	stw	zero,0(r16)
 2005f28:	2023883a 	mov	r17,r4
 2005f2c:	2809883a 	mov	r4,r5
 2005f30:	dfc00215 	stw	ra,8(sp)
 2005f34:	20062040 	call	2006204 <isatty>
 2005f38:	1007883a 	mov	r3,r2
 2005f3c:	00bfffc4 	movi	r2,-1
 2005f40:	18800626 	beq	r3,r2,2005f5c <_isatty_r+0x4c>
 2005f44:	1805883a 	mov	r2,r3
 2005f48:	dfc00217 	ldw	ra,8(sp)
 2005f4c:	dc400117 	ldw	r17,4(sp)
 2005f50:	dc000017 	ldw	r16,0(sp)
 2005f54:	dec00304 	addi	sp,sp,12
 2005f58:	f800283a 	ret
 2005f5c:	80800017 	ldw	r2,0(r16)
 2005f60:	103ff826 	beq	r2,zero,2005f44 <_isatty_r+0x34>
 2005f64:	88800015 	stw	r2,0(r17)
 2005f68:	1805883a 	mov	r2,r3
 2005f6c:	dfc00217 	ldw	ra,8(sp)
 2005f70:	dc400117 	ldw	r17,4(sp)
 2005f74:	dc000017 	ldw	r16,0(sp)
 2005f78:	dec00304 	addi	sp,sp,12
 2005f7c:	f800283a 	ret

02005f80 <_lseek_r>:
 2005f80:	defffd04 	addi	sp,sp,-12
 2005f84:	dc000015 	stw	r16,0(sp)
 2005f88:	04008074 	movhi	r16,513
 2005f8c:	84218304 	addi	r16,r16,-31220
 2005f90:	dc400115 	stw	r17,4(sp)
 2005f94:	80000015 	stw	zero,0(r16)
 2005f98:	2023883a 	mov	r17,r4
 2005f9c:	2809883a 	mov	r4,r5
 2005fa0:	300b883a 	mov	r5,r6
 2005fa4:	380d883a 	mov	r6,r7
 2005fa8:	dfc00215 	stw	ra,8(sp)
 2005fac:	20063240 	call	2006324 <lseek>
 2005fb0:	1007883a 	mov	r3,r2
 2005fb4:	00bfffc4 	movi	r2,-1
 2005fb8:	18800626 	beq	r3,r2,2005fd4 <_lseek_r+0x54>
 2005fbc:	1805883a 	mov	r2,r3
 2005fc0:	dfc00217 	ldw	ra,8(sp)
 2005fc4:	dc400117 	ldw	r17,4(sp)
 2005fc8:	dc000017 	ldw	r16,0(sp)
 2005fcc:	dec00304 	addi	sp,sp,12
 2005fd0:	f800283a 	ret
 2005fd4:	80800017 	ldw	r2,0(r16)
 2005fd8:	103ff826 	beq	r2,zero,2005fbc <_lseek_r+0x3c>
 2005fdc:	88800015 	stw	r2,0(r17)
 2005fe0:	1805883a 	mov	r2,r3
 2005fe4:	dfc00217 	ldw	ra,8(sp)
 2005fe8:	dc400117 	ldw	r17,4(sp)
 2005fec:	dc000017 	ldw	r16,0(sp)
 2005ff0:	dec00304 	addi	sp,sp,12
 2005ff4:	f800283a 	ret

02005ff8 <_read_r>:
 2005ff8:	defffd04 	addi	sp,sp,-12
 2005ffc:	dc000015 	stw	r16,0(sp)
 2006000:	04008074 	movhi	r16,513
 2006004:	84218304 	addi	r16,r16,-31220
 2006008:	dc400115 	stw	r17,4(sp)
 200600c:	80000015 	stw	zero,0(r16)
 2006010:	2023883a 	mov	r17,r4
 2006014:	2809883a 	mov	r4,r5
 2006018:	300b883a 	mov	r5,r6
 200601c:	380d883a 	mov	r6,r7
 2006020:	dfc00215 	stw	ra,8(sp)
 2006024:	20064b40 	call	20064b4 <read>
 2006028:	1007883a 	mov	r3,r2
 200602c:	00bfffc4 	movi	r2,-1
 2006030:	18800626 	beq	r3,r2,200604c <_read_r+0x54>
 2006034:	1805883a 	mov	r2,r3
 2006038:	dfc00217 	ldw	ra,8(sp)
 200603c:	dc400117 	ldw	r17,4(sp)
 2006040:	dc000017 	ldw	r16,0(sp)
 2006044:	dec00304 	addi	sp,sp,12
 2006048:	f800283a 	ret
 200604c:	80800017 	ldw	r2,0(r16)
 2006050:	103ff826 	beq	r2,zero,2006034 <_read_r+0x3c>
 2006054:	88800015 	stw	r2,0(r17)
 2006058:	1805883a 	mov	r2,r3
 200605c:	dfc00217 	ldw	ra,8(sp)
 2006060:	dc400117 	ldw	r17,4(sp)
 2006064:	dc000017 	ldw	r16,0(sp)
 2006068:	dec00304 	addi	sp,sp,12
 200606c:	f800283a 	ret

02006070 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 2006070:	defffd04 	addi	sp,sp,-12
 2006074:	df000215 	stw	fp,8(sp)
 2006078:	df000204 	addi	fp,sp,8
 200607c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 2006080:	e0bfff17 	ldw	r2,-4(fp)
 2006084:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2006088:	e0bffe17 	ldw	r2,-8(fp)
 200608c:	1005003a 	cmpeq	r2,r2,zero
 2006090:	1000021e 	bne	r2,zero,200609c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 2006094:	002af070 	cmpltui	zero,zero,43969
 2006098:	00000106 	br	20060a0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 200609c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 20060a0:	e037883a 	mov	sp,fp
 20060a4:	df000017 	ldw	fp,0(sp)
 20060a8:	dec00104 	addi	sp,sp,4
 20060ac:	f800283a 	ret

020060b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20060b0:	defffd04 	addi	sp,sp,-12
 20060b4:	dfc00215 	stw	ra,8(sp)
 20060b8:	df000115 	stw	fp,4(sp)
 20060bc:	df000104 	addi	fp,sp,4
 20060c0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 20060c4:	e13fff17 	ldw	r4,-4(fp)
 20060c8:	20060700 	call	2006070 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20060cc:	003fff06 	br	20060cc <_exit+0x1c>

020060d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 20060d0:	defff904 	addi	sp,sp,-28
 20060d4:	dfc00615 	stw	ra,24(sp)
 20060d8:	df000515 	stw	fp,20(sp)
 20060dc:	df000504 	addi	fp,sp,20
 20060e0:	e13ffc15 	stw	r4,-16(fp)
 20060e4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20060e8:	e0bffc17 	ldw	r2,-16(fp)
 20060ec:	1004803a 	cmplt	r2,r2,zero
 20060f0:	1000081e 	bne	r2,zero,2006114 <fstat+0x44>
 20060f4:	e0bffc17 	ldw	r2,-16(fp)
 20060f8:	10800324 	muli	r2,r2,12
 20060fc:	1007883a 	mov	r3,r2
 2006100:	00808034 	movhi	r2,512
 2006104:	109f0504 	addi	r2,r2,31764
 2006108:	1887883a 	add	r3,r3,r2
 200610c:	e0ffff15 	stw	r3,-4(fp)
 2006110:	00000106 	br	2006118 <fstat+0x48>
 2006114:	e03fff15 	stw	zero,-4(fp)
 2006118:	e0bfff17 	ldw	r2,-4(fp)
 200611c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2006120:	e0bffb17 	ldw	r2,-20(fp)
 2006124:	1005003a 	cmpeq	r2,r2,zero
 2006128:	1000121e 	bne	r2,zero,2006174 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200612c:	e0bffb17 	ldw	r2,-20(fp)
 2006130:	10800017 	ldw	r2,0(r2)
 2006134:	10800817 	ldw	r2,32(r2)
 2006138:	1005003a 	cmpeq	r2,r2,zero
 200613c:	1000081e 	bne	r2,zero,2006160 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 2006140:	e0bffb17 	ldw	r2,-20(fp)
 2006144:	10800017 	ldw	r2,0(r2)
 2006148:	10800817 	ldw	r2,32(r2)
 200614c:	e13ffb17 	ldw	r4,-20(fp)
 2006150:	e17ffd17 	ldw	r5,-12(fp)
 2006154:	103ee83a 	callr	r2
 2006158:	e0bffe15 	stw	r2,-8(fp)
 200615c:	00000b06 	br	200618c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2006160:	e0fffd17 	ldw	r3,-12(fp)
 2006164:	00880004 	movi	r2,8192
 2006168:	18800115 	stw	r2,4(r3)
      return 0;
 200616c:	e03ffe15 	stw	zero,-8(fp)
 2006170:	00000606 	br	200618c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2006174:	20061a40 	call	20061a4 <alt_get_errno>
 2006178:	1007883a 	mov	r3,r2
 200617c:	00801444 	movi	r2,81
 2006180:	18800015 	stw	r2,0(r3)
    return -1;
 2006184:	00bfffc4 	movi	r2,-1
 2006188:	e0bffe15 	stw	r2,-8(fp)
 200618c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 2006190:	e037883a 	mov	sp,fp
 2006194:	dfc00117 	ldw	ra,4(sp)
 2006198:	df000017 	ldw	fp,0(sp)
 200619c:	dec00204 	addi	sp,sp,8
 20061a0:	f800283a 	ret

020061a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20061a4:	defffd04 	addi	sp,sp,-12
 20061a8:	dfc00215 	stw	ra,8(sp)
 20061ac:	df000115 	stw	fp,4(sp)
 20061b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20061b4:	00808074 	movhi	r2,513
 20061b8:	10a16d04 	addi	r2,r2,-31308
 20061bc:	10800017 	ldw	r2,0(r2)
 20061c0:	1005003a 	cmpeq	r2,r2,zero
 20061c4:	1000061e 	bne	r2,zero,20061e0 <alt_get_errno+0x3c>
 20061c8:	00808074 	movhi	r2,513
 20061cc:	10a16d04 	addi	r2,r2,-31308
 20061d0:	10800017 	ldw	r2,0(r2)
 20061d4:	103ee83a 	callr	r2
 20061d8:	e0bfff15 	stw	r2,-4(fp)
 20061dc:	00000306 	br	20061ec <alt_get_errno+0x48>
 20061e0:	00808074 	movhi	r2,513
 20061e4:	10a18304 	addi	r2,r2,-31220
 20061e8:	e0bfff15 	stw	r2,-4(fp)
 20061ec:	e0bfff17 	ldw	r2,-4(fp)
}
 20061f0:	e037883a 	mov	sp,fp
 20061f4:	dfc00117 	ldw	ra,4(sp)
 20061f8:	df000017 	ldw	fp,0(sp)
 20061fc:	dec00204 	addi	sp,sp,8
 2006200:	f800283a 	ret

02006204 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2006204:	deffeb04 	addi	sp,sp,-84
 2006208:	dfc01415 	stw	ra,80(sp)
 200620c:	df001315 	stw	fp,76(sp)
 2006210:	df001304 	addi	fp,sp,76
 2006214:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2006218:	e0bffd17 	ldw	r2,-12(fp)
 200621c:	1004803a 	cmplt	r2,r2,zero
 2006220:	1000081e 	bne	r2,zero,2006244 <isatty+0x40>
 2006224:	e0bffd17 	ldw	r2,-12(fp)
 2006228:	10800324 	muli	r2,r2,12
 200622c:	1007883a 	mov	r3,r2
 2006230:	00808034 	movhi	r2,512
 2006234:	109f0504 	addi	r2,r2,31764
 2006238:	1887883a 	add	r3,r3,r2
 200623c:	e0ffff15 	stw	r3,-4(fp)
 2006240:	00000106 	br	2006248 <isatty+0x44>
 2006244:	e03fff15 	stw	zero,-4(fp)
 2006248:	e0bfff17 	ldw	r2,-4(fp)
 200624c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 2006250:	e0bfed17 	ldw	r2,-76(fp)
 2006254:	1005003a 	cmpeq	r2,r2,zero
 2006258:	10000f1e 	bne	r2,zero,2006298 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200625c:	e0bfed17 	ldw	r2,-76(fp)
 2006260:	10800017 	ldw	r2,0(r2)
 2006264:	10800817 	ldw	r2,32(r2)
 2006268:	1004c03a 	cmpne	r2,r2,zero
 200626c:	1000031e 	bne	r2,zero,200627c <isatty+0x78>
    {
      return 1;
 2006270:	00800044 	movi	r2,1
 2006274:	e0bffe15 	stw	r2,-8(fp)
 2006278:	00000c06 	br	20062ac <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200627c:	e17fee04 	addi	r5,fp,-72
 2006280:	e13ffd17 	ldw	r4,-12(fp)
 2006284:	20060d00 	call	20060d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2006288:	e0bfef17 	ldw	r2,-68(fp)
 200628c:	10880020 	cmpeqi	r2,r2,8192
 2006290:	e0bffe15 	stw	r2,-8(fp)
 2006294:	00000506 	br	20062ac <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2006298:	20062c40 	call	20062c4 <alt_get_errno>
 200629c:	1007883a 	mov	r3,r2
 20062a0:	00801444 	movi	r2,81
 20062a4:	18800015 	stw	r2,0(r3)
    return 0;
 20062a8:	e03ffe15 	stw	zero,-8(fp)
 20062ac:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 20062b0:	e037883a 	mov	sp,fp
 20062b4:	dfc00117 	ldw	ra,4(sp)
 20062b8:	df000017 	ldw	fp,0(sp)
 20062bc:	dec00204 	addi	sp,sp,8
 20062c0:	f800283a 	ret

020062c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20062c4:	defffd04 	addi	sp,sp,-12
 20062c8:	dfc00215 	stw	ra,8(sp)
 20062cc:	df000115 	stw	fp,4(sp)
 20062d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20062d4:	00808074 	movhi	r2,513
 20062d8:	10a16d04 	addi	r2,r2,-31308
 20062dc:	10800017 	ldw	r2,0(r2)
 20062e0:	1005003a 	cmpeq	r2,r2,zero
 20062e4:	1000061e 	bne	r2,zero,2006300 <alt_get_errno+0x3c>
 20062e8:	00808074 	movhi	r2,513
 20062ec:	10a16d04 	addi	r2,r2,-31308
 20062f0:	10800017 	ldw	r2,0(r2)
 20062f4:	103ee83a 	callr	r2
 20062f8:	e0bfff15 	stw	r2,-4(fp)
 20062fc:	00000306 	br	200630c <alt_get_errno+0x48>
 2006300:	00808074 	movhi	r2,513
 2006304:	10a18304 	addi	r2,r2,-31220
 2006308:	e0bfff15 	stw	r2,-4(fp)
 200630c:	e0bfff17 	ldw	r2,-4(fp)
}
 2006310:	e037883a 	mov	sp,fp
 2006314:	dfc00117 	ldw	ra,4(sp)
 2006318:	df000017 	ldw	fp,0(sp)
 200631c:	dec00204 	addi	sp,sp,8
 2006320:	f800283a 	ret

02006324 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2006324:	defff804 	addi	sp,sp,-32
 2006328:	dfc00715 	stw	ra,28(sp)
 200632c:	df000615 	stw	fp,24(sp)
 2006330:	df000604 	addi	fp,sp,24
 2006334:	e13ffc15 	stw	r4,-16(fp)
 2006338:	e17ffd15 	stw	r5,-12(fp)
 200633c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2006340:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2006344:	e0bffc17 	ldw	r2,-16(fp)
 2006348:	1004803a 	cmplt	r2,r2,zero
 200634c:	1000081e 	bne	r2,zero,2006370 <lseek+0x4c>
 2006350:	e0bffc17 	ldw	r2,-16(fp)
 2006354:	10800324 	muli	r2,r2,12
 2006358:	1007883a 	mov	r3,r2
 200635c:	00808034 	movhi	r2,512
 2006360:	109f0504 	addi	r2,r2,31764
 2006364:	1887883a 	add	r3,r3,r2
 2006368:	e0ffff15 	stw	r3,-4(fp)
 200636c:	00000106 	br	2006374 <lseek+0x50>
 2006370:	e03fff15 	stw	zero,-4(fp)
 2006374:	e0bfff17 	ldw	r2,-4(fp)
 2006378:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 200637c:	e0bffb17 	ldw	r2,-20(fp)
 2006380:	1005003a 	cmpeq	r2,r2,zero
 2006384:	1000111e 	bne	r2,zero,20063cc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2006388:	e0bffb17 	ldw	r2,-20(fp)
 200638c:	10800017 	ldw	r2,0(r2)
 2006390:	10800717 	ldw	r2,28(r2)
 2006394:	1005003a 	cmpeq	r2,r2,zero
 2006398:	1000091e 	bne	r2,zero,20063c0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200639c:	e0bffb17 	ldw	r2,-20(fp)
 20063a0:	10800017 	ldw	r2,0(r2)
 20063a4:	10800717 	ldw	r2,28(r2)
 20063a8:	e13ffb17 	ldw	r4,-20(fp)
 20063ac:	e17ffd17 	ldw	r5,-12(fp)
 20063b0:	e1bffe17 	ldw	r6,-8(fp)
 20063b4:	103ee83a 	callr	r2
 20063b8:	e0bffa15 	stw	r2,-24(fp)
 20063bc:	00000506 	br	20063d4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 20063c0:	00bfde84 	movi	r2,-134
 20063c4:	e0bffa15 	stw	r2,-24(fp)
 20063c8:	00000206 	br	20063d4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 20063cc:	00bfebc4 	movi	r2,-81
 20063d0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 20063d4:	e0bffa17 	ldw	r2,-24(fp)
 20063d8:	1004403a 	cmpge	r2,r2,zero
 20063dc:	1000071e 	bne	r2,zero,20063fc <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 20063e0:	20064140 	call	2006414 <alt_get_errno>
 20063e4:	1007883a 	mov	r3,r2
 20063e8:	e0bffa17 	ldw	r2,-24(fp)
 20063ec:	0085c83a 	sub	r2,zero,r2
 20063f0:	18800015 	stw	r2,0(r3)
    rc = -1;
 20063f4:	00bfffc4 	movi	r2,-1
 20063f8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 20063fc:	e0bffa17 	ldw	r2,-24(fp)
}
 2006400:	e037883a 	mov	sp,fp
 2006404:	dfc00117 	ldw	ra,4(sp)
 2006408:	df000017 	ldw	fp,0(sp)
 200640c:	dec00204 	addi	sp,sp,8
 2006410:	f800283a 	ret

02006414 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2006414:	defffd04 	addi	sp,sp,-12
 2006418:	dfc00215 	stw	ra,8(sp)
 200641c:	df000115 	stw	fp,4(sp)
 2006420:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2006424:	00808074 	movhi	r2,513
 2006428:	10a16d04 	addi	r2,r2,-31308
 200642c:	10800017 	ldw	r2,0(r2)
 2006430:	1005003a 	cmpeq	r2,r2,zero
 2006434:	1000061e 	bne	r2,zero,2006450 <alt_get_errno+0x3c>
 2006438:	00808074 	movhi	r2,513
 200643c:	10a16d04 	addi	r2,r2,-31308
 2006440:	10800017 	ldw	r2,0(r2)
 2006444:	103ee83a 	callr	r2
 2006448:	e0bfff15 	stw	r2,-4(fp)
 200644c:	00000306 	br	200645c <alt_get_errno+0x48>
 2006450:	00808074 	movhi	r2,513
 2006454:	10a18304 	addi	r2,r2,-31220
 2006458:	e0bfff15 	stw	r2,-4(fp)
 200645c:	e0bfff17 	ldw	r2,-4(fp)
}
 2006460:	e037883a 	mov	sp,fp
 2006464:	dfc00117 	ldw	ra,4(sp)
 2006468:	df000017 	ldw	fp,0(sp)
 200646c:	dec00204 	addi	sp,sp,8
 2006470:	f800283a 	ret

02006474 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2006474:	defffe04 	addi	sp,sp,-8
 2006478:	df000115 	stw	fp,4(sp)
 200647c:	df000104 	addi	fp,sp,4
 2006480:	e13fff15 	stw	r4,-4(fp)
}
 2006484:	e037883a 	mov	sp,fp
 2006488:	df000017 	ldw	fp,0(sp)
 200648c:	dec00104 	addi	sp,sp,4
 2006490:	f800283a 	ret

02006494 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2006494:	defffe04 	addi	sp,sp,-8
 2006498:	df000115 	stw	fp,4(sp)
 200649c:	df000104 	addi	fp,sp,4
 20064a0:	e13fff15 	stw	r4,-4(fp)
}
 20064a4:	e037883a 	mov	sp,fp
 20064a8:	df000017 	ldw	fp,0(sp)
 20064ac:	dec00104 	addi	sp,sp,4
 20064b0:	f800283a 	ret

020064b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20064b4:	defff704 	addi	sp,sp,-36
 20064b8:	dfc00815 	stw	ra,32(sp)
 20064bc:	df000715 	stw	fp,28(sp)
 20064c0:	df000704 	addi	fp,sp,28
 20064c4:	e13ffb15 	stw	r4,-20(fp)
 20064c8:	e17ffc15 	stw	r5,-16(fp)
 20064cc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20064d0:	e0bffb17 	ldw	r2,-20(fp)
 20064d4:	1004803a 	cmplt	r2,r2,zero
 20064d8:	1000081e 	bne	r2,zero,20064fc <read+0x48>
 20064dc:	e0bffb17 	ldw	r2,-20(fp)
 20064e0:	10800324 	muli	r2,r2,12
 20064e4:	1007883a 	mov	r3,r2
 20064e8:	00808034 	movhi	r2,512
 20064ec:	109f0504 	addi	r2,r2,31764
 20064f0:	1887883a 	add	r3,r3,r2
 20064f4:	e0ffff15 	stw	r3,-4(fp)
 20064f8:	00000106 	br	2006500 <read+0x4c>
 20064fc:	e03fff15 	stw	zero,-4(fp)
 2006500:	e0bfff17 	ldw	r2,-4(fp)
 2006504:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 2006508:	e0bffa17 	ldw	r2,-24(fp)
 200650c:	1005003a 	cmpeq	r2,r2,zero
 2006510:	1000241e 	bne	r2,zero,20065a4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2006514:	e0bffa17 	ldw	r2,-24(fp)
 2006518:	10800217 	ldw	r2,8(r2)
 200651c:	108000cc 	andi	r2,r2,3
 2006520:	10800060 	cmpeqi	r2,r2,1
 2006524:	10001a1e 	bne	r2,zero,2006590 <read+0xdc>
 2006528:	e0bffa17 	ldw	r2,-24(fp)
 200652c:	10800017 	ldw	r2,0(r2)
 2006530:	10800517 	ldw	r2,20(r2)
 2006534:	1005003a 	cmpeq	r2,r2,zero
 2006538:	1000151e 	bne	r2,zero,2006590 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200653c:	e0bffa17 	ldw	r2,-24(fp)
 2006540:	10800017 	ldw	r2,0(r2)
 2006544:	10800517 	ldw	r2,20(r2)
 2006548:	e17ffc17 	ldw	r5,-16(fp)
 200654c:	e1bffd17 	ldw	r6,-12(fp)
 2006550:	e13ffa17 	ldw	r4,-24(fp)
 2006554:	103ee83a 	callr	r2
 2006558:	e0bff915 	stw	r2,-28(fp)
 200655c:	e0bff917 	ldw	r2,-28(fp)
 2006560:	1004403a 	cmpge	r2,r2,zero
 2006564:	1000071e 	bne	r2,zero,2006584 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 2006568:	20065d40 	call	20065d4 <alt_get_errno>
 200656c:	e0fff917 	ldw	r3,-28(fp)
 2006570:	00c7c83a 	sub	r3,zero,r3
 2006574:	10c00015 	stw	r3,0(r2)
          return -1;
 2006578:	00bfffc4 	movi	r2,-1
 200657c:	e0bffe15 	stw	r2,-8(fp)
 2006580:	00000e06 	br	20065bc <read+0x108>
        }
        return rval;
 2006584:	e0bff917 	ldw	r2,-28(fp)
 2006588:	e0bffe15 	stw	r2,-8(fp)
 200658c:	00000b06 	br	20065bc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2006590:	20065d40 	call	20065d4 <alt_get_errno>
 2006594:	1007883a 	mov	r3,r2
 2006598:	00800344 	movi	r2,13
 200659c:	18800015 	stw	r2,0(r3)
 20065a0:	00000406 	br	20065b4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 20065a4:	20065d40 	call	20065d4 <alt_get_errno>
 20065a8:	1007883a 	mov	r3,r2
 20065ac:	00801444 	movi	r2,81
 20065b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20065b4:	00bfffc4 	movi	r2,-1
 20065b8:	e0bffe15 	stw	r2,-8(fp)
 20065bc:	e0bffe17 	ldw	r2,-8(fp)
}
 20065c0:	e037883a 	mov	sp,fp
 20065c4:	dfc00117 	ldw	ra,4(sp)
 20065c8:	df000017 	ldw	fp,0(sp)
 20065cc:	dec00204 	addi	sp,sp,8
 20065d0:	f800283a 	ret

020065d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20065d4:	defffd04 	addi	sp,sp,-12
 20065d8:	dfc00215 	stw	ra,8(sp)
 20065dc:	df000115 	stw	fp,4(sp)
 20065e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20065e4:	00808074 	movhi	r2,513
 20065e8:	10a16d04 	addi	r2,r2,-31308
 20065ec:	10800017 	ldw	r2,0(r2)
 20065f0:	1005003a 	cmpeq	r2,r2,zero
 20065f4:	1000061e 	bne	r2,zero,2006610 <alt_get_errno+0x3c>
 20065f8:	00808074 	movhi	r2,513
 20065fc:	10a16d04 	addi	r2,r2,-31308
 2006600:	10800017 	ldw	r2,0(r2)
 2006604:	103ee83a 	callr	r2
 2006608:	e0bfff15 	stw	r2,-4(fp)
 200660c:	00000306 	br	200661c <alt_get_errno+0x48>
 2006610:	00808074 	movhi	r2,513
 2006614:	10a18304 	addi	r2,r2,-31220
 2006618:	e0bfff15 	stw	r2,-4(fp)
 200661c:	e0bfff17 	ldw	r2,-4(fp)
}
 2006620:	e037883a 	mov	sp,fp
 2006624:	dfc00117 	ldw	ra,4(sp)
 2006628:	df000017 	ldw	fp,0(sp)
 200662c:	dec00204 	addi	sp,sp,8
 2006630:	f800283a 	ret

02006634 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2006634:	defff604 	addi	sp,sp,-40
 2006638:	df000915 	stw	fp,36(sp)
 200663c:	df000904 	addi	fp,sp,36
 2006640:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006644:	0005303a 	rdctl	r2,status
 2006648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200664c:	e0fffb17 	ldw	r3,-20(fp)
 2006650:	00bfff84 	movi	r2,-2
 2006654:	1884703a 	and	r2,r3,r2
 2006658:	1001703a 	wrctl	status,r2
  
  return context;
 200665c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2006660:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2006664:	d0a00f17 	ldw	r2,-32708(gp)
 2006668:	10c000c4 	addi	r3,r2,3
 200666c:	00bfff04 	movi	r2,-4
 2006670:	1884703a 	and	r2,r3,r2
 2006674:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2006678:	d0e00f17 	ldw	r3,-32708(gp)
 200667c:	e0bffe17 	ldw	r2,-8(fp)
 2006680:	1887883a 	add	r3,r3,r2
 2006684:	00810034 	movhi	r2,1024
 2006688:	10800004 	addi	r2,r2,0
 200668c:	10c0122e 	bgeu	r2,r3,20066d8 <sbrk+0xa4>
 2006690:	e0bffd17 	ldw	r2,-12(fp)
 2006694:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 2006698:	0005303a 	rdctl	r2,status
 200669c:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 20066a0:	e0fffa17 	ldw	r3,-24(fp)
 20066a4:	00bfff84 	movi	r2,-2
 20066a8:	1884703a 	and	r2,r3,r2
 20066ac:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 20066b0:	e0bff917 	ldw	r2,-28(fp)
 20066b4:	10c0004c 	andi	r3,r2,1
 20066b8:	e0bffa17 	ldw	r2,-24(fp)
 20066bc:	10c4b03a 	or	r2,r2,r3
 20066c0:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
 20066c4:	e0bffa17 	ldw	r2,-24(fp)
 20066c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 20066cc:	00bfffc4 	movi	r2,-1
 20066d0:	e0bfff15 	stw	r2,-4(fp)
 20066d4:	00001706 	br	2006734 <sbrk+0x100>
  }
#endif

  prev_heap_end = heap_end; 
 20066d8:	d0a00f17 	ldw	r2,-32708(gp)
 20066dc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 20066e0:	d0e00f17 	ldw	r3,-32708(gp)
 20066e4:	e0bffe17 	ldw	r2,-8(fp)
 20066e8:	1885883a 	add	r2,r3,r2
 20066ec:	d0a00f15 	stw	r2,-32708(gp)
 20066f0:	e0bffd17 	ldw	r2,-12(fp)
 20066f4:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
 20066f8:	0005303a 	rdctl	r2,status
 20066fc:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
 2006700:	e0fff817 	ldw	r3,-32(fp)
 2006704:	00bfff84 	movi	r2,-2
 2006708:	1884703a 	and	r2,r3,r2
 200670c:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
 2006710:	e0bff717 	ldw	r2,-36(fp)
 2006714:	10c0004c 	andi	r3,r2,1
 2006718:	e0bff817 	ldw	r2,-32(fp)
 200671c:	10c4b03a 	or	r2,r2,r3
 2006720:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
 2006724:	e0bff817 	ldw	r2,-32(fp)
 2006728:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200672c:	e0bffc17 	ldw	r2,-16(fp)
 2006730:	e0bfff15 	stw	r2,-4(fp)
 2006734:	e0bfff17 	ldw	r2,-4(fp)
} 
 2006738:	e037883a 	mov	sp,fp
 200673c:	df000017 	ldw	fp,0(sp)
 2006740:	dec00104 	addi	sp,sp,4
 2006744:	f800283a 	ret

02006748 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2006748:	defff704 	addi	sp,sp,-36
 200674c:	dfc00815 	stw	ra,32(sp)
 2006750:	df000715 	stw	fp,28(sp)
 2006754:	df000704 	addi	fp,sp,28
 2006758:	e13ffb15 	stw	r4,-20(fp)
 200675c:	e17ffc15 	stw	r5,-16(fp)
 2006760:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2006764:	e0bffb17 	ldw	r2,-20(fp)
 2006768:	1004803a 	cmplt	r2,r2,zero
 200676c:	1000081e 	bne	r2,zero,2006790 <write+0x48>
 2006770:	e0bffb17 	ldw	r2,-20(fp)
 2006774:	10800324 	muli	r2,r2,12
 2006778:	1007883a 	mov	r3,r2
 200677c:	00808034 	movhi	r2,512
 2006780:	109f0504 	addi	r2,r2,31764
 2006784:	1887883a 	add	r3,r3,r2
 2006788:	e0ffff15 	stw	r3,-4(fp)
 200678c:	00000106 	br	2006794 <write+0x4c>
 2006790:	e03fff15 	stw	zero,-4(fp)
 2006794:	e0bfff17 	ldw	r2,-4(fp)
 2006798:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 200679c:	e0bffa17 	ldw	r2,-24(fp)
 20067a0:	1005003a 	cmpeq	r2,r2,zero
 20067a4:	1000241e 	bne	r2,zero,2006838 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 20067a8:	e0bffa17 	ldw	r2,-24(fp)
 20067ac:	10800217 	ldw	r2,8(r2)
 20067b0:	108000cc 	andi	r2,r2,3
 20067b4:	1005003a 	cmpeq	r2,r2,zero
 20067b8:	10001a1e 	bne	r2,zero,2006824 <write+0xdc>
 20067bc:	e0bffa17 	ldw	r2,-24(fp)
 20067c0:	10800017 	ldw	r2,0(r2)
 20067c4:	10800617 	ldw	r2,24(r2)
 20067c8:	1005003a 	cmpeq	r2,r2,zero
 20067cc:	1000151e 	bne	r2,zero,2006824 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 20067d0:	e0bffa17 	ldw	r2,-24(fp)
 20067d4:	10800017 	ldw	r2,0(r2)
 20067d8:	10800617 	ldw	r2,24(r2)
 20067dc:	e17ffc17 	ldw	r5,-16(fp)
 20067e0:	e1bffd17 	ldw	r6,-12(fp)
 20067e4:	e13ffa17 	ldw	r4,-24(fp)
 20067e8:	103ee83a 	callr	r2
 20067ec:	e0bff915 	stw	r2,-28(fp)
 20067f0:	e0bff917 	ldw	r2,-28(fp)
 20067f4:	1004403a 	cmpge	r2,r2,zero
 20067f8:	1000071e 	bne	r2,zero,2006818 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 20067fc:	20068680 	call	2006868 <alt_get_errno>
 2006800:	e0fff917 	ldw	r3,-28(fp)
 2006804:	00c7c83a 	sub	r3,zero,r3
 2006808:	10c00015 	stw	r3,0(r2)
        return -1;
 200680c:	00bfffc4 	movi	r2,-1
 2006810:	e0bffe15 	stw	r2,-8(fp)
 2006814:	00000e06 	br	2006850 <write+0x108>
      }
      return rval;
 2006818:	e0bff917 	ldw	r2,-28(fp)
 200681c:	e0bffe15 	stw	r2,-8(fp)
 2006820:	00000b06 	br	2006850 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2006824:	20068680 	call	2006868 <alt_get_errno>
 2006828:	1007883a 	mov	r3,r2
 200682c:	00800344 	movi	r2,13
 2006830:	18800015 	stw	r2,0(r3)
 2006834:	00000406 	br	2006848 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2006838:	20068680 	call	2006868 <alt_get_errno>
 200683c:	1007883a 	mov	r3,r2
 2006840:	00801444 	movi	r2,81
 2006844:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2006848:	00bfffc4 	movi	r2,-1
 200684c:	e0bffe15 	stw	r2,-8(fp)
 2006850:	e0bffe17 	ldw	r2,-8(fp)
}
 2006854:	e037883a 	mov	sp,fp
 2006858:	dfc00117 	ldw	ra,4(sp)
 200685c:	df000017 	ldw	fp,0(sp)
 2006860:	dec00204 	addi	sp,sp,8
 2006864:	f800283a 	ret

02006868 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2006868:	defffd04 	addi	sp,sp,-12
 200686c:	dfc00215 	stw	ra,8(sp)
 2006870:	df000115 	stw	fp,4(sp)
 2006874:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2006878:	00808074 	movhi	r2,513
 200687c:	10a16d04 	addi	r2,r2,-31308
 2006880:	10800017 	ldw	r2,0(r2)
 2006884:	1005003a 	cmpeq	r2,r2,zero
 2006888:	1000061e 	bne	r2,zero,20068a4 <alt_get_errno+0x3c>
 200688c:	00808074 	movhi	r2,513
 2006890:	10a16d04 	addi	r2,r2,-31308
 2006894:	10800017 	ldw	r2,0(r2)
 2006898:	103ee83a 	callr	r2
 200689c:	e0bfff15 	stw	r2,-4(fp)
 20068a0:	00000306 	br	20068b0 <alt_get_errno+0x48>
 20068a4:	00808074 	movhi	r2,513
 20068a8:	10a18304 	addi	r2,r2,-31220
 20068ac:	e0bfff15 	stw	r2,-4(fp)
 20068b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20068b4:	e037883a 	mov	sp,fp
 20068b8:	dfc00117 	ldw	ra,4(sp)
 20068bc:	df000017 	ldw	fp,0(sp)
 20068c0:	dec00204 	addi	sp,sp,8
 20068c4:	f800283a 	ret
 20068c8:	02004504 	movi	r8,276
